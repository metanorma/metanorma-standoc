---
http_interactions:
- request:
    method: get
    uri: https://www.iso.org/cms/render/live/en/sites/isoorg.advancedSearch.do?docNumber=123&status=ENT_ACTIVE,ENT_PROGRESS,ENT_INACTIVE,ENT_DELETED
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json, text/plain, */*
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Apache-Coyote/1.1
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=65F0CAE7660D02256A138BA5FEB5831A; Path=/; HttpOnly
      Content-Type:
      - application/json;charset=UTF-8
      Content-Length:
      - '5622'
      Date:
      - Tue, 22 Oct 2019 23:09:16 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: '{"standards":[{"priceGroup":"B","publicationStatus":"Withdrawn","prodsAvailable":false,"revisedBy":[{"csnumber":3926,"publicationStatus":"Withdrawn","docRef":"ISO
        123:1985","splitPath":"/00/39","publicationStatus_key":"ENT_INACTIVE","stageId":"95.99"}],"docNumber":123,"langCode":"EN","docEdition":1,"newProjectDate":"1974-01-01
        00:00:00.0","splitPath":"/00/39","docElem":"0","title":"Rubber latex \u2014
        Sampling","stageStart":"1985-07-01","pages":2,"docRef":"ISO 123:1974","ics":[{"label":"83.040.10","text":"Latex
        and raw rubber"}],"publicationStatus_key":"ENT_INACTIVE","docPartNo":10,"pubLangs":"en","publicationDate":"1974-01","sdg_count":0,"stageId":"95.99","csnumber":3925,"committee":{"sector_key":"NON_METALLIC_MATERIALS","level":"Main
        committee","splitPath":"/04/86","level_key":"MAIN_COMMITTEE","title":"Rubber
        and rubber products","reference":"ISO/TC 45","sortKey":"ISO/TC 045","field_key":"TECHNICAL","field":"Technical","id":48668,"sector":"Non-metallic
        materials","status_key":"ENT_ACTIVE","status":"Active"},"docType":10,"urn":"iso:std:3925:en","docElemSeq":0,"revises_count":0,"stages":[{"stageStart":"1974-01-01","stageId":"60.60"},{"stageStart":"1985-07-01","stageId":"95.99"}],"docPart":"","associatedCommittees_count":0,"supplements_count":0,"revisedBy_count":1,"ics_count":1},{"priceGroup":"B","publicationStatus":"Withdrawn","prodsAvailable":false,"revisedBy":[{"csnumber":23281,"publicationStatus":"Published","docRef":"ISO
        123:2001","splitPath":"/02/32","publicationStatus_key":"ENT_ACTIVE","stageId":"90.93"}],"docNumber":123,"langCode":"EN","docEdition":2,"newProjectDate":"1982-05-01
        00:00:00.0","splitPath":"/00/39","docElem":"0","title":"Rubber latex \u2014
        Sampling","stageStart":"2001-05-31","pages":4,"docRef":"ISO 123:1985","ics":[{"label":"83.040.10","text":"Latex
        and raw rubber"}],"publicationStatus_key":"ENT_INACTIVE","docPartNo":10,"pubLangs":"en,fr","publicationDate":"1985-08","sdg_count":0,"stageId":"95.99","csnumber":3926,"committee":{"sector_key":"NON_METALLIC_MATERIALS","level":"Sub
        committee","splitPath":"/04/87","level_key":"SUB_COMMITTEE","title":"Raw materials
        (including latex) for use in the rubber industry","reference":"ISO/TC 45/SC
        3","sortKey":"ISO/TC 045/~SC 003","field_key":"TECHNICAL","field":"Technical","id":48716,"sector":"Non-metallic
        materials","status_key":"ENT_ACTIVE","status":"Active"},"docType":10,"revises":[{"csnumber":3925,"publicationStatus":"Withdrawn","docRef":"ISO
        123:1974","splitPath":"/00/39","publicationStatus_key":"ENT_INACTIVE","stageId":"95.99"}],"urn":"iso:std:3926:en","docElemSeq":0,"revises_count":1,"stages":[{"stageStart":"1982-05-01","stageId":"30.00"},{"stageStart":"1983-01-01","stageId":"30.99"},{"stageStart":"1983-10-01","stageId":"40.00"},{"stageStart":"1984-03-01","stageId":"40.20"},{"stageStart":"1984-09-01","stageId":"40.60"},{"stageStart":"1985-04-24","stageId":"50.00"},{"stageStart":"1985-06-04","stageId":"50.20"},{"stageStart":"1985-06-04","stageId":"50.60"},{"stageStart":"1985-08-01","stageId":"60.60"},{"stageStart":"1991-01-01","stageId":"90.93"},{"stageStart":"1993-08-15","stageId":"90.92"},{"stageStart":"2001-05-31","stageId":"95.99"}],"docPart":"","associatedCommittees_count":0,"supplements_count":0,"revisedBy_count":1,"ics_count":1},{"priceGroup":"B","publicationStatus":"Published","prodsAvailable":true,"docNumber":123,"langCode":"EN","docEdition":3,"newProjectDate":"1993-08-15
        00:00:00.0","splitPath":"/02/32","docElem":"0","title":"Rubber latex \u2014
        Sampling","stageStart":"2016-06-24","pages":8,"docRef":"ISO 123:2001","ics":[{"label":"83.040.10","text":"Latex
        and raw rubber"}],"publicationStatus_key":"ENT_ACTIVE","docPartNo":10,"pubLangs":"en,fr","publicationDate":"2001-05","sdg_count":0,"stageId":"90.93","csnumber":23281,"committee":{"sector_key":"NON_METALLIC_MATERIALS","level":"Sub
        committee","splitPath":"/04/87","level_key":"SUB_COMMITTEE","title":"Raw materials
        (including latex) for use in the rubber industry","reference":"ISO/TC 45/SC
        3","sortKey":"ISO/TC 045/~SC 003","field_key":"TECHNICAL","field":"Technical","id":48716,"sector":"Non-metallic
        materials","status_key":"ENT_ACTIVE","status":"Active"},"docType":10,"revises":[{"csnumber":3926,"publicationStatus":"Withdrawn","docRef":"ISO
        123:1985","splitPath":"/00/39","publicationStatus_key":"ENT_INACTIVE","stageId":"95.99"}],"urn":"iso:std:23281:en","docElemSeq":0,"revises_count":1,"stages":[{"stageStart":"1993-08-15","stageId":"20.00"},{"stageStart":"1993-11-19","stageId":"20.20"},{"stageStart":"1995-12-15","stageId":"20.99"},{"stageStart":"1996-07-26","stageId":"30.00"},{"stageStart":"1996-07-26","stageId":"30.20"},{"stageStart":"1996-10-28","stageId":"30.99"},{"stageStart":"1997-09-22","stageId":"40.00"},{"stageStart":"1997-10-30","stageId":"40.20"},{"stageStart":"1998-04-20","stageId":"40.60"},{"stageStart":"2000-06-29","stageId":"40.99"},{"stageStart":"2000-08-29","stageId":"50.00"},{"stageStart":"2000-12-07","stageId":"50.20"},{"stageStart":"2001-02-28","stageId":"50.60"},{"stageStart":"2001-03-05","stageId":"60.00"},{"stageStart":"2001-05-31","stageId":"60.60"},{"stageStart":"2005-11-15","stageId":"90.20"},{"stageStart":"2006-07-31","stageId":"90.60"},{"stageStart":"2006-07-31","stageId":"90.93"},{"stageStart":"2011-01-15","stageId":"90.20"},{"stageStart":"2011-06-17","stageId":"90.60"},{"stageStart":"2011-06-21","stageId":"90.93"},{"stageStart":"2016-01-15","stageId":"90.20"},{"stageStart":"2016-06-17","stageId":"90.60"},{"stageStart":"2016-06-24","stageId":"90.93"},{"stageId":"90.20"}],"docPart":"","associatedCommittees_count":0,"supplements_count":0,"revisedBy_count":0,"ics_count":1}]}'
    http_version: 
  recorded_at: Tue, 22 Oct 2019 23:09:17 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/02/32/23281.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Server:
      - Apache-Coyote/1.1
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=3803969656F03DCC960DD74DDE623403; Path=/; HttpOnly
      Location:
      - "/standard/23281.html"
      Content-Length:
      - '0'
      Date:
      - Tue, 22 Oct 2019 23:09:19 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
    http_version: 
  recorded_at: Tue, 22 Oct 2019 23:09:19 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/23281.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Apache-Coyote/1.1
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=42BC530A558729468394008D109FA3B3; Path=/; HttpOnly
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      Date:
      - Tue, 22 Oct 2019 23:09:20 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 22 Oct 2019 23:09:21 GMT
- request:
    method: get
    uri: https://www.iso.org/fr/standard/23281.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Apache-Coyote/1.1
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=7A51464F037E43868C4E2CD51988576A; Path=/; HttpOnly
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      Date:
      - Tue, 22 Oct 2019 23:09:21 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 22 Oct 2019 23:09:22 GMT
recorded_with: VCR 5.0.0
