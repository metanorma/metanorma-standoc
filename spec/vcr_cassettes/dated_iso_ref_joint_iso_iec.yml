---
http_interactions:
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO/IEC TR 12382","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.2.5), Ruby (3.1.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Wed, 07 Sep 2022 11:41:15 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: '{"hits":[{"category":"standard","path":"/sites/isoorg/contents/data/standard/02/10/21071","uuid":"3dee5d6e-3b0a-48d1-8a58-d642448872ea","title":"ISO/IEC
        TR 12382:1992 Permuted index of the vocabulary of information technology","status":"Published","year":2013,"order":11,"text":"Contains
        a permuted index of all terms included in the parts 1 - 28 of ISO 2382. If
        any of these parts has been revised, the present TR refers to the revision.
        ","objectID":"21071_0","_highlightResult":{"title":{"value":"<em>ISO</em>/<em>IEC</em>
        <em>TR</em> <em>12382</em>:1992 Permuted index of the vocabulary of information
        technology","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","iec","tr","12382"]},"text":{"value":"Contains
        a permuted index of all terms included in the parts 1 - 28 of <em>ISO</em>
        2382. If any of these parts has been revised, the present <em>TR</em> refers
        to the revision. ","matchLevel":"partial","fullyHighlighted":false,"matchedWords":["iso","tr"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/01/96/19693","uuid":"d8bb11e1-1cab-4f43-a9e5-56f0e5a01186","title":"ISO/IEC
        TR 12382:1989 Permuted index of the vocabulary of information processing","status":"Withdrawn","year":1992,"order":100,"objectID":"19693_0","_highlightResult":{"title":{"value":"<em>ISO</em>/<em>IEC</em>
        <em>TR</em> <em>12382</em>:1989 Permuted index of the vocabulary of information
        processing","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","iec","tr","12382"]}}}],"nbHits":2,"page":0,"nbPages":1,"hitsPerPage":100,"exhaustiveNbHits":true,"exhaustiveTypo":true,"exhaustive":{"nbHits":true,"typo":true},"query":"ISO/IEC
        TR 12382","params":"query=ISO%2FIEC+TR+12382&hitsPerPage=100&filters=category%3Astandard","processingTimeMS":1}'
  recorded_at: Wed, 07 Sep 2022 11:41:15 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO/IEC TR 12382","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.2.5), Ruby (3.1.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Wed, 07 Sep 2022 11:41:15 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: '{"hits":[{"category":"standard","path":"/sites/isoorg/contents/data/standard/02/10/21071","uuid":"3dee5d6e-3b0a-48d1-8a58-d642448872ea","title":"ISO/IEC
        TR 12382:1992 Permuted index of the vocabulary of information technology","status":"Published","year":2013,"order":11,"text":"Contains
        a permuted index of all terms included in the parts 1 - 28 of ISO 2382. If
        any of these parts has been revised, the present TR refers to the revision.
        ","objectID":"21071_0","_highlightResult":{"title":{"value":"<em>ISO</em>/<em>IEC</em>
        <em>TR</em> <em>12382</em>:1992 Permuted index of the vocabulary of information
        technology","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","iec","tr","12382"]},"text":{"value":"Contains
        a permuted index of all terms included in the parts 1 - 28 of <em>ISO</em>
        2382. If any of these parts has been revised, the present <em>TR</em> refers
        to the revision. ","matchLevel":"partial","fullyHighlighted":false,"matchedWords":["iso","tr"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/01/96/19693","uuid":"d8bb11e1-1cab-4f43-a9e5-56f0e5a01186","title":"ISO/IEC
        TR 12382:1989 Permuted index of the vocabulary of information processing","status":"Withdrawn","year":1992,"order":100,"objectID":"19693_0","_highlightResult":{"title":{"value":"<em>ISO</em>/<em>IEC</em>
        <em>TR</em> <em>12382</em>:1989 Permuted index of the vocabulary of information
        processing","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","iec","tr","12382"]}}}],"nbHits":2,"page":0,"nbPages":1,"hitsPerPage":100,"exhaustiveNbHits":true,"exhaustiveTypo":true,"exhaustive":{"nbHits":true,"typo":true},"query":"ISO/IEC
        TR 12382","params":"query=ISO%2FIEC+TR+12382&hitsPerPage=100&filters=category%3Astandard","processingTimeMS":1}'
  recorded_at: Wed, 07 Sep 2022 11:41:15 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 124","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.2.5), Ruby (3.1.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Wed, 07 Sep 2022 11:41:15 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 07 Sep 2022 11:41:15 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/02/10/21071.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=22D816A782AD9014E46E85C14151016A; Path=/; Secure; HttpOnly
      Location:
      - "/standard/21071.html"
      Content-Length:
      - '0'
      Date:
      - Wed, 07 Sep 2022 11:41:15 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Wed, 07 Sep 2022 11:41:16 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/02/10/21071.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=1E52A52BB4782D8C4C3AD19C33A1E162; Path=/; Secure; HttpOnly
      Location:
      - "/standard/21071.html"
      Content-Length:
      - '0'
      Date:
      - Wed, 07 Sep 2022 11:41:19 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Wed, 07 Sep 2022 11:41:19 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/06/18/61884.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=98D5181481BA16CB8750E5B23A14B23E; Path=/; Secure; HttpOnly
      Location:
      - "/standard/61884.html"
      Content-Length:
      - '0'
      Date:
      - Wed, 07 Sep 2022 11:41:19 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Wed, 07 Sep 2022 11:41:20 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/21071.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=5A28CF4C7E3E6D8470FCE621B24C3860; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Wed, 07 Sep 2022 11:41:18 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 07 Sep 2022 11:41:20 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 124","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.2.5), Ruby (3.1.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Wed, 07 Sep 2022 11:41:21 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 07 Sep 2022 11:41:21 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/61884.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=9C8482C23E1A7064D88A7F2FC7FE246E; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Wed, 07 Sep 2022 11:41:20 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 07 Sep 2022 11:41:24 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/21071.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=BCBC3A92BD9685946A5F37CC6ADA9589; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Wed, 07 Sep 2022 11:41:20 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 07 Sep 2022 11:41:24 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/06/18/61884.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=E533AF29EAEDA3B4F4E29C5362227750; Path=/; Secure; HttpOnly
      Location:
      - "/standard/61884.html"
      Content-Length:
      - '0'
      Date:
      - Wed, 07 Sep 2022 11:41:25 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Wed, 07 Sep 2022 11:41:26 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/61884.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=BCDD610563F700B7D77356AF941AEB46; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Wed, 07 Sep 2022 11:41:26 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 07 Sep 2022 11:41:27 GMT
recorded_with: VCR 6.1.0
