---
http_interactions:
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-rfcs/main/data/RFC8341.yaml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '2606'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"2462e40258f94ff2307563256219dc4b1e4a2144291b25b676eb13d8c242d1df"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - E366:35C16A:F9DAC:12B783:65311FD4
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 19 Oct 2023 12:36:37 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-mel11264-MEL
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1697718997.146016,VS0,VE1
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 7fd91e4b3d5503da44ff83d6921dbb01d37bb1fb
      Expires:
      - Thu, 19 Oct 2023 12:41:37 GMT
      Source-Age:
      - '14'
    body:
      encoding: ASCII-8BIT
      string: |
        ---
        schema-version: v1.2.4
        id: RFC8341
        title:
        - content: Network Configuration Access Control Model
          format: text/plain
          type: main
        link:
        - content: https://www.rfc-editor.org/info/rfc8341
          type: src
        type: standard
        docid:
        - id: RFC 8341
          type: IETF
          primary: true
        - id: 10.17487/RFC8341
          type: DOI
        docnumber: RFC8341
        date:
        - type: published
          value: 2018-03
        contributor:
        - person:
            name:
              given:
                forename:
                - language:
                  - en
                  script:
                  - Latn
                  initial: A
                formatted_initials:
                  content: A.
                  language:
                  - en
                  script:
                  - Latn
              surname:
                content: Bierman
                language:
                - en
                script:
                - Latn
              completename:
                content: A. Bierman
                language:
                - en
                script:
                - Latn
          role:
          - type: author
        - person:
            name:
              given:
                forename:
                - language:
                  - en
                  script:
                  - Latn
                  initial: M
                formatted_initials:
                  content: M.
                  language:
                  - en
                  script:
                  - Latn
              surname:
                content: Bjorklund
                language:
                - en
                script:
                - Latn
              completename:
                content: M. Bjorklund
                language:
                - en
                script:
                - Latn
          role:
          - type: author
        - organization:
            name:
            - content: RFC Publisher
          role:
          - type: publisher
        - organization:
            name:
            - content: RFC Series
          role:
          - type: authorizer
        revdate: 2018-03
        language:
        - en
        script:
        - Latn
        abstract:
        - content: "<p>The standardization of network configuration interfaces for use with
            the Network Configuration Protocol (NETCONF) or the RESTCONF protocol requires
            a structured and secure operating environment that promotes human usability and
            multi-vendor interoperability. There is a need for standard mechanisms to restrict
            NETCONF or RESTCONF protocol access for particular users to a preconfigured subset
            of all available NETCONF or RESTCONF protocol operations and content. This document
            defines such an access control model.</p><p>This document obsoletes RFC 6536.</p>"
          language:
          - en
          script:
          - Latn
          format: text/html
        series:
        - title:
            content: STD
            format: text/plain
          number: '91'
        - title:
            content: RFC
            format: text/plain
          number: '8341'
        - type: stream
          title:
            content: IETF
            format: text/plain
        keyword:
        - content: NETCONF RESTCONF
        - content: YANG
        - content: XML
        editorialgroup:
        - name: netconf
        ext:
          schema-version: v1.0.1
          stream: IETF
  recorded_at: Thu, 19 Oct 2023 12:36:37 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 125","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.2), Ruby (3.2.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 19 Oct 2023 12:36:38 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '2'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 19 Oct 2023 12:36:38 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/07/28/72849.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=B3F62F7DA9FD1BC226E24990DF596191; Path=/; Secure; HttpOnly
      Location:
      - "/standard/72849.html"
      Content-Length:
      - '0'
      Date:
      - Thu, 19 Oct 2023 12:36:47 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Thu, 19 Oct 2023 12:36:48 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/72849.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=A8A7B3830E47F1F4327821B41B25497C; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Thu, 19 Oct 2023 12:36:49 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 19 Oct 2023 12:36:50 GMT
recorded_with: VCR 6.1.0
