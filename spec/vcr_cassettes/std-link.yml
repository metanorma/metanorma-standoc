---
http_interactions:
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 131","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.2), Ruby (3.2.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 25 Sep 2023 08:15:13 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '7'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {"hits":[{"category":"standard","path":"/sites/isoorg/contents/data/standard/00/39/3944","uuid":"4004ac6c-4761-41c9-b987-c0192a18259c","title":"ISO 131:1979 Acoustics — Expression of physical and subjective magnitudes of sound or noise in air","status":"Withdrawn","year":1996,"order":100,"objectID":"3944_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>:1979 Acoustics — Expression of physical and subjective magnitudes of sound or noise in air","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/08/66/86600","uuid":"bff95681-84cb-4ff1-b5d6-bdfa379c6b56","title":"ISO 13145:2023 Rubber — Determination of viscosity and stress relaxation using a rotorless sealed shear rheometer","status":"Published","year":2023,"order":11,"text":"This document describes a method for the determination of the viscosity and stress relaxation of raw or compounded rubber under specified conditions. The viscosity determination consists of a constant strain, temperature and frequency test in which the elastic and the loss components of the complex shear modulus can be determined. The determination of stress relaxation consists of a constant static strain and temperature test in which the torque decrease can be determined. ","objectID":"86600_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>45:2023 Rubber — Determination of viscosity and stress relaxation using a rotorless sealed shear rheometer","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"This document describes a method for the determination of the viscosity and stress relaxation of raw or compounded rubber under specified conditions. The viscosity determination consists of a constant strain, temperature and frequency test in which the elastic and the loss components of the complex shear modulus can be determined. The determination of stress relaxation consists of a constant static strain and temperature test in which the torque decrease can be determined. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/08/30/83056","uuid":"42d4652d-ff99-4f4c-b7ee-cc28947ae58f","title":"ISO 13167:2023 Water quality — Plutonium, americium, curium and neptunium — Test method using alpha spectrometry","status":"Published","year":2023,"order":11,"text":"This document specifies a test method for measuring actinides ( 238 Pu,  239+240 Pu,  241 Am, 242 Cm, 243+244 Cm and 237 Np) in water samples by alpha spectrometry following a chemical separation. This method can be used for any type of environmental study or monitoring after appropriate sampling and handling, and test sample preparation. The detection limit of the test method is 5 × 10 −3 Bq·l -1 to 5 × 10 −4  Bq·l -1 for a volume of test portion between 0,1 l to 5 l with a counting time of two to ten days. This is lower than the WHO criteria for safe consumption of drinking water (1 Bq·l -1 or 10 Bq·l -1 depending on radionuclide). [ 4 ] The method described in this document is applicable in the event of an emergency situation. ","objectID":"83056_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>67:2023 Water quality — Plutonium, americium, curium and neptunium — Test method using alpha spectrometry","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"This document specifies a test method for measuring actinides ( 238 Pu,  239+240 Pu,  241 Am, 242 Cm, 243+244 Cm and 237 Np) in water samples by alpha spectrometry following a chemical separation. This method can be used for any type of environmental study or monitoring after appropriate sampling and handling, and test sample preparation. The detection limit of the test method is 5 × 10 −3 Bq·l -1 to 5 × 10 −4  Bq·l -1 for a volume of test portion between 0,1 l to 5 l with a counting time of two to ten days. This is lower than the WHO criteria for safe consumption of drinking water (1 Bq·l -1 or 10 Bq·l -1 depending on radionuclide). [ 4 ] The method described in this document is applicable in the event of an emergency situation. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/08/30/83055","uuid":"2081f879-fd40-4fcf-b313-3dac63404744","title":"ISO 13164-4:2023 Water quality — Radon-222 — Part 4: Test method using two-phase liquid scintillation counting","status":"Published","year":2023,"order":11,"text":"This document describes a test method for the determination of radon-222 ( 222 Rn) activity concentration in non-saline waters by extraction and liquid scintillation counting. The 222 Rn activity concentrations, which can be measured by this test method utilizing currently available instruments, are above 0,5 Bq·l −1 which is the typical detection limit for a 10 ml test sample and a measuring time of 1 h. It is the responsibility of the laboratory to ensure the validity of this test method for water samples of untested matrices. Annex A gives indication on the necessary counting conditions to meet the required detection limits for drinking water monitoring. ","objectID":"83055_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>64-4:2023 Water quality — Radon-222 — Part 4: Test method using two-phase liquid scintillation counting","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"This document describes a test method for the determination of radon-222 ( 222 Rn) activity concentration in non-saline waters by extraction and liquid scintillation counting. The 222 Rn activity concentrations, which can be measured by this test method utilizing currently available instruments, are above 0,5 Bq·l −1 which is the typical detection limit for a 10 ml test sample and a measuring time of 1 h. It is the responsibility of the laboratory to ensure the validity of this test method for water samples of untested matrices. Annex A gives indication on the necessary counting conditions to meet the required detection limits for drinking water monitoring. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/08/29/82979","uuid":"1b439ce7-5e93-4c6d-8367-21247c8c49c7","title":"ISO 13132:2023 Laboratory glassware — Petri dishes","status":"Published","year":2023,"order":11,"text":"This document specifies requirements and tests for glass Petri dishes intended for general laboratory purposes and microbiological work. ","objectID":"82979_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>32:2023 Laboratory glassware — Petri dishes","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"This document specifies requirements and tests for glass Petri dishes intended for general laboratory purposes and microbiological work. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/07/18/71871","uuid":"9b41de82-211e-429d-b999-6d2fdcc00ed5","title":"ISO 13184-3:2017 Intelligent transport systems (ITS) — Guidance protocol via personal ITS station for advisory safety systems — Part 3: Road guidance protocol (RGP) conformance test specification","status":"Published","year":2023,"order":11,"text":"ISO 13184-3:2017 specifies conformance tests for a self-conformance assessment of the supplier's P-ITS-S system. The conformance test cases follow the use case definition of ISO/TR 13184‑1 and the requirements stated in ISO 13184‑2 based on the Data eXchange Message (DXM) at the application level regarding the safety warning and parking guide services between -      the Vehicle ITS Station (V-ITS-S) installed in the vehicle, or -      a Personal ITS Station (P-ITS-S), e.g. Nomadic Device, in a vehicle or used by a pedestrian, and -      a Roadside ITS Station (R-ITS-S) installed at the roadside. The primary but not exclusive purpose of this document is to provide information to the P-ITS-S system provider to build and test the P-ITS-S system against the conformance test cases. This final step in the development process of the P-ITS-S system ensures providers that their P-ITS-S system meets a high degree of functional requirements expected by the end user. ","objectID":"71871_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>84-3:2017 Intelligent transport systems (ITS) — Guidance protocol via personal ITS station for advisory safety systems — Part 3: Road guidance protocol (RGP) conformance test specification","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>84-3:2017 specifies conformance tests for a self-conformance assessment of the supplier's P-ITS-S system. The conformance test cases follow the use case definition of <em>ISO</em>/TR <em>131</em>84‑1 and the requirements stated in <em>ISO</em> <em>131</em>84‑2 based on the Data eXchange Message (DXM) at the application level regarding the safety warning and parking guide services between -      the Vehicle ITS Station (V-ITS-S) installed in the vehicle, or -      a Personal ITS Station (P-ITS-S), e.g. Nomadic Device, in a vehicle or used by a pedestrian, and -      a Roadside ITS Station (R-ITS-S) installed at the roadside. The primary but not exclusive purpose of this document is to provide information to the P-ITS-S system provider to build and test the P-ITS-S system against the conformance test cases. This final step in the development process of the P-ITS-S system ensures providers that their P-ITS-S system meets a high degree of functional requirements expected by the end user. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/06/87/68769","uuid":"36a66320-c0f8-4a84-bbe1-80d325168cd6","title":"ISO 13169:2018 Water quality — Uranium — Test method using alpha liquid scintillation counting","status":"Published","year":2023,"order":11,"text":"This document specifies the measurement method for the determination of total activity concentration of uranium isotopes in non-saline waters by extraction and liquid scintillation counting. This method covers the measurement of soluble uranium isotopes in water in activity concentrations between approximately 2·10 −3 Bq/kg and 10 Bq/kg when analysing a 1 l test sample volume with a 60 000 s counting time with a typical alpha LSC instrument. The ratio 234 U/ 238 U can also be determined. This method has not been tested for the measurement of other uranium isotopes. ","objectID":"68769_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>69:2018 Water quality — Uranium — Test method using alpha liquid scintillation counting","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"This document specifies the measurement method for the determination of total activity concentration of uranium isotopes in non-saline waters by extraction and liquid scintillation counting. This method covers the measurement of soluble uranium isotopes in water in activity concentrations between approximately 2·10 −3 Bq/kg and 10 Bq/kg when analysing a 1 l test sample volume with a 60 000 s counting time with a typical alpha LSC instrument. The ratio 234 U/ 238 U can also be determined. This method has not been tested for the measurement of other uranium isotopes. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/06/15/61572","uuid":"638a1978-96fb-4888-9810-edcefb9ebbff","title":"ISO 13185-3:2018 Intelligent transport systems  — Vehicle interface for provisioning and support of ITS Services — Part 3: Unified vehicle interface protocol (UVIP) server and client API specification","status":"Published","year":2023,"order":11,"text":"This document specifies the server and client APIs of the Unified Gateway Protocol (UGP). Figure 1 shows an overview of the UGP client and server API. A UGP client application on a P-ITS-S communicates with a UGP server application on a V-ITS-S. The UGP client application implements the UGP client API using ISO 13185-2. The UGP server application implements the UGP server API using ISO 13185-2. ","objectID":"61572_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>85-3:2018 Intelligent transport systems  — Vehicle interface for provisioning and support of ITS Services — Part 3: Unified vehicle interface protocol (UVIP) server and client API specification","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"This document specifies the server and client APIs of the Unified Gateway Protocol (UGP). Figure 1 shows an overview of the UGP client and server API. A UGP client application on a P-ITS-S communicates with a UGP server application on a V-ITS-S. The UGP client application implements the UGP client API using <em>ISO</em> <em>131</em>85-2. The UGP server application implements the UGP server API using <em>ISO</em> <em>131</em>85-2. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/36/53660","uuid":"77e57540-b355-41c2-a9cd-0262d07b8a28","title":"ISO 13174:2012 Cathodic protection of harbour installations","status":"Published","year":2023,"order":11,"text":"ISO 13174:2012 defines the means to be used to ensure that cathodic protection is efficiently applied to the immersed and driven/buried metallic external surfaces of steel port, harbour, coastal and flood defence installations and appurtenances in seawater and saline mud to provide protection from corrosion. ISO 13174:2012 specifies cathodic protection of fixed and floating port and harbour structures. This includes piers, jetties, dolphins (mooring and berthing), sheet or tubular piling, pontoons, buoys, floating docks, lock and sluice gates. It also specifies cathodic protection of the submerged areas of appurtenances, such as chains attached to the structure, when these are not electrically isolated from the structure. ISO 13174:2012 is to be used in respect of cathodic protection systems where the anodes are exposed to water or saline mud. For buried areas, typically in soil or sand filled areas behind piled walls or within filled caissons, which may be significantly affected by corrosion, specific cathodic protection design and operation requirements are defined in EN 12954, the anodes being exposed to soils. ISO 13174:2012 does not cover the cathodic protection of fixed or floating offshore structures (including offshore loading buoys), submarine pipelines or ships. ISO 13174:2012 does not include the internal protection of surfaces of any components such as ballast tanks, internals of floating structures flooded compartments of lock and sluice gates or the internals of tubular steel piles. ISO 13174:2012 covers the cathodic protection of structures fabricated principally from bare or coated carbon and carbon manganese steels. As some parts of the structure may be made of metallic materials other than carbon steels, the cathodic protection system should be designed to ensure that there is a complete control over any galvanic coupling and minimize risks due to hydrogen embrittlement or hydrogen-induced cracking (see ISO 12473 ). ISO 13174:2012 does not address steel reinforced concrete structures (see EN 12696). ISO 13174:2012 is applicable to the whole submerged zone in seawater, brackish waters and saline mud and related buried areas which can normally be found in port, harbour, coastal and flood defence installations wherever these structures are fixed or floating. For surfaces which are alternately immersed and exposed to the atmosphere, the cathodic protection is only effective when the immersion time is long enough for the steel to become polarized. Typically, effective cathodic protection is achieved for all surfaces below mid tide. For structures such as sheet steel and tubular steel piles that are driven into the sea bed or those that are partially buried or covered in mud, ISO 13174:2012 is also applicable to the surfaces buried, driven and exposed to mud which are intended to receive cathodic protection along with surfaces immersed in water. Cathodic protection may also be applied to the rear faces of sheet steel piled walls and the internal surfaces of filled caissons. Cathodic protection of such surfaces is specified by EN 12954. ","objectID":"53660_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>74:2012 Cathodic protection of harbour installations","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>74:2012 defines the means to be used to ensure that cathodic protection is efficiently applied to the immersed and driven/buried metallic external surfaces of steel port, harbour, coastal and flood defence installations and appurtenances in seawater and saline mud to provide protection from corrosion. <em>ISO</em> <em>131</em>74:2012 specifies cathodic protection of fixed and floating port and harbour structures. This includes piers, jetties, dolphins (mooring and berthing), sheet or tubular piling, pontoons, buoys, floating docks, lock and sluice gates. It also specifies cathodic protection of the submerged areas of appurtenances, such as chains attached to the structure, when these are not electrically isolated from the structure. <em>ISO</em> <em>131</em>74:2012 is to be used in respect of cathodic protection systems where the anodes are exposed to water or saline mud. For buried areas, typically in soil or sand filled areas behind piled walls or within filled caissons, which may be significantly affected by corrosion, specific cathodic protection design and operation requirements are defined in EN 12954, the anodes being exposed to soils. <em>ISO</em> <em>131</em>74:2012 does not cover the cathodic protection of fixed or floating offshore structures (including offshore loading buoys), submarine pipelines or ships. <em>ISO</em> <em>131</em>74:2012 does not include the internal protection of surfaces of any components such as ballast tanks, internals of floating structures flooded compartments of lock and sluice gates or the internals of tubular steel piles. <em>ISO</em> <em>131</em>74:2012 covers the cathodic protection of structures fabricated principally from bare or coated carbon and carbon manganese steels. As some parts of the structure may be made of metallic materials other than carbon steels, the cathodic protection system should be designed to ensure that there is a complete control over any galvanic coupling and minimize risks due to hydrogen embrittlement or hydrogen-induced cracking (see <em>ISO</em> 12473 ). <em>ISO</em> <em>131</em>74:2012 does not address steel reinforced concrete structures (see EN 12696). <em>ISO</em> <em>131</em>74:2012 is applicable to the whole submerged zone in seawater, brackish waters and saline mud and related buried areas which can normally be found in port, harbour, coastal and flood defence installations wherever these structures are fixed or floating. For surfaces which are alternately immersed and exposed to the atmosphere, the cathodic protection is only effective when the immersion time is long enough for the steel to become polarized. Typically, effective cathodic protection is achieved for all surfaces below mid tide. For structures such as sheet steel and tubular steel piles that are driven into the sea bed or those that are partially buried or covered in mud, <em>ISO</em> <em>131</em>74:2012 is also applicable to the surfaces buried, driven and exposed to mud which are intended to receive cathodic protection along with surfaces immersed in water. Cathodic protection may also be applied to the rear faces of sheet steel piled walls and the internal surfaces of filled caissons. Cathodic protection of such surfaces is specified by EN 12954. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/34/53449","uuid":"85a38b6f-2145-4d36-a368-6fd4a702d636","title":"ISO 13183:2012 Intelligent transport systems — Communications access for land mobiles (CALM) — Using broadcast communications","status":"Published","year":2023,"order":11,"text":"ISO 13183:2012 specifies the architectural communications framework of intelligent transport systems (ITS) for the family of communications access for land mobiles (CALM) related International Standards. The architecture is described in an abstract way with several graphical views and examples. The graphical representations partly follow the ISO open systems interconnection (OSI) principles. In addition to the requirements specified within ISO 13183:2012, a number of notes and examples are provided to illustrate the CALM concept. ","objectID":"53449_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>83:2012 Intelligent transport systems — Communications access for land mobiles (CALM) — Using broadcast communications","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>83:2012 specifies the architectural communications framework of intelligent transport systems (ITS) for the family of communications access for land mobiles (CALM) related International Standards. The architecture is described in an abstract way with several graphical views and examples. The graphical representations partly follow the <em>ISO</em> open systems interconnection (OSI) principles. In addition to the requirements specified within <em>ISO</em> <em>131</em>83:2012, a number of notes and examples are provided to illustrate the CALM concept. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/34/53401","uuid":"23688c3a-3ac3-4a1b-a32b-72f54d1911a4","title":"ISO 13153:2012 Framework of the design process for energy-saving single-family residential and small commercial buildings","status":"Published","year":2023,"order":11,"text":"ISO 13153:2012 specifies a framework of the design process for energy-saving single-family residential and small commercial buildings, with the energy consumption ratio as the key criterion. It is intended to assist in the development of design guidelines for practitioners who design energy-related parts of buildings. ","objectID":"53401_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>53:2012 Framework of the design process for energy-saving single-family residential and small commercial buildings","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>53:2012 specifies a framework of the design process for energy-saving single-family residential and small commercial buildings, with the energy consumption ratio as the key criterion. It is intended to assist in the development of design guidelines for practitioners who design energy-related parts of buildings. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/33/53331","uuid":"853dd7cd-eeb3-492a-a669-496659b21de9","title":"ISO 13138:2012 Air quality — Sampling conventions for airborne particle deposition in the human respiratory system","status":"Published","year":2023,"order":11,"text":"ISO 13138:2012 specifies sampling conventions to define idealized samplers for estimating the deposition of non-volatile, non-hygroscopic, non-fibrous aerosols in five specific loci of the respiratory tract. The five loci consist of the anterior and posterior areas of the nasal passages, the ciliated and non-ciliated parts of the tracheobronchial area, and the alveolar (gas exchange) region. The conventions are separated into three independent sampling efficiencies defined in terms of thermodynamic diameter characterizing the diffusive (Brownian) motion of sub-micrometre particles and four efficiencies in terms of aerodynamic diameter 0,1 μm characterizing deposition by impaction, interception or gravitational settling. Each conventional curve has been developed as an average of 12 deposition curves corresponding to 12 breathing conditions ranging from sitting to heavy exercise, male vs female, and breathing mode (mouth vs nasal breathing). ","objectID":"53331_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>38:2012 Air quality — Sampling conventions for airborne particle deposition in the human respiratory system","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>38:2012 specifies sampling conventions to define idealized samplers for estimating the deposition of non-volatile, non-hygroscopic, non-fibrous aerosols in five specific loci of the respiratory tract. The five loci consist of the anterior and posterior areas of the nasal passages, the ciliated and non-ciliated parts of the tracheobronchial area, and the alveolar (gas exchange) region. The conventions are separated into three independent sampling efficiencies defined in terms of thermodynamic diameter characterizing the diffusive (Brownian) motion of sub-micrometre particles and four efficiencies in terms of aerodynamic diameter 0,1 μm characterizing deposition by impaction, interception or gravitational settling. Each conventional curve has been developed as an average of 12 deposition curves corresponding to 12 breathing conditions ranging from sitting to heavy exercise, male vs female, and breathing mode (mouth vs nasal breathing). ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/30/53051","uuid":"3a1c8fcf-489c-41b6-b5c8-32cfdaff6064","title":"ISO 13130:2011 Laboratory glassware — Desiccators","status":"Published","year":2023,"order":11,"text":"ISO 13130:2011 specifies requirements and tests for desiccators and vacuum desiccators intended for general laboratory purposes such as drying of substances or material. ","objectID":"53051_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>30:2011 Laboratory glassware — Desiccators","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>30:2011 specifies requirements and tests for desiccators and vacuum desiccators intended for general laboratory purposes such as drying of substances or material. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/30/53050","uuid":"2b64a806-4aea-419a-a6a0-7d168bb9abab","title":"ISO 13129:2012 Paints and varnishes — Electrochemical measurement of the protection provided to steel by paint coatings — Current interrupter (CI) technique, relaxation voltammetry (RV) technique and DC transient (DCT) measurements","status":"Published","year":2023,"order":11,"text":"1 Scope This International Standard specifies the procedure for evaluation of the experimental set-up of electrochemical measurements on high-impedance coated samples using methods that are based on the current interrupter (CI) technique, relaxation voltammetry (RV) or DC transient (DCT) measurements. It provides specific definitions and guidance on optimizing the collection of CI, RV and DCT data from highimpedance systems. High impedance in the context of intact coatings refers to systems with an impedance greater than 109 Ω/cm2. This does not preclude measurements on systems with lower impedance. This International Standard deals in particular with: — instrumental set-up: requirements and shortcomings; — data validation: checking the measurement range and the accuracy of the data; — performing CI, RV, DCT measurements: specimen considerations and instrumental parameters; — the experimental results: different methods of presenting CI, RV and DCT data. Following the recommendations should ensure the acquisition of CI, RV and DCT data that can be used to study the performance of the specimen. This International Standard does not give guidelines for the interpretation of the data. ","objectID":"53050_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>29:2012 Paints and varnishes — Electrochemical measurement of the protection provided to steel by paint coatings — Current interrupter (CI) technique, relaxation voltammetry (RV) technique and DC transient (DCT) measurements","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"1 Scope This International Standard specifies the procedure for evaluation of the experimental set-up of electrochemical measurements on high-impedance coated samples using methods that are based on the current interrupter (CI) technique, relaxation voltammetry (RV) or DC transient (DCT) measurements. It provides specific definitions and guidance on optimizing the collection of CI, RV and DCT data from highimpedance systems. High impedance in the context of intact coatings refers to systems with an impedance greater than 109 Ω/cm2. This does not preclude measurements on systems with lower impedance. This International Standard deals in particular with: — instrumental set-up: requirements and shortcomings; — data validation: checking the measurement range and the accuracy of the data; — performing CI, RV, DCT measurements: specimen considerations and instrumental parameters; — the experimental results: different methods of presenting CI, RV and DCT data. Following the recommendations should ensure the acquisition of CI, RV and DCT data that can be used to study the performance of the specimen. This International Standard does not give guidelines for the interpretation of the data. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/30/53009","uuid":"1992e8df-a1d7-4f5c-b4fe-4f8edd997b2e","title":"ISO 13125:2013 Fine ceramics (advanced ceramics, advanced technical ceramics) — Test method for antifungal activity of semiconducting photocatalytic materials","status":"Published","year":2023,"order":11,"text":"ISO 13125:2013 specifies a test method covering the determination of the antifungal activity of materials that contain a photocatalyst or have photocatalytic films on their surface, by counting the number of pre-incubated fungal spores that survive exposure to ultraviolet (UV-A) light. ISO 13125:2013 provides for the assessment of different kinds on materials used in various applications, such as construction materials in flat coating, sheet, board or plate form, etc. Powder, granular, fibrous or porous photocatalytic materials are not included. Values expressed in ISO 13125:2013 are in accordance with the International System of Units (SI). ","objectID":"53009_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>25:2013 Fine ceramics (advanced ceramics, advanced technical ceramics) — Test method for antifungal activity of semiconducting photocatalytic materials","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>25:2013 specifies a test method covering the determination of the antifungal activity of materials that contain a photocatalyst or have photocatalytic films on their surface, by counting the number of pre-incubated fungal spores that survive exposure to ultraviolet (UV-A) light. <em>ISO</em> <em>131</em>25:2013 provides for the assessment of different kinds on materials used in various applications, such as construction materials in flat coating, sheet, board or plate form, etc. Powder, granular, fibrous or porous photocatalytic materials are not included. Values expressed in <em>ISO</em> <em>131</em>25:2013 are in accordance with the International System of Units (SI). ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/28/52898","uuid":"f66616ed-d193-4ee1-abe0-3748824e7ae9","title":"ISO 13110:2012 Cigarettes — Determination of menthol in smoke condensates — Gas-chromatographic method","status":"Published","year":2023,"order":11,"text":"ISO 13110:2012 specifies a method for the gas-chromatographic determination of menthol in the total particulate matter (TPM) of mentholated cigarette smoke condensates. The smoking of cigarettes and the collection of mainstream smoke are carried out in accordance with ISO 4387 with some exceptions. Encapsulated menthol in specific products may lead to specific handling not described in ISO 13110:2012. ","objectID":"52898_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>10:2012 Cigarettes — Determination of menthol in smoke condensates — Gas-chromatographic method","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>10:2012 specifies a method for the gas-chromatographic determination of menthol in the total particulate matter (TPM) of mentholated cigarette smoke condensates. The smoking of cigarettes and the collection of mainstream smoke are carried out in accordance with <em>ISO</em> 4387 with some exceptions. Encapsulated menthol in specific products may lead to specific handling not described in <em>ISO</em> <em>131</em>10:2012. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/28/52821","uuid":"e1c7f414-d969-4266-bcfc-b38741cf8e91","title":"ISO 13102:2012 Geometrical product specifications (GPS) — Dimensional measuring equipment: Electronic digital-indicator gauge — Design and metrological characteristics","status":"Published","year":2023,"order":11,"text":"ISO 13102:2012 specifies the most important design and metrological characteristics of electronic digital-indicator gauges. ","objectID":"52821_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>02:2012 Geometrical product specifications (GPS) — Dimensional measuring equipment: Electronic digital-indicator gauge — Design and metrological characteristics","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>02:2012 specifies the most important design and metrological characteristics of electronic digital-indicator gauges. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/08/20/82006","uuid":"2f77416a-d39b-4954-8632-396427c1f4ee","title":"ISO 13165-2:2022 Water quality — Radium-226 — Part 2: Test method using emanometry","status":"Published","year":2022,"order":11,"text":"This document specifies a test method to determine radium-226 ( 226 Ra) activity concentration in all types of water by emanometry. The test method specified is suitable for the determination of the soluble, suspended and total 226 Ra activity concentration in all types of water with soluble 226 Ra activity concentrations greater than 0,02 Bq l −1 . The decay chains of 238 U and 232 Th are given in Annex A. Figure A.1 shows the 238 U and its decay chain. ","objectID":"82006_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>65-2:2022 Water quality — Radium-226 — Part 2: Test method using emanometry","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"This document specifies a test method to determine radium-226 ( 226 Ra) activity concentration in all types of water by emanometry. The test method specified is suitable for the determination of the soluble, suspended and total 226 Ra activity concentration in all types of water with soluble 226 Ra activity concentrations greater than 0,02 Bq l −1 . The decay chains of 238 U and 232 Th are given in Annex A. Figure A.1 shows the 238 U and its decay chain. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/07/96/79682","uuid":"73245d2e-b81e-4998-a742-d53bf18db5ee","title":"ISO 13137:2022 Workplace atmospheres — Pumps for personal sampling of chemical and biological agents — Requirements and test methods","status":"Published","year":2022,"order":11,"text":"This document specifies performance requirements for battery powered pumps used for personal sampling of chemical and biological agents in workplace air. It also specifies test methods in order to determine the performance characteristics of such pumps under prescribed laboratory conditions. This document is applicable to battery powered pumps having a nominal volumetric flow rate above 10 ml ⋅ min −1 , as used with combinations of sampler and collection substrate for sampling of gases, vapours, dusts, fumes, mists and fibres. This document is primarily intended for flow-controlled pumps. ","objectID":"79682_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>37:2022 Workplace atmospheres — Pumps for personal sampling of chemical and biological agents — Requirements and test methods","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"This document specifies performance requirements for battery powered pumps used for personal sampling of chemical and biological agents in workplace air. It also specifies test methods in order to determine the performance characteristics of such pumps under prescribed laboratory conditions. This document is applicable to battery powered pumps having a nominal volumetric flow rate above 10 ml ⋅ min −1 , as used with combinations of sampler and collection substrate for sampling of gases, vapours, dusts, fumes, mists and fibres. This document is primarily intended for flow-controlled pumps. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/07/88/78863","uuid":"0315c372-3255-4484-822d-adafb14b0abc","title":"ISO 13111-2:2022 Intelligent transport systems (ITS) — The use of personal ITS stations to support ITS service provision for travellers — Part 2: General requirements for data exchange between ITS stations","status":"Published","year":2022,"order":11,"text":"This document defines the data exchange protocol used to implement use cases for applications based on the personal ITS station defined in ISO 13111-1, which provides and maintains ITS services to travellers, including drivers, passengers and pedestrians. The ITS applications supported by this document include multimodal transportation information services and multimodal navigation services that are based on personal ITS stations in various application scenarios defined in ISO 13111-1. The use case implementations described in this document refer to the architecture defined in ISO 21217 and ISO 13184. ","objectID":"78863_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>11-2:2022 Intelligent transport systems (ITS) — The use of personal ITS stations to support ITS service provision for travellers — Part 2: General requirements for data exchange between ITS stations","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"This document defines the data exchange protocol used to implement use cases for applications based on the personal ITS station defined in <em>ISO</em> <em>131</em>11-1, which provides and maintains ITS services to travellers, including drivers, passengers and pedestrians. The ITS applications supported by this document include multimodal transportation information services and multimodal navigation services that are based on personal ITS stations in various application scenarios defined in <em>ISO</em> <em>131</em>11-1. The use case implementations described in this document refer to the architecture defined in <em>ISO</em> 21217 and <em>ISO</em> <em>131</em>84. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/07/88/78802","uuid":"de33f57a-430c-4897-80a3-a9241e4eb4cf","title":"ISO 13165-1:2022 Water quality — Radium-226 — Part 1: Test method using liquid scintillation counting","status":"Published","year":2022,"order":11,"text":"This document specifies the determination of radium-226 ( 226 Ra) activity concentration in non-saline water samples by extraction of its daughter radon-222 ( 222 Rn) and its measurement using liquid scintillation analysis. The test method described in this document, using currently available scintillation counters, has a detection limit of approximately 50 mBq·l −1 . This method is not applicable to the measurement of other radium isotopes. ","objectID":"78802_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>65-1:2022 Water quality — Radium-226 — Part 1: Test method using liquid scintillation counting","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"This document specifies the determination of radium-226 ( 226 Ra) activity concentration in non-saline water samples by extraction of its daughter radon-222 ( 222 Rn) and its measurement using liquid scintillation analysis. The test method described in this document, using currently available scintillation counters, has a detection limit of approximately 50 mBq·l −1 . This method is not applicable to the measurement of other radium isotopes. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/07/83/78392","uuid":"eb7eeff9-b605-4e3b-a2e6-9f3c24b31910","title":"ISO 13119:2022 Health informatics — Clinical knowledge resources — Metadata","status":"Published","year":2022,"order":11,"text":"This document specifies a number of metadata elements that describe resources containing medical knowledge, primarily digital documents provided as web resources, accessible from databases or via file transfer, but can be applicable also to paper documents, e.g. articles in the medical literature. The metadata elements —    support unambiguous and international understanding of important aspects to describe a resource, e.g. purpose, issuer, intended audience, legal status and scientific background, —    are applicable to different kinds of digital resources, e.g. recommendation from consensus of a professional group, regulation by a governmental authority, clinical trial protocol from a pharmaceutical company, scientific manuscript from a research group, advice to patients with a specific disease, review article, —    are possible to present to human readers including health professionals as well as individuals/patients, and —    are potentially usable for automatic processing, e.g. to support search engines to restrict matches to documents of a certain type or quality level. The metadata elements defined in this document are not intended to —    describe documents about a single patient, such as medical records, —    describe details of the medical content of the resource (but some idea of the content can be described via keywords or codes), or —    prescribe criteria for the quality of the resource content. ","objectID":"78392_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>19:2022 Health informatics — Clinical knowledge resources — Metadata","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"This document specifies a number of metadata elements that describe resources containing medical knowledge, primarily digital documents provided as web resources, accessible from databases or via file transfer, but can be applicable also to paper documents, e.g. articles in the medical literature. The metadata elements —    support unambiguous and international understanding of important aspects to describe a resource, e.g. purpose, issuer, intended audience, legal status and scientific background, —    are applicable to different kinds of digital resources, e.g. recommendation from consensus of a professional group, regulation by a governmental authority, clinical trial protocol from a pharmaceutical company, scientific manuscript from a research group, advice to patients with a specific disease, review article, —    are possible to present to human readers including health professionals as well as individuals/patients, and —    are potentially usable for automatic processing, e.g. to support search engines to restrict matches to documents of a certain type or quality level. The metadata elements defined in this document are not intended to —    describe documents about a single patient, such as medical records, —    describe details of the medical content of the resource (but some idea of the content can be described via keywords or codes), or —    prescribe criteria for the quality of the resource content. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/07/83/78354","uuid":"f7bf67f3-bffd-4be9-ba0e-7963afd7347d","title":"ISO 13143-1:2020 Electronic fee collection — Evaluation of on-board and roadside equipment for conformity to ISO 12813 — Part 1: Test suite structure and test purposes","status":"Published","year":2022,"order":11,"text":"This document specifies the test suite structure (TSS) and test purposes (TPs) for evaluating the conformity of on-board equipment (OBE) and roadside equipment (RSE) to ISO 12813. It provides a basis for conformance tests for dedicated short-range communication (DSRC) OBE and RSE to support interoperability between different equipment supplied by different manufacturers. ISO 12813 defines requirements on the compliance check communication (CCC) interface level, but not for the RSE or OBE internal functional behaviour. Consequently, tests regarding OBE and/or RSE functional behaviour remain outside the scope of this document. ","objectID":"78354_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>43-1:2020 Electronic fee collection — Evaluation of on-board and roadside equipment for conformity to <em>ISO</em> 12813 — Part 1: Test suite structure and test purposes","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"This document specifies the test suite structure (TSS) and test purposes (TPs) for evaluating the conformity of on-board equipment (OBE) and roadside equipment (RSE) to <em>ISO</em> 12813. It provides a basis for conformance tests for dedicated short-range communication (DSRC) OBE and RSE to support interoperability between different equipment supplied by different manufacturers. <em>ISO</em> 12813 defines requirements on the compliance check communication (CCC) interface level, but not for the RSE or OBE internal functional behaviour. Consequently, tests regarding OBE and/or RSE functional behaviour remain outside the scope of this document. ","matchLevel":"partial","fullyHighlighted":false,"matchedWords":["iso"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/06/82/68245","uuid":"4ddbf5c4-56a8-4083-be63-d9ee66a4267a","title":"ISO 13140-1:2016 Electronic fee collection — Evaluation of on-board and roadside equipment for conformity to ISO 13141 — Part 1: Test suite structure and test purposes","status":"Published","year":2022,"order":11,"text":"ISO 13140-1:2016 specifies the test suite structure (TSS) and test purposes (TP) to evaluate the conformity of on-board units (OBU) and roadside equipment (RSE) to ISO 13141. It provides a basis for conformance tests for dedicated short-range communication (DSRC) equipment (on-board units and roadside units) to enable interoperability between different equipment supplied by different manufacturers. ","objectID":"68245_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>40-1:2016 Electronic fee collection — Evaluation of on-board and roadside equipment for conformity to <em>ISO</em> <em>131</em>41 — Part 1: Test suite structure and test purposes","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>40-1:2016 specifies the test suite structure (TSS) and test purposes (TP) to evaluate the conformity of on-board units (OBU) and roadside equipment (RSE) to <em>ISO</em> <em>131</em>41. It provides a basis for conformance tests for dedicated short-range communication (DSRC) equipment (on-board units and roadside units) to enable interoperability between different equipment supplied by different manufacturers. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/06/62/66202","uuid":"0196894f-0ec6-4145-87d8-154145a8d27c","title":"ISO 13171:2016 Essential oil of oregano [Origanum vulgare L. subsp. hirtum (Link) letsw]","status":"Published","year":2022,"order":11,"text":"ISO 13171:2016 specifies certain characteristics of the essential oil of oregano [ Origanum vulgare L. subsp. hirtum (Link) letsw], in order to facilitate the assessment of its quality. ","objectID":"66202_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>71:2016 Essential oil of oregano [Origanum vulgare L. subsp. hirtum (Link) letsw]","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>71:2016 specifies certain characteristics of the essential oil of oregano [ Origanum vulgare L. subsp. hirtum (Link) letsw], in order to facilitate the assessment of its quality. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/06/22/62285","uuid":"fb16c5d9-bd0b-420d-808f-561d5c3ac4c0","title":"ISO 13105-2:2014 Building construction machinery and equipment — Machinery for concrete surface floating and finishing — Part 2: Safety requirements and verification","status":"Published","year":2022,"order":11,"text":"ISO 13105-2:2014 specifies safety requirements for machines used for concrete surface floating and finishing. This includes pedestrian-controlled equipment and ride-on equipment. It is not applicable to    internal or external vibrators or ancillary equipment used with internal and external vibrators, for example, air compressors, hydraulic power sources, and voltage transformers, to remote-controlled or hand-held smoothing machines and self-acting (robotic) smoothing machines, or to strike-off type machines commonly known as screeds. It deals with significant hazards, hazardous situations, or hazardous events relevant to machinery for concrete surface floating and finishing (power trowels) when used as intended and under conditions of misuse which are reasonably foreseeable by the manufacturer. It is not applicable to machines which are manufactured before the date of its publication. ","objectID":"62285_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>05-2:2014 Building construction machinery and equipment — Machinery for concrete surface floating and finishing — Part 2: Safety requirements and verification","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>05-2:2014 specifies safety requirements for machines used for concrete surface floating and finishing. This includes pedestrian-controlled equipment and ride-on equipment. It is not applicable to    internal or external vibrators or ancillary equipment used with internal and external vibrators, for example, air compressors, hydraulic power sources, and voltage transformers, to remote-controlled or hand-held smoothing machines and self-acting (robotic) smoothing machines, or to strike-off type machines commonly known as screeds. It deals with significant hazards, hazardous situations, or hazardous events relevant to machinery for concrete surface floating and finishing (power trowels) when used as intended and under conditions of misuse which are reasonably foreseeable by the manufacturer. It is not applicable to machines which are manufactured before the date of its publication. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/06/15/61562","uuid":"4e56bc6f-3347-40d4-8f51-1c332f616222","title":"ISO 13111-1:2017 Intelligent transport systems (ITS) — The use of personal ITS station to support ITS service provision for travellers — Part 1: General information and use case definitions","status":"Published","year":2022,"order":11,"text":"ISO 13111-1:2017 defines the general information and use cases of the applications based on the personal ITS station to provide and maintain ITS services to travellers including drivers, passengers and pedestrians. The ITS applications supported by ISO 13111-1:2017 include multi-modal transportation information service and multimodal navigation service which are based on personal ITS stations in various application scenarios as follows. -      Slow transport information service and navigation service such as pedestrians, bicycles and disabled (wheelchair accessible) navigation, as well as internal traffic navigation inside the local transport area. -      Transfer information service. The considered application environment includes the transfer information service in a transfer node such as the integrated transportation hub, bus stations, car parking lot, an indoor transfer area, etc. -      Multi-modal traffic information service. Types of traffic information include real-time road traffic information, public transport operating information, service information for pedestrians' road network and service information for transfer node such as integrated transportation hub, bus stations, car parking lot, an indoor transfer area, etc. -      Multi-modal navigation service. Includes static and dynamic multi-modal routing and re-routing service, as well as real-time guidance service with voice/image/text/map drawings. -      Communities activities. For example, a team travel when a group of vehicles (or bicycles) track the lead vehicle on the way to the same destination. ","objectID":"61562_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>11-1:2017 Intelligent transport systems (ITS) — The use of personal ITS station to support ITS service provision for travellers — Part 1: General information and use case definitions","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>11-1:2017 defines the general information and use cases of the applications based on the personal ITS station to provide and maintain ITS services to travellers including drivers, passengers and pedestrians. The ITS applications supported by <em>ISO</em> <em>131</em>11-1:2017 include multi-modal transportation information service and multimodal navigation service which are based on personal ITS stations in various application scenarios as follows. -      Slow transport information service and navigation service such as pedestrians, bicycles and disabled (wheelchair accessible) navigation, as well as internal traffic navigation inside the local transport area. -      Transfer information service. The considered application environment includes the transfer information service in a transfer node such as the integrated transportation hub, bus stations, car parking lot, an indoor transfer area, etc. -      Multi-modal traffic information service. Types of traffic information include real-time road traffic information, public transport operating information, service information for pedestrians' road network and service information for transfer node such as integrated transportation hub, bus stations, car parking lot, an indoor transfer area, etc. -      Multi-modal navigation service. Includes static and dynamic multi-modal routing and re-routing service, as well as real-time guidance service with voice/image/text/map drawings. -      Communities activities. For example, a team travel when a group of vehicles (or bicycles) track the lead vehicle on the way to the same destination. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/72/57236","uuid":"8c3c0070-4d66-41e4-a3b1-5f7aef5dc546","title":"ISO 13105-1:2014 Building construction machinery and equipment — Machinery for concrete surface floating and finishing — Part 1: Terms and commercial specifications","status":"Published","year":2022,"order":11,"text":"ISO 13105-1:2014 defines terms and commercial specifications for machines used for concrete surface floating and finishing (also known as power trowels). This includes pedestrian-controlled equipment and ride-on equipment. It does not address strike-off type machines, commonly known as screeds. ","objectID":"57236_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>05-1:2014 Building construction machinery and equipment — Machinery for concrete surface floating and finishing — Part 1: Terms and commercial specifications","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>05-1:2014 defines terms and commercial specifications for machines used for concrete surface floating and finishing (also known as power trowels). This includes pedestrian-controlled equipment and ride-on equipment. It does not address strike-off type machines, commonly known as screeds. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/34/53490","uuid":"3db027ef-7a3e-4757-8fb1-bf0cc68d0d9b","title":"ISO 13196:2013 Soil quality — Screening soils for selected elements by energy-dispersive X-ray fluorescence spectrometry using a handheld or portable instrument","status":"Published","year":2022,"order":11,"text":"ISO 13196:2013 specifies the procedure for screening soils and soil-like materials for selected elements when handheld or portable energy-dispersive XRF spectrometers are used. This quick method is assumed to be applied on-site to obtain qualitative or semiquantitative data that assists decisions on further sampling strategy for assessing soil quality. The higher the efforts for pretreatment used on soil samples, the better the analytical results can be expected. ISO 13196:2013 does not explicitly specify elements for which it is applicable, since the applicability depends on the performance of the apparatus and the objective of the screening. The elements which can be determined are limited by the performance of the instruments used, the concentration of the element present in the soil, and the requirements of the investigation (e.g. guideline value). For Hg, Cd, Co, Mo, V and Sb, a majority of instruments are not sensitive enough to reach sufficiently low limits of quantification (LOQ) to meet the requirements (limit or threshold values) set in the ordinances of different countries. In this case, other methods need to be employed to measure these low concentrations. Usually, wet chemical methods are used, based on aqua regia extracts, in combination with optical or mass spectrometric (MS) methods like atomic absorption spectrometry (AAS), inductively coupled plasma/optical emission spectrometry (ICP/OES) or ICP/MS. ","objectID":"53490_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>96:2013 Soil quality — Screening soils for selected elements by energy-dispersive X-ray fluorescence spectrometry using a handheld or portable instrument","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>96:2013 specifies the procedure for screening soils and soil-like materials for selected elements when handheld or portable energy-dispersive XRF spectrometers are used. This quick method is assumed to be applied on-site to obtain qualitative or semiquantitative data that assists decisions on further sampling strategy for assessing soil quality. The higher the efforts for pretreatment used on soil samples, the better the analytical results can be expected. <em>ISO</em> <em>131</em>96:2013 does not explicitly specify elements for which it is applicable, since the applicability depends on the performance of the apparatus and the objective of the screening. The elements which can be determined are limited by the performance of the instruments used, the concentration of the element present in the soil, and the requirements of the investigation (e.g. guideline value). For Hg, Cd, Co, Mo, V and Sb, a majority of instruments are not sensitive enough to reach sufficiently low limits of quantification (LOQ) to meet the requirements (limit or threshold values) set in the ordinances of different countries. In this case, other methods need to be employed to measure these low concentrations. Usually, wet chemical methods are used, based on aqua regia extracts, in combination with optical or mass spectrometric (MS) methods like atomic absorption spectrometry (AAS), inductively coupled plasma/optical emission spectrometry (ICP/OES) or ICP/MS. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/34/53478","uuid":"dbd4eecc-61f8-42b0-b697-6ae1c93a9209","title":"ISO 13194:2011 Box pallets — Principal requirements and test methods","status":"Published","year":2022,"order":11,"text":"ISO 13194:2011 specifies the definitions, principal requirements and test methods for box pallets of all materials. It applies to box pallets, including post pallets and cage pallets, but is not intended to apply to tank and silo pallets as defined in ISO 445. It also applies to box pallets which can be stacked and handled by forklift trucks or pallet trucks, but excludes other lifting devices. ISO 13194:2011 addresses the performance of the box pallet only, and not its contents. ","objectID":"53478_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>94:2011 Box pallets — Principal requirements and test methods","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>94:2011 specifies the definitions, principal requirements and test methods for box pallets of all materials. It applies to box pallets, including post pallets and cage pallets, but is not intended to apply to tank and silo pallets as defined in <em>ISO</em> 445. It also applies to box pallets which can be stacked and handled by forklift trucks or pallet trucks, but excludes other lifting devices. <em>ISO</em> <em>131</em>94:2011 addresses the performance of the box pallet only, and not its contents. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/30/53006","uuid":"e31de7f3-2687-4b5b-86bb-5076d73f07ef","title":"ISO 13123:2011 Metallic and other inorganic coatings — Test method of cyclic heating for thermal-barrier coatings under temperature gradient","status":"Published","year":2022,"order":11,"text":"ISO 13123:2011 applies to the test method of cyclic heating to evaluate the thermal-barrier performance and cyclic heat resistance of the thermal-barrier coatings provided for high-temperature components, such as burners, rotor and stator blades, etc. of power-generation gas turbines used in thermal power plants, aircraft engines and rocket engines. ","objectID":"53006_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>23:2011 Metallic and other inorganic coatings — Test method of cyclic heating for thermal-barrier coatings under temperature gradient","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>23:2011 applies to the test method of cyclic heating to evaluate the thermal-barrier performance and cyclic heat resistance of the thermal-barrier coatings provided for high-temperature components, such as burners, rotor and stator blades, etc. of power-generation gas turbines used in thermal power plants, aircraft engines and rocket engines. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/07/98/79827","uuid":"99371c81-13e8-4497-9250-6846007eac6d","title":"ISO 13179-1:2021 Implants for surgery — Coatings on metallic surgical implants — Part 1: Plasma-sprayed coatings derived from titanium or titanium-6 aluminum-4 vanadium alloy powders","status":"Published","year":2021,"order":11,"text":"This document specifies general requirements for plasma-sprayed titanium coatings on metallic surgical implants. This document applies to atmospheric plasma spraying and vacuum plasma spraying. This document does not apply to coatings made of other materials than titanium or titanium-6 aluminum-4 vanadium alloy or to coatings realized by another technology than plasma spraying. NOTE       A quality management system can be useful, e.g. as described in ISO 13485. Requirements for the competence of testing laboratories can be found in ISO/IEC 17025. ","objectID":"79827_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>79-1:2021 Implants for surgery — Coatings on metallic surgical implants — Part 1: Plasma-sprayed coatings derived from titanium or titanium-6 aluminum-4 vanadium alloy powders","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"This document specifies general requirements for plasma-sprayed titanium coatings on metallic surgical implants. This document applies to atmospheric plasma spraying and vacuum plasma spraying. This document does not apply to coatings made of other materials than titanium or titanium-6 aluminum-4 vanadium alloy or to coatings realized by another technology than plasma spraying. NOTE       A quality management system can be useful, e.g. as described in <em>ISO</em> 13485. Requirements for the competence of testing laboratories can be found in <em>ISO</em>/IEC 17025. ","matchLevel":"partial","fullyHighlighted":false,"matchedWords":["iso"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/07/88/78845","uuid":"510a7b5e-c13e-4de3-b9ca-16d946658aef","title":"ISO 13163:2021 Water quality — Lead-210 — Test method using liquid scintillation counting","status":"Published","year":2021,"order":11,"text":"This document specifies a method for the measurement of 210 Pb in all types of waters by liquid scintillation counting (LSC). The method is applicable to test samples of supply/drinking water, rainwater, surface and ground water, as well as cooling water, industrial water, domestic, and industrial wastewater after proper sampling and handling, and test sample preparation. Filtration of the test sample is necessary. Lead‑210 activity concentration in the environment can vary and usually ranges from 2 mBq l -1 to 300 mBq l -1 [27][28] . Using currently available liquid scintillation counters, the limit of detection of this method for  210 Pb is generally of the order of 20 mBq l -1 to 50 mBq l -1 , which is lower than the WHO criteria for safe consumption of drinking water (100 mBq l −1 ). [4][6] These values can be achieved with a counting time between 180 min and 720 min for a sample volume from 0,5 l to 1,5 l. Higher activity concentrations can be measured by either diluting the sample or using smaller sample aliquots or both. The method presented in this document is not intended for the determination of an ultra-trace amount of 210 Pb. The range of application depends on the amount of dissolved material in the water and on the performance characteristics of the measurement equipment (background count rate and counting efficiency). The method described in this document is applicable to an emergency situation. The analysis of Pb adsorbed to suspended matter is not covered by this method. It is the user’s responsibility to ensure the validity of this test method for the water samples tested. ","objectID":"78845_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>63:2021 Water quality — Lead-210 — Test method using liquid scintillation counting","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"This document specifies a method for the measurement of 210 Pb in all types of waters by liquid scintillation counting (LSC). The method is applicable to test samples of supply/drinking water, rainwater, surface and ground water, as well as cooling water, industrial water, domestic, and industrial wastewater after proper sampling and handling, and test sample preparation. Filtration of the test sample is necessary. Lead‑210 activity concentration in the environment can vary and usually ranges from 2 mBq l -1 to 300 mBq l -1 [27][28] . Using currently available liquid scintillation counters, the limit of detection of this method for  210 Pb is generally of the order of 20 mBq l -1 to 50 mBq l -1 , which is lower than the WHO criteria for safe consumption of drinking water (100 mBq l −1 ). [4][6] These values can be achieved with a counting time between 180 min and 720 min for a sample volume from 0,5 l to 1,5 l. Higher activity concentrations can be measured by either diluting the sample or using smaller sample aliquots or both. The method presented in this document is not intended for the determination of an ultra-trace amount of 210 Pb. The range of application depends on the amount of dissolved material in the water and on the performance characteristics of the measurement equipment (background count rate and counting efficiency). The method described in this document is applicable to an emergency situation. The analysis of Pb adsorbed to suspended matter is not covered by this method. It is the user’s responsibility to ensure the validity of this test method for the water samples tested. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/07/82/78205","uuid":"ae3c90fe-5265-4474-993c-3ee3a247de31","title":"ISO 13160:2021 Water quality — Strontium 90 and strontium 89 — Test methods using liquid scintillation counting or proportional counting","status":"Published","year":2021,"order":11,"text":"This document specifies conditions for the determination of 90 Sr and 89 Sr activity concentration in samples of environmental water using liquid scintillation counting (LSC) or proportional counting (PC). The method is applicable to test samples of drinking water, rainwater, surface and ground water, marine water, as well as cooling water, industrial water, domestic, and industrial wastewater after proper sampling and handling, and test sample preparation. Filtration of the test sample and a chemical separation are required to separate and purify strontium from a test portion of the sample. The detection limit depends on the sample volume, the instrument used, the sample count time, the background count rate, the detection efficiency and the chemical yield. The method described in this document, using currently available LSC counters, has a detection limit of approximately 10 mBq l −1 and 2 mBq l −1 for 89 Sr and 90 Sr, respectively, which is lower than the WHO criteria for safe consumption of drinking water (100 Bq·l −1 for 89 Sr and 10 Bq·l −1 for 90 Sr) [ 3 ] . These values can be achieved with a counting time of 1 000 min for a sample volume of 2 l. The methods described in this document are applicable in the event of an emergency situation. When fallout occurs following a nuclear accident, the contribution of 89 Sr to the total amount of radioactive strontium is not negligible. This document provides test methods to determine the activity concentration of 90 Sr in presence of 89 Sr. The analysis of 90 Sr and 89 Sr adsorbed to suspended matter is not covered by this method. It is the user’s responsibility to ensure the validity of this test method selected for the water samples tested. ","objectID":"78205_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>60:2021 Water quality — Strontium 90 and strontium 89 — Test methods using liquid scintillation counting or proportional counting","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"This document specifies conditions for the determination of 90 Sr and 89 Sr activity concentration in samples of environmental water using liquid scintillation counting (LSC) or proportional counting (PC). The method is applicable to test samples of drinking water, rainwater, surface and ground water, marine water, as well as cooling water, industrial water, domestic, and industrial wastewater after proper sampling and handling, and test sample preparation. Filtration of the test sample and a chemical separation are required to separate and purify strontium from a test portion of the sample. The detection limit depends on the sample volume, the instrument used, the sample count time, the background count rate, the detection efficiency and the chemical yield. The method described in this document, using currently available LSC counters, has a detection limit of approximately 10 mBq l −1 and 2 mBq l −1 for 89 Sr and 90 Sr, respectively, which is lower than the WHO criteria for safe consumption of drinking water (100 Bq·l −1 for 89 Sr and 10 Bq·l −1 for 90 Sr) [ 3 ] . These values can be achieved with a counting time of 1 000 min for a sample volume of 2 l. The methods described in this document are applicable in the event of an emergency situation. When fallout occurs following a nuclear accident, the contribution of 89 Sr to the total amount of radioactive strontium is not negligible. This document provides test methods to determine the activity concentration of 90 Sr in presence of 89 Sr. The analysis of 90 Sr and 89 Sr adsorbed to suspended matter is not covered by this method. It is the user’s responsibility to ensure the validity of this test method selected for the water samples tested. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/07/59/75962","uuid":"326c48b9-5536-46c3-8feb-4989c4262529","title":"ISO 13131:2021 Health informatics — Telehealth services — Quality planning guidelines","status":"Published","year":2021,"order":11,"text":"This document provides processes that can be used to analyze the risks to the quality and safety of healthcare and continuity of care when telehealth services are used to support healthcare activities. Using risk management processes, quality objectives and procedures are derived which provide guidelines for the operations of telehealth services. These include but are not limited to the following domains: —    management of telehealth quality processes by the healthcare organization; —    strategic and operational process management relating to regulations, knowledge management (best practice) and guidelines; —    healthcare processes relating to people such as healthcare activities, planning, and responsibilities; —    management of financial resources to support telehealth services; —    management of information management and security used in telehealth services; —    processes related to the planning and provision of human resources, infrastructure, facilities and technology resources for use by telehealth services. This document provides a set of example guidelines containing quality objectives and procedures for each domain. Organizations can apply the quality and risk management processes described in Clauses 5 and 6 to develop quality objectives and procedures appropriate to the telehealth services they provide. This document does not provide guidance for the manufacture, assembly, configuration, interoperability or management of devices, products or technical systems. Annex A provides procedures for the implementation of telehealth services by a large organization. Annex B provides use cases for the application of quality planning guidelines in different types of real-world telehealth services. ","objectID":"75962_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>31:2021 Health informatics — Telehealth services — Quality planning guidelines","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"This document provides processes that can be used to analyze the risks to the quality and safety of healthcare and continuity of care when telehealth services are used to support healthcare activities. Using risk management processes, quality objectives and procedures are derived which provide guidelines for the operations of telehealth services. These include but are not limited to the following domains: —    management of telehealth quality processes by the healthcare organization; —    strategic and operational process management relating to regulations, knowledge management (best practice) and guidelines; —    healthcare processes relating to people such as healthcare activities, planning, and responsibilities; —    management of financial resources to support telehealth services; —    management of information management and security used in telehealth services; —    processes related to the planning and provision of human resources, infrastructure, facilities and technology resources for use by telehealth services. This document provides a set of example guidelines containing quality objectives and procedures for each domain. Organizations can apply the quality and risk management processes described in Clauses 5 and 6 to develop quality objectives and procedures appropriate to the telehealth services they provide. This document does not provide guidance for the manufacture, assembly, configuration, interoperability or management of devices, products or technical systems. Annex A provides procedures for the implementation of telehealth services by a large organization. Annex B provides use cases for the application of quality planning guidelines in different types of real-world telehealth services. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/07/58/75857","uuid":"93443c06-9d10-4bf6-a4d1-6adf0748f6a3","title":"ISO 13142:2021 Optics and photonics — Lasers and laser-related equipment — Cavity ring-down method for high-reflectance and high-transmittance measurements","status":"Published","year":2021,"order":11,"text":"This document specifies measurement procedures for the precise determination of the high reflectance or high transmittance (>99 %) of optical laser components. The methods given in this document are intended to be used for the testing and characterization of high reflectance of both concave and plane mirrors or high transmittance of plane windows used in laser systems and laser-based instruments. The reflectance of convex mirrors or transmittance of positive or negative lenses can also be tested by taking into consideration the radius of curvature of the mirror surface or the focal length of the lens. This document is complementary to ISO 15368 which specifies the measurement procedures for the determination of reflectance and transmittance of optical components with spectrophotometry. ISO 15368 is applicable to the measurements of reflectance and transmittance in the range from 0 % to 100 % with a typical accuracy of ±0,3 %, and is therefore not applicable to the precise measurements of reflectance and transmittance higher than 99,9 %. ","objectID":"75857_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>42:2021 Optics and photonics — Lasers and laser-related equipment — Cavity ring-down method for high-reflectance and high-transmittance measurements","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"This document specifies measurement procedures for the precise determination of the high reflectance or high transmittance (>99 %) of optical laser components. The methods given in this document are intended to be used for the testing and characterization of high reflectance of both concave and plane mirrors or high transmittance of plane windows used in laser systems and laser-based instruments. The reflectance of convex mirrors or transmittance of positive or negative lenses can also be tested by taking into consideration the radius of curvature of the mirror surface or the focal length of the lens. This document is complementary to <em>ISO</em> 15368 which specifies the measurement procedures for the determination of reflectance and transmittance of optical components with spectrophotometry. <em>ISO</em> 15368 is applicable to the measurements of reflectance and transmittance in the range from 0 % to 100 % with a typical accuracy of ±0,3 %, and is therefore not applicable to the precise measurements of reflectance and transmittance higher than 99,9 %. ","matchLevel":"partial","fullyHighlighted":false,"matchedWords":["iso"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/07/58/75821","uuid":"074d1378-2b35-4525-ac7a-67df0773280a","title":"ISO 13162:2021 Water quality — Carbon 14 — Test method using liquid scintillation counting","status":"Published","year":2021,"order":11,"text":"This document specifies a method for the measurement of 14 C activity concentration in all types of water samples by liquid scintillation counting (LSC) either directly on the test sample or following a chemical separation. The method is applicable to test samples of supply/drinking water, rainwater, surface and ground water, marine water, as well as cooling water, industrial water, domestic, and industrial wastewater. The detection limit depends on the sample volume, the instrument used, the sample counting time, the background count rate, the detection efficiency and the chemical recovery. The method described in this document, using currently available liquid scintillation counters and suitable technical conditions, has a detection limit as low as 1 Bq∙l −1 , which is lower than the WHO criteria for safe consumption of drinking water (100 Bq·l -1 ). 14 C activity concentrations can be measured up to 10 6  Bq∙l -1 without any sample dilution. It is the user’s responsibility to ensure the validity of this test method for the water samples tested. ","objectID":"75821_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>62:2021 Water quality — Carbon 14 — Test method using liquid scintillation counting","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"This document specifies a method for the measurement of 14 C activity concentration in all types of water samples by liquid scintillation counting (LSC) either directly on the test sample or following a chemical separation. The method is applicable to test samples of supply/drinking water, rainwater, surface and ground water, marine water, as well as cooling water, industrial water, domestic, and industrial wastewater. The detection limit depends on the sample volume, the instrument used, the sample counting time, the background count rate, the detection efficiency and the chemical recovery. The method described in this document, using currently available liquid scintillation counters and suitable technical conditions, has a detection limit as low as 1 Bq∙l −1 , which is lower than the WHO criteria for safe consumption of drinking water (100 Bq·l -1 ). 14 C activity concentrations can be measured up to 10 6  Bq∙l -1 without any sample dilution. It is the user’s responsibility to ensure the validity of this test method for the water samples tested. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/06/41/64166","uuid":"b20f1142-c600-4210-9f31-68a0e2b687c7","title":"ISO 13141:2015 Electronic fee collection — Localisation augmentation communication for autonomous systems","status":"Published","year":2021,"order":11,"text":"ISO 13141:2015 establishes requirements for short-range communication for the purposes of augmenting the localization in autonomous electronic fee collection (EFC) systems. Localization augmentation serves to inform on-board equipment (OBE) about geographical location and the identification of a charge object. This International Standard specifies the provision of location and heading information and security means to protect from the manipulation of the OBE with false roadside equipment (RSE). The localization augmentation communication takes place between an OBE in a vehicle and fixed roadside equipment. This International Standard is applicable to OBE in an autonomous mode of operation. ISO 13141:2015 defines attributes and functions for the purpose of localization augmentation, by making use of the dedicated short-range communications (DSRC) communication services provided by DSRC Layer 7, and makes these LAC attributes and functions available to the LAC applications at the RSE and the OBE. Attributes and functions are defined on the level of Application Data Units (ADUs, see Figure 1). ","objectID":"64166_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>41:2015 Electronic fee collection — Localisation augmentation communication for autonomous systems","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>41:2015 establishes requirements for short-range communication for the purposes of augmenting the localization in autonomous electronic fee collection (EFC) systems. Localization augmentation serves to inform on-board equipment (OBE) about geographical location and the identification of a charge object. This International Standard specifies the provision of location and heading information and security means to protect from the manipulation of the OBE with false roadside equipment (RSE). The localization augmentation communication takes place between an OBE in a vehicle and fixed roadside equipment. This International Standard is applicable to OBE in an autonomous mode of operation. <em>ISO</em> <em>131</em>41:2015 defines attributes and functions for the purpose of localization augmentation, by making use of the dedicated short-range communications (DSRC) communication services provided by DSRC Layer 7, and makes these LAC attributes and functions available to the LAC applications at the RSE and the OBE. Attributes and functions are defined on the level of Application Data Units (ADUs, see Figure 1). ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/06/15/61573","uuid":"60fc1367-ff4e-42d5-a934-653c97571e26","title":"ISO 13184-2:2016 Intelligent transport systems (ITS) — Guidance protocol via personal ITS station for advisory safety systems — Part 2: Road guidance protocol (RGP) requirements and specification","status":"Published","year":2021,"order":11,"text":"ISO 13184-2:2016 specifies the road guidance use cases on the DXM to provide the real-time decision support system to drivers or pedestrians using P-ITS-S. The road guidance protocol (RGP) is an instantiation of the data exchange message (DXM), which represents a generic message to exchange data between ITS stations. The RGP defines an interoperable service protocol between P-ITS-S and R-ITS-S for exchanging data elements. This part of ISO 13184 specifies the following: -      Reference architecture for real-time decision support system. This reference architecture provides a general structure for the real-time decision support system and the method of message exchange between the P-ITS-S and the R-ITS-S. This reference architecture is used to build the interconnections between the P-ITS-S and the R-ITS-S. -      Technique of application protocol design for various use cases on a P-ITS-S. This technique adopts a flexible and extendable protocol design. In many cases, the application protocol for the ITS is designed to provide a set of messages that is dependent on the use cases and the message exchange method. However, it is not easy to enumerate all use cases for some applications. The use cases can be changed or enhanced frequently. For this type of application, the protocol design, depending on the use cases, is not appropriate. This part of ISO 13184 provides a general technique of designing the road guidance application protocol based on the use cases. -      Primitive data element. The primitive data element will be commonly used to configure the safety warning and parking guide service in the form of speed, location and time. -      Use cases at the road and parking spaces for warning and parking guide. This part of ISO 13184 describes the use cases applicable to the communication services between the P-ITS-S and the R-ITS-S for the purposes of providing safety warning and parking guidance. ISO 13184 (all parts) have been aligned according to the requirements specified in ISO 21217, ISO/TS 17419 and ISO/TS 17423. ISO 13184-2:2016 only specifies the RGP messages based on the DXM definition (see Annex B and Annex C) at real-time. The content of the RGP messages are based on the definition of road guidance use cases as documented in ISO 13184?1. This part of ISO 13184 implements ITS-SU objects, which is a general reference to ITS application objects, ITS message sets and other objects which may require globally unique identification and registration. The management of ITS-SU objects is many-fold, e.g. specified in ISO 24102?4, ISO 24102?5, ISO 24102?6, ISO 24102?7, ISO 24102?8 and ISO 24102?9, and in CEN/ISO/TS 17423. This part of ISO 13184 implements authorized and controlled operation of ITS-SU objects, which requires considerations of ITS-SU object identifiers, i.e. ITS-AID, ITS-MsgSetID, ITS-SUID, ITS-SCUID, addresses and protocol identifiers used in the communication protocol stack of an ITS-S, and others. NOTE          The accuracy of the navigation and positioning system as input to the Road Guidance application is important for road guidance but is not part of the ISO 13184 series. Detailed information about crossroads is needed for implementation of Road Guidance applications. ","objectID":"61573_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>84-2:2016 Intelligent transport systems (ITS) — Guidance protocol via personal ITS station for advisory safety systems — Part 2: Road guidance protocol (RGP) requirements and specification","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>84-2:2016 specifies the road guidance use cases on the DXM to provide the real-time decision support system to drivers or pedestrians using P-ITS-S. The road guidance protocol (RGP) is an instantiation of the data exchange message (DXM), which represents a generic message to exchange data between ITS stations. The RGP defines an interoperable service protocol between P-ITS-S and R-ITS-S for exchanging data elements. This part of <em>ISO</em> <em>131</em>84 specifies the following: -      Reference architecture for real-time decision support system. This reference architecture provides a general structure for the real-time decision support system and the method of message exchange between the P-ITS-S and the R-ITS-S. This reference architecture is used to build the interconnections between the P-ITS-S and the R-ITS-S. -      Technique of application protocol design for various use cases on a P-ITS-S. This technique adopts a flexible and extendable protocol design. In many cases, the application protocol for the ITS is designed to provide a set of messages that is dependent on the use cases and the message exchange method. However, it is not easy to enumerate all use cases for some applications. The use cases can be changed or enhanced frequently. For this type of application, the protocol design, depending on the use cases, is not appropriate. This part of <em>ISO</em> <em>131</em>84 provides a general technique of designing the road guidance application protocol based on the use cases. -      Primitive data element. The primitive data element will be commonly used to configure the safety warning and parking guide service in the form of speed, location and time. -      Use cases at the road and parking spaces for warning and parking guide. This part of <em>ISO</em> <em>131</em>84 describes the use cases applicable to the communication services between the P-ITS-S and the R-ITS-S for the purposes of providing safety warning and parking guidance. <em>ISO</em> <em>131</em>84 (all parts) have been aligned according to the requirements specified in <em>ISO</em> 21217, <em>ISO</em>/TS 17419 and <em>ISO</em>/TS 17423. <em>ISO</em> <em>131</em>84-2:2016 only specifies the RGP messages based on the DXM definition (see Annex B and Annex C) at real-time. The content of the RGP messages are based on the definition of road guidance use cases as documented in <em>ISO</em> <em>131</em>84?1. This part of <em>ISO</em> <em>131</em>84 implements ITS-SU objects, which is a general reference to ITS application objects, ITS message sets and other objects which may require globally unique identification and registration. The management of ITS-SU objects is many-fold, e.g. specified in <em>ISO</em> 24102?4, <em>ISO</em> 24102?5, <em>ISO</em> 24102?6, <em>ISO</em> 24102?7, <em>ISO</em> 24102?8 and <em>ISO</em> 24102?9, and in CEN/<em>ISO</em>/TS 17423. This part of <em>ISO</em> <em>131</em>84 implements authorized and controlled operation of ITS-SU objects, which requires considerations of ITS-SU object identifiers, i.e. ITS-AID, ITS-MsgSetID, ITS-SUID, ITS-SCUID, addresses and protocol identifiers used in the communication protocol stack of an ITS-S, and others. NOTE          The accuracy of the navigation and positioning system as input to the Road Guidance application is important for road guidance but is not part of the <em>ISO</em> <em>131</em>84 series. Detailed information about crossroads is needed for implementation of Road Guidance applications. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/06/01/60146","uuid":"c592f24b-eb4e-4663-a010-8c4dde91e285","title":"ISO 13165-3:2016 Water quality — Radium-226 — Part 3: Test method using coprecipitation and gamma-spectrometry","status":"Published","year":2021,"order":11,"text":"ISO 13165-3:2016 specifies the determination of radium-226 (226Ra) activity concentration in all types of water by coprecipitation followed by gamma-spectrometry (see ISO 18589‑3). The method described is suitable for determination of soluble 226Ra activity concentrations greater than 0,02 Bq l−1 using a sample volume of 1 l to 100 l of any water type. For water samples smaller than a volume of 1 l, direct gamma-spectrometry can be performed following ISO 10703 with a higher detection limit. NOTE          This test method also allows other isotopes of radium, 223Ra, 224Ra, and 228Ra, to be determined. ","objectID":"60146_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>65-3:2016 Water quality — Radium-226 — Part 3: Test method using coprecipitation and gamma-spectrometry","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>65-3:2016 specifies the determination of radium-226 (226Ra) activity concentration in all types of water by coprecipitation followed by gamma-spectrometry (see <em>ISO</em> 18589‑3). The method described is suitable for determination of soluble 226Ra activity concentrations greater than 0,02 Bq l−1 using a sample volume of 1 l to 100 l of any water type. For water samples smaller than a volume of 1 l, direct gamma-spectrometry can be performed following <em>ISO</em> 10703 with a higher detection limit. NOTE          This test method also allows other isotopes of radium, 223Ra, 224Ra, and 228Ra, to be determined. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/30/53007","uuid":"d2ccf2bc-59df-417a-a5de-239b4bcd40fe","title":"ISO 13124:2011 Fine ceramics (advanced ceramics, advanced technical ceramics) — Test method for interfacial bond strength of ceramic materials","status":"Published","year":2021,"order":11,"text":"ISO 13124:2011 specifies a test method for determining the interfacial tensile and shear bond strength of ceramic-ceramic, ceramic-metal, and ceramic-glass joining at ambient temperature by compression tests on cross-bonded test pieces. Methods for test-piece preparation, test modes and rates (load rate or displacement rate), data collection and reporting procedures are addressed. ISO 13124:2011 applies primarily to ceramic materials, including monolithic fine ceramics and whisker-, fibre- or particulate-reinforced ceramic composites. This test method can be used for materials research, quality control, and characterization and design data generation purposes. ","objectID":"53007_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>24:2011 Fine ceramics (advanced ceramics, advanced technical ceramics) — Test method for interfacial bond strength of ceramic materials","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>24:2011 specifies a test method for determining the interfacial tensile and shear bond strength of ceramic-ceramic, ceramic-metal, and ceramic-glass joining at ambient temperature by compression tests on cross-bonded test pieces. Methods for test-piece preparation, test modes and rates (load rate or displacement rate), data collection and reporting procedures are addressed. <em>ISO</em> <em>131</em>24:2011 applies primarily to ceramic materials, including monolithic fine ceramics and whisker-, fibre- or particulate-reinforced ceramic composites. This test method can be used for materials research, quality control, and characterization and design data generation purposes. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/08/00/80037","uuid":"325c3138-d96b-4ee1-add2-7122d8ee0642","title":"ISO 13166:2020 Water quality — Uranium isotopes — Test method using alpha-spectrometry","status":"Published","year":2020,"order":11,"text":"This document specifies the conditions for the determination of uranium isotope activity concentration in samples of environmental water (including sea waters) using alpha-spectrometry and 232 U as a yield tracer. A chemical separation is required to separate and purify uranium from a test portion of the sample. ","objectID":"80037_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>66:2020 Water quality — Uranium isotopes — Test method using alpha-spectrometry","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"This document specifies the conditions for the determination of uranium isotope activity concentration in samples of environmental water (including sea waters) using alpha-spectrometry and 232 U as a yield tracer. A chemical separation is required to separate and purify uranium from a test portion of the sample. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/07/47/74776","uuid":"54b0c2c0-6442-4744-82f9-07cb80fb0989","title":"ISO 13161:2020 Water quality — Polonium 210 — Test method using alpha spectrometry","status":"Published","year":2020,"order":11,"text":"This document specifies a method for the measurement of 210 Po in all types of waters by alpha spectrometry. The method is applicable to test samples of supply/drinking water, rainwater, surface and ground water, marine water, as well as cooling water, industrial water, domestic, and industrial wastewater after proper sampling and handling, and test sample preparation. Filtration of the test sample may be required. The detection limit depends on the sample volume, the instrument used, the counting time, the background count rate, the detection efficiency and the chemical yield. The method described in this document, using currently available alpha spectrometry apparatus, has a detection limit of approximately 5 mBq l −1 , which is lower than the WHO criteria for safe consumption of drinking water (100 mBq l −1 ). This value can be achieved with a counting time of 24 h for a sample volume of 500 ml. The method described in this document is also applicable in an emergency situation. The analysis of 210 Po adsorbed to suspended matter in the sample is not covered by this method. If suspended material has to be removed or analysed, filtration using a 0,45 μm filter is recommended. The analysis of the insoluble fraction requires a mineralization step that is not covered by this document [13] . In this case, the measurement is made on the different phases obtained. The final activity is the sum of all the measured activity concentrations. It is the user's responsibility to ensure the validity of this test method for the water samples tested. ","objectID":"74776_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>61:2020 Water quality — Polonium 210 — Test method using alpha spectrometry","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"This document specifies a method for the measurement of 210 Po in all types of waters by alpha spectrometry. The method is applicable to test samples of supply/drinking water, rainwater, surface and ground water, marine water, as well as cooling water, industrial water, domestic, and industrial wastewater after proper sampling and handling, and test sample preparation. Filtration of the test sample may be required. The detection limit depends on the sample volume, the instrument used, the counting time, the background count rate, the detection efficiency and the chemical yield. The method described in this document, using currently available alpha spectrometry apparatus, has a detection limit of approximately 5 mBq l −1 , which is lower than the WHO criteria for safe consumption of drinking water (100 mBq l −1 ). This value can be achieved with a counting time of 24 h for a sample volume of 500 ml. The method described in this document is also applicable in an emergency situation. The analysis of 210 Po adsorbed to suspended matter in the sample is not covered by this method. If suspended material has to be removed or analysed, filtration using a 0,45 μm filter is recommended. The analysis of the insoluble fraction requires a mineralization step that is not covered by this document [13] . In this case, the measurement is made on the different phases obtained. The final activity is the sum of all the measured activity concentrations. It is the user's responsibility to ensure the validity of this test method for the water samples tested. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/07/43/74337","uuid":"b072c40a-7e86-4cda-b853-4a409f33a88b","title":"ISO 13185-4:2020 Intelligent transport systems — Vehicle interface for provisioning and support of ITS Services — Part 4: Unified vehicle interface protocol (UVIP) conformance test specification","status":"Published","year":2020,"order":11,"text":"This document specifies a conformance test for a UVIP server and client system developer assessment of self-conformance of the supplier's UVIP server and client system. The conformance test cases follow the use cases definition of ISO 13185-1 and the requirements stated in ISO 13185-2 and ISO 13185-3. The purpose of this document is to provide information to the UVIP server and client system provider to build and test the UVIP server and client system against the conformance test cases. ","objectID":"74337_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>85-4:2020 Intelligent transport systems — Vehicle interface for provisioning and support of ITS Services — Part 4: Unified vehicle interface protocol (UVIP) conformance test specification","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"This document specifies a conformance test for a UVIP server and client system developer assessment of self-conformance of the supplier's UVIP server and client system. The conformance test cases follow the use cases definition of <em>ISO</em> <em>131</em>85-1 and the requirements stated in <em>ISO</em> <em>131</em>85-2 and <em>ISO</em> <em>131</em>85-3. The purpose of this document is to provide information to the UVIP server and client system provider to build and test the UVIP server and client system against the conformance test cases. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/06/31/63135","uuid":"51a84c66-c06f-4e25-adc8-64cb82fbf2b3","title":"ISO 13116:2014 Dentistry — Test method for determining radio-opacity of materials","status":"Published","year":2020,"order":11,"text":"ISO 13116:2014 specifies test methods for determination of radio-opacity of a test material by reference to a specimen of an aluminium standard. The method is designed to discriminate radio-opacity at a clinically meaningful level and is not designed to take account of factors which may affect precise, inherent values of radio-opacity such as background noise, X-ray beam power, grey scale correction and image enhancement. It is recognized that such factors can change the value of radio-opacity but not the relative ranking compared to standard thicknesses of an internal standard such as aluminium. This test may be performed with conventional or digital sensoring techniques of dental X-ray apparatus. ","objectID":"63135_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>16:2014 Dentistry — Test method for determining radio-opacity of materials","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>16:2014 specifies test methods for determination of radio-opacity of a test material by reference to a specimen of an aluminium standard. The method is designed to discriminate radio-opacity at a clinically meaningful level and is not designed to take account of factors which may affect precise, inherent values of radio-opacity such as background noise, X-ray beam power, grey scale correction and image enhancement. It is recognized that such factors can change the value of radio-opacity but not the relative ranking compared to standard thicknesses of an internal standard such as aluminium. This test may be performed with conventional or digital sensoring techniques of dental X-ray apparatus. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/68/56821","uuid":"932842e4-49c5-419d-a60b-346c53b9a6fb","title":"ISO 13185-2:2015 Intelligent transport systems — Vehicle interface for provisioning and support of ITS services — Part 2: Unified gateway protocol (UGP) requirements and specification for vehicle ITS station gateway (V-ITS-SG) interface","status":"Published","year":2020,"order":11,"text":"ISO 13185-2:2015 specifies the requirements of an ASN.1-based protocol between a vehicle-ITS-Station Gateway (V-ITS-SG) and a nomadic and/or mobile device (ND) to easily exchange vehicle information data. The ASN.1-based protocol has been specified to support a wired or wireless connection between the ND and V-ITS-SG. The Unified Gateway Protocol (UGP) is used between the V-ITS-SG and the ND. UGP supports several features in order to provide ·         authorization (data privacy), ·         secured access, ·         V-ITS-SG and in-vehicle ECUs identification, ·         real-time vehicle data parameters with identifier and type information in ASN.1 format, and ·         enhanced vehicle data parameters with identifier and type information in ASN.1 format. ","objectID":"56821_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>85-2:2015 Intelligent transport systems — Vehicle interface for provisioning and support of ITS services — Part 2: Unified gateway protocol (UGP) requirements and specification for vehicle ITS station gateway (V-ITS-SG) interface","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>85-2:2015 specifies the requirements of an ASN.1-based protocol between a vehicle-ITS-Station Gateway (V-ITS-SG) and a nomadic and/or mobile device (ND) to easily exchange vehicle information data. The ASN.1-based protocol has been specified to support a wired or wireless connection between the ND and V-ITS-SG. The Unified Gateway Protocol (UGP) is used between the V-ITS-SG and the ND. UGP supports several features in order to provide ·         authorization (data privacy), ·         secured access, ·         V-ITS-SG and in-vehicle ECUs identification, ·         real-time vehicle data parameters with identifier and type information in ASN.1 format, and ·         enhanced vehicle data parameters with identifier and type information in ASN.1 format. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/34/53494","uuid":"8cdf82e8-9f2d-42fb-9d13-06da9a7bd955","title":"ISO 13199:2012 Stationary source emissions — Determination of total volatile organic compounds (TVOCs) in waste gases from non-combustion processes — Non-dispersive infrared analyser equipped with catalytic converter","status":"Published","year":2020,"order":11,"text":"ISO 13199:2012 specifies the principle, the essential performance criteria and quality assurance/quality control (QA/QC) procedures of an automatic method for measuring total volatile organic compound (TVOC) content in waste gases of stationary sources, using a non-dispersive infrared absorption (NDIR) analyser equipped with a catalytic converter which oxidizes VOC to carbon dioxide. This method is suitable for the measurement of TVOC emissions from non-combustion processes. This method allows continuous monitoring with permanently installed measuring systems, as well as intermittent measurements of TVOC emissions. The method has been tested on field operation for painting and printing processes, where TVOC concentrations in the waste gases were from about 70 mg/m 3 to 600 mg/m 3 . ","objectID":"53494_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>99:2012 Stationary source emissions — Determination of total volatile organic compounds (TVOCs) in waste gases from non-combustion processes — Non-dispersive infrared analyser equipped with catalytic converter","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>99:2012 specifies the principle, the essential performance criteria and quality assurance/quality control (QA/QC) procedures of an automatic method for measuring total volatile organic compound (TVOC) content in waste gases of stationary sources, using a non-dispersive infrared absorption (NDIR) analyser equipped with a catalytic converter which oxidizes VOC to carbon dioxide. This method is suitable for the measurement of TVOC emissions from non-combustion processes. This method allows continuous monitoring with permanently installed measuring systems, as well as intermittent measurements of TVOC emissions. The method has been tested on field operation for painting and printing processes, where TVOC concentrations in the waste gases were from about 70 mg/m 3 to 600 mg/m 3 . ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/34/53447","uuid":"d1a74eb6-ce3c-4f3a-a581-75af345c323c","title":"ISO 13175-3:2012 Implants for surgery — Calcium phosphates — Part 3: Hydroxyapatite and beta-tricalcium phosphate bone substitutes","status":"Published","year":2020,"order":11,"text":"1 Scope This part of ISO 13175 specifies requirements for monophasic hydroxyapatite bone substitutes, monophasic β-tricalcium phosphate bone substitutes and biphasic hydroxyapatite/β-tricalcium phosphate bone substitutes in the form of blocks or granules. This part of ISO 13175 is not applicable to cell-seeded bone void fillers, calcium phosphate cements or bone void fillers containing materials other than hydroxyapatite and β-tricalcium phosphate. ","objectID":"53447_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>75-3:2012 Implants for surgery — Calcium phosphates — Part 3: Hydroxyapatite and beta-tricalcium phosphate bone substitutes","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"1 Scope This part of <em>ISO</em> <em>131</em>75 specifies requirements for monophasic hydroxyapatite bone substitutes, monophasic β-tricalcium phosphate bone substitutes and biphasic hydroxyapatite/β-tricalcium phosphate bone substitutes in the form of blocks or granules. This part of <em>ISO</em> <em>131</em>75 is not applicable to cell-seeded bone void fillers, calcium phosphate cements or bone void fillers containing materials other than hydroxyapatite and β-tricalcium phosphate. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/34/53409","uuid":"584040f1-f87b-4b86-88b5-a4d84036643e","title":"ISO 13168:2015 Water quality — Simultaneous determination of tritium and carbon 14 activities — Test method using liquid scintillation counting","status":"Published","year":2020,"order":11,"text":"ISO 13168:2015 describes a test method for the simultaneous measurement of tritium and carbon-14 in water samples by liquid scintillation counting of a source obtained by mixing the water sample with a hydrophilic scintillation cocktail. This is considered a screening method because of the potential presence of interfering nuclides in the test sample. The method can be used for any type of environmental study or monitoring. ISO 13168:2015 is applicable to all types of waters having an activity concentration ranging from 5 Bq/l to 10 6 Bq/l (upper limit of the liquid scintillation counters for direct counting). For higher activity concentrations, the sample can be diluted to obtain a test sample within this range. ","objectID":"53409_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>68:2015 Water quality — Simultaneous determination of tritium and carbon 14 activities — Test method using liquid scintillation counting","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>68:2015 describes a test method for the simultaneous measurement of tritium and carbon-14 in water samples by liquid scintillation counting of a source obtained by mixing the water sample with a hydrophilic scintillation cocktail. This is considered a screening method because of the potential presence of interfering nuclides in the test sample. The method can be used for any type of environmental study or monitoring. <em>ISO</em> <em>131</em>68:2015 is applicable to all types of waters having an activity concentration ranging from 5 Bq/l to 10 6 Bq/l (upper limit of the liquid scintillation counters for direct counting). For higher activity concentrations, the sample can be diluted to obtain a test sample within this range. ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/06/93/69318","uuid":"baf429c0-a1f5-499e-90b5-b1bc7a3b1c9a","title":"ISO 13120:2019 Health informatics — Syntax to represent the content of healthcare classification systems — Classification Markup Language (ClaML)","status":"Published","year":2019,"order":11,"text":"The main purpose of ClaML is to formally represent the content and hierarchical structure of healthcare classification systems in a markup language for the safe exchange and distribution of data and structure between organizations and dissimilar software products. The scope of healthcare classification systems covered by this document encompasses terminologies, and is constrained to traditional paper-based systems (like ICD-10) and systems built according to categorial structures and a cross thesaurus (like ICNP)[2]. ClaML is intended for representation of healthcare classification systems in which classes have textual definitions, hierarchical ordering, named hierarchical levels (such as \"chapter\", \"section\"), inclusion and exclusion criteria, and codes. It is not intended to cover any formal representation, neither for definition or composition of concepts, nor for specification of classification rules. Systems with such formal specifications can at best be partially represented using ClaML, and are hence out of scope. Most of the notes and examples in this document relate to ICD. This is because ICD is the most common classification system in the scope of this document. As a highly complex classification system it is an inexhaustible source for examples of nearly any kind. But all these notes and examples represent also other similar classification systems, if applicable, which are usually less complex. An overview of currently known classification systems using ClaML is provided in a separate document which is electronically available (see 7.3). This document is not intended to: a)    provide a normative syntax on how a healthcare classification system is to be constructed; b)    define link types between elements in a healthcare classification system (this is left to the developers of healthcare classification systems); c)    provide a representation for direct viewing or printing. ","objectID":"69318_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>20:2019 Health informatics — Syntax to represent the content of healthcare classification systems — Classification Markup Language (ClaML)","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"The main purpose of ClaML is to formally represent the content and hierarchical structure of healthcare classification systems in a markup language for the safe exchange and distribution of data and structure between organizations and dissimilar software products. The scope of healthcare classification systems covered by this document encompasses terminologies, and is constrained to traditional paper-based systems (like ICD-10) and systems built according to categorial structures and a cross thesaurus (like ICNP)[2]. ClaML is intended for representation of healthcare classification systems in which classes have textual definitions, hierarchical ordering, named hierarchical levels (such as \"chapter\", \"section\"), inclusion and exclusion criteria, and codes. It is not intended to cover any formal representation, neither for definition or composition of concepts, nor for specification of classification rules. Systems with such formal specifications can at best be partially represented using ClaML, and are hence out of scope. Most of the notes and examples in this document relate to ICD. This is because ICD is the most common classification system in the scope of this document. As a highly complex classification system it is an inexhaustible source for examples of nearly any kind. But all these notes and examples represent also other similar classification systems, if applicable, which are usually less complex. An overview of currently known classification systems using ClaML is provided in a separate document which is electronically available (see 7.3). This document is not intended to: a)    provide a normative syntax on how a healthcare classification system is to be constructed; b)    define link types between elements in a healthcare classification system (this is left to the developers of healthcare classification systems); c)    provide a representation for direct viewing or printing. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/61/56109","uuid":"f80efc59-c491-4f1d-a8bc-929dbe9f7b47","title":"ISO 13164-3:2013 Water quality — Radon-222 — Part 3: Test method using emanometry","status":"Published","year":2019,"order":11,"text":"ISO 13164-3:2013 specifies a test method for the determination of radon-222 activity concentration in a sample of water following its transfer from the aqueous phase to the air phase by degassing and its detection. It gives recommendations for rapid measurements performed within less than 1 h. The radon-222 activity concentrations, which can be measured by this test method utilizing currently available instruments, range from 0,1 Bq l −1 to several hundred thousand becquerels per litre for a 100 ml test sample. This test method is used successfully with drinking water samples. The laboratory is responsible for ensuring the validity of this test method for water samples of untested matrices. This test method can be applied on field sites or in the laboratory. Annexes A and B give indications on the necessary counting conditions to meet the required sensitivity for drinking water monitoring ","objectID":"56109_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>64-3:2013 Water quality — Radon-222 — Part 3: Test method using emanometry","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"<em>ISO</em> <em>131</em>64-3:2013 specifies a test method for the determination of radon-222 activity concentration in a sample of water following its transfer from the aqueous phase to the air phase by degassing and its detection. It gives recommendations for rapid measurements performed within less than 1 h. The radon-222 activity concentrations, which can be measured by this test method utilizing currently available instruments, range from 0,1 Bq l −1 to several hundred thousand becquerels per litre for a 100 ml test sample. This test method is used successfully with drinking water samples. The laboratory is responsible for ensuring the validity of this test method for water samples of untested matrices. This test method can be applied on field sites or in the laboratory. Annexes A and B give indications on the necessary counting conditions to meet the required sensitivity for drinking water monitoring ","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/61/56108","uuid":"f7a6a458-87f8-468c-bfc1-37b7f00e00fc","title":"ISO 13164-2:2013 Water quality — Radon-222 — Part 2: Test method using gamma-ray spectrometry","status":"Published","year":2019,"order":11,"text":"ISO 13164-2:2013 specifies a test method for the determination of radon-222 activity concentration in a sample of water following the measurement of its short-lived decay products by direct gamma-spectrometry of the water sample. The radon-222 activity concentrations, which can be measured by this test method utilizing currently available gamma-ray instruments, range from a few becquerels per litre to several hundred thousand becquerels per litre for a 1 l test sample. This test method can be used successfully with drinking water samples. The laboratory is responsible for ensuring the validity of this test method for water samples of untested matrices. An annex gives indications on the necessary counting conditions to meet the required sensitivity for drinking water monitoring. ","objectID":"56108_0","_highlightResult":{"title":{"value":"<em>ISO</em> <em>131</em>64-2:2013 Water quality — Radon-222 — Part 2: Test method using gamma-ray spectrometry","matchLevel":"full","fullyHighlighted":false,"matchedWords":["iso","131"]},"text":{"value":"ISO 13164-2:2013 specifies a test method for the determination of radon-222 activity concentration in a sample of water following the measurement of its short-lived decay products by direct gamma-spectrometry of the water sample. The radon-222 activity concentrations, which can be measured by this test method utilizing currently available gamma-ray instruments, range from a few becquerels per litre to several hundred thousand becquerels per litre for a 1 l test sample. This test method can be used successfully with drinking water samples. The laboratory is responsible for ensuring the validity of this test method for water samples of untested matrices. An annex gives indications on the necessary counting conditions to meet the required sensitivity for drinking water monitoring. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/34/53405","uuid":"e4edf5ff-a154-4b6e-aaff-df4c4abff848","title":"ISO 13164-1:2013 Water quality — Radon-222 — Part 1: General principles","status":"Published","year":2019,"order":11,"text":"ISO 13164-1:2013 gives general guidelines for sampling, packaging, and transporting of all kinds of water samples, for the measurement of the activity concentration of radon-222. The test methods fall into two categories: a) direct measurement of the water sample without any transfer of phase (see ISO 13164‑2); b) indirect measurement involving the transfer of the radon-222 from the aqueous phase to another phase (see ISO 13164‑3). The test methods can be applied either in the laboratory or on site. The laboratory is responsible for ensuring the suitability of the test method for the water samples tested. ","objectID":"53405_0","_highlightResult":{"title":{"value":"ISO 13164-1:2013 Water quality — Radon-222 — Part 1: General principles","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13164-1:2013 gives general guidelines for sampling, packaging, and transporting of all kinds of water samples, for the measurement of the activity concentration of radon-222. The test methods fall into two categories: a) direct measurement of the water sample without any transfer of phase (see ISO 13164‑2); b) indirect measurement involving the transfer of the radon-222 from the aqueous phase to another phase (see ISO 13164‑3). The test methods can be applied either in the laboratory or on site. The laboratory is responsible for ensuring the suitability of the test method for the water samples tested. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/30/53019","uuid":"413ea759-5ba3-4e23-9e3a-469c33237b48","title":"ISO 13127:2012 Packaging — Child resistant packaging — Mechanical test methods for reclosable child resistant packaging systems","status":"Published","year":2019,"order":11,"text":"ISO 13127:2012 specifies test methods for mechanical testing of reclosable child resistant packaging. The data generated by these mechanical test methods are suitable for comparing child resistant characteristics of related reclosable packaging systems. ","objectID":"53019_0","_highlightResult":{"title":{"value":"ISO 13127:2012 Packaging — Child resistant packaging — Mechanical test methods for reclosable child resistant packaging systems","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13127:2012 specifies test methods for mechanical testing of reclosable child resistant packaging. The data generated by these mechanical test methods are suitable for comparing child resistant characteristics of related reclosable packaging systems. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/28/52836","uuid":"b7d61c84-6811-458b-a4a9-c5703e798668","title":"ISO 13106:2014 Plastics — Blow-moulded polypropylene containers for packaging of liquid foodstuffs","status":"Published","year":2019,"order":11,"text":"ISO 13106:2014 provides the requirements for polypropylene resins intended for use in blow-moulded, round containers with capacities up to, and including two litres intended for the packaging of liquids for human consumption. ISO 13106:2014 also provides tolerances on mass, dimensions, methods of sampling, testing, and performance requirements. ","objectID":"52836_0","_highlightResult":{"title":{"value":"ISO 13106:2014 Plastics — Blow-moulded polypropylene containers for packaging of liquid foodstuffs","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13106:2014 provides the requirements for polypropylene resins intended for use in blow-moulded, round containers with capacities up to, and including two litres intended for the packaging of liquids for human consumption. ISO 13106:2014 also provides tolerances on mass, dimensions, methods of sampling, testing, and performance requirements. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/29/52979","uuid":"a4a07a98-ec9c-4bad-b3dc-08f384221267","title":"ISO 13122:2011 Ships and marine technology — Launching appliances for davit-launched liferafts","status":"Published","year":2018,"order":11,"text":"ISO 13122:2011 specifies requirements for the performance, design, construction, operation, safety, inspection, maintenance, and testing and acceptance of launching appliances for davit-launched liferafts installed on a variety of sea-going ships. ","objectID":"52979_0","_highlightResult":{"title":{"value":"ISO 13122:2011 Ships and marine technology — Launching appliances for davit-launched liferafts","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13122:2011 specifies requirements for the performance, design, construction, operation, safety, inspection, maintenance, and testing and acceptance of launching appliances for davit-launched liferafts installed on a variety of sea-going ships. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/07/25/72561","uuid":"28db7e47-806d-4dde-ae32-6c368ee4f1f8","title":"ISO 13105-2:2014/Amd 1:2017 Building construction machinery and equipment — Machinery for concrete surface floating and finishing — Part 2: Safety requirements and verification — Amendment 1","status":"Published","year":2017,"order":11,"objectID":"72561_0","_highlightResult":{"title":{"value":"ISO 13105-2:2014/Amd 1:2017 Building construction machinery and equipment — Machinery for concrete surface floating and finishing — Part 2: Safety requirements and verification — Amendment 1","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/07/00/70034","uuid":"1cef7129-469d-4f11-a9fd-89abeb91742e","title":"ISO 13141:2015/Amd 1:2017 Electronic fee collection — Localisation augmentation communication for autonomous systems — Amendment 1","status":"Published","year":2017,"order":11,"objectID":"70034_0","_highlightResult":{"title":{"value":"ISO 13141:2015/Amd 1:2017 Electronic fee collection — Localisation augmentation communication for autonomous systems — Amendment 1","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/06/30/63091","uuid":"aaca6980-cc37-4c7e-9abc-cfa8cf912099","title":"ISO 13127:2012/Cor 1:2012 Packaging — Child resistant packaging — Mechanical test methods for reclosable child resistant packaging systems — Technical Corrigendum 1","status":"Published","year":2012,"order":11,"objectID":"63091_0","_highlightResult":{"title":{"value":"ISO 13127:2012/Cor 1:2012 Packaging — Child resistant packaging — Mechanical test methods for reclosable child resistant packaging systems — Technical Corrigendum 1","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/07/00/70048","uuid":"3f2fb335-a9c4-4fe7-b94c-dcccc8b93f96","title":"ISO 13140-2:2016 Electronic fee collection — Evaluation of on-board and roadside equipment for conformity to ISO 13141 — Part 2: Abstract test suite","status":"Withdrawn","year":2023,"order":100,"text":"ISO 13140-2:2016 specifies the abstract test suite (ATS) to evaluate the conformity of on-board equipment (OBE) and roadside equipment (RSE) to ISO 13141:2015 in accordance with the test suite structure and test purposes defined in ISO 13140‑1:2016. It provides a basis for conformance tests for dedicated short-range communication (DSRC) equipment (OBE and RSE) to support interoperability between different equipment supplied by different manufacturers. ","objectID":"70048_0","_highlightResult":{"title":{"value":"ISO 13140-2:2016 Electronic fee collection — Evaluation of on-board and roadside equipment for conformity to ISO 13141 — Part 2: Abstract test suite","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13140-2:2016 specifies the abstract test suite (ATS) to evaluate the conformity of on-board equipment (OBE) and roadside equipment (RSE) to ISO 13141:2015 in accordance with the test suite structure and test purposes defined in ISO 13140‑1:2016. It provides a basis for conformance tests for dedicated short-range communication (DSRC) equipment (OBE and RSE) to support interoperability between different equipment supplied by different manufacturers. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/06/82/68247","uuid":"329cf803-25bc-4ac7-a815-94c96144a64f","title":"ISO 13143-2:2016 Electronic fee collection — Evaluation of on-board and roadside equipment for conformity to ISO 12813 — Part 2: Abstract test suite","status":"Withdrawn","year":2023,"order":100,"text":"ISO 13143-2:2016 specifies the abstract test suite (ATS) to evaluate the conformity of on-board equipment (OBE) and roadside equipment (RSE) to ISO 12813 in accordance with the test suite structure and test purposes defined in ISO 13143‑1:2016. It provides a basis for conformance tests for dedicated short-range communication (DSRC) equipment (OBE and RSE) to enable interoperability between equipment supplied by different manufacturers. In order to ascertain that OBE and RSE fulfil essential radio requirements, they are also likely to be subject to additional factory, site and system acceptance testing (e.g. of physical and environmental endurance, quality assurance and control at manufacturing, and charge point integration), which is outside the scope of this document. ","objectID":"68247_0","_highlightResult":{"title":{"value":"ISO 13143-2:2016 Electronic fee collection — Evaluation of on-board and roadside equipment for conformity to ISO 12813 — Part 2: Abstract test suite","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13143-2:2016 specifies the abstract test suite (ATS) to evaluate the conformity of on-board equipment (OBE) and roadside equipment (RSE) to ISO 12813 in accordance with the test suite structure and test purposes defined in ISO 13143‑1:2016. It provides a basis for conformance tests for dedicated short-range communication (DSRC) equipment (OBE and RSE) to enable interoperability between equipment supplied by different manufacturers. In order to ascertain that OBE and RSE fulfil essential radio requirements, they are also likely to be subject to additional factory, site and system acceptance testing (e.g. of physical and environmental endurance, quality assurance and control at manufacturing, and charge point integration), which is outside the scope of this document. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/06/24/62424","uuid":"9415a308-940a-40db-b6b6-5c3a3026c93b","title":"ISO 13164-4:2015 Water quality — Radon-222 — Part 4: Test method using two-phase liquid scintillation counting","status":"Withdrawn","year":2023,"order":100,"text":"ISO 13164-4:2015 describes a test method for the determination of radon-222 ( 222 Rn) activity concentration in non-saline waters by extraction and liquid scintillation counting. The radon-222 activity concentrations, which can be measured by this test method utilizing currently available instruments, are at least above 0,5 Bq l −1 for a 10 ml test sample and a measuring time of 1 h. This test method can be used successfully with drinking water samples and it is the responsibility of the laboratory to ensure the validity of this test method for water samples of untested matrices. Annex A gives indication on the necessary counting conditions to meet the required detection limits for drinking water monitoring. ","objectID":"62424_0","_highlightResult":{"title":{"value":"ISO 13164-4:2015 Water quality — Radon-222 — Part 4: Test method using two-phase liquid scintillation counting","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13164-4:2015 describes a test method for the determination of radon-222 ( 222 Rn) activity concentration in non-saline waters by extraction and liquid scintillation counting. The radon-222 activity concentrations, which can be measured by this test method utilizing currently available instruments, are at least above 0,5 Bq l −1 for a 10 ml test sample and a measuring time of 1 h. This test method can be used successfully with drinking water samples and it is the responsibility of the laboratory to ensure the validity of this test method for water samples of untested matrices. Annex A gives indication on the necessary counting conditions to meet the required detection limits for drinking water monitoring. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/34/53408","uuid":"03b8958c-e09b-447f-b611-1f20286fe0dd","title":"ISO 13167:2015 Water quality — Plutonium, americium, curium and neptunium — Test method using alpha spectrometry","status":"Withdrawn","year":2023,"order":100,"text":"ISO 13167:2015 specifies a test method for measuring actinides ( 238 Pu, 239+240 Pu, 241 Am, 242 Cm, 243+244 Cm and 237 Np) in water samples by alpha spectrometry following a chemical separation. The method can be used for any type of environmental study or monitoring. The volume of the test portion required depends on the assumed activity of the sample and the desired detection limit. The detection limit of the test method is 5 × 10 −3 to 5 × 10 −4 Bq/l for a volume of the test portion of 0,1 l to 5 l with a counting time of two to ten days. ","objectID":"53408_0","_highlightResult":{"title":{"value":"ISO 13167:2015 Water quality — Plutonium, americium, curium and neptunium — Test method using alpha spectrometry","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13167:2015 specifies a test method for measuring actinides ( 238 Pu, 239+240 Pu, 241 Am, 242 Cm, 243+244 Cm and 237 Np) in water samples by alpha spectrometry following a chemical separation. The method can be used for any type of environmental study or monitoring. The volume of the test portion required depends on the assumed activity of the sample and the desired detection limit. The detection limit of the test method is 5 × 10 −3 to 5 × 10 −4 Bq/l for a volume of the test portion of 0,1 l to 5 l with a counting time of two to ten days. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/33/53389","uuid":"cedb7d29-bf9d-428d-a45f-95bad6a91bfb","title":"ISO 13145:2012 Rubber — Determination of viscosity and stress relaxation using a rotorless sealed shear rheometer","status":"Withdrawn","year":2023,"order":100,"text":"ISO 13145:2012 describes a method for the determination of the viscosity and stress relaxation of raw or compounded rubber under specified conditions. The viscosity determination consists of a constant strain, temperature and frequency test in which the elastic and the loss components of the complex shear modulus can be determined. The determination of stress relaxation consists of a constant static strain and temperature test in which the torque decrease can be determined. ","objectID":"53389_0","_highlightResult":{"title":{"value":"ISO 13145:2012 Rubber — Determination of viscosity and stress relaxation using a rotorless sealed shear rheometer","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13145:2012 describes a method for the determination of the viscosity and stress relaxation of raw or compounded rubber under specified conditions. The viscosity determination consists of a constant strain, temperature and frequency test in which the elastic and the loss components of the complex shear modulus can be determined. The determination of stress relaxation consists of a constant static strain and temperature test in which the torque decrease can be determined. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/30/53054","uuid":"67816884-7c51-4e5e-bd6c-6ee1afea5a8d","title":"ISO 13132:2011 Laboratory glassware — Petri dishes","status":"Withdrawn","year":2023,"order":100,"text":"ISO 13132:2011 specifies requirements and tests for glass Petri dishes intended for general laboratory purposes and microbiological work. ","objectID":"53054_0","_highlightResult":{"title":{"value":"ISO 13132:2011 Laboratory glassware — Petri dishes","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13132:2011 specifies requirements and tests for glass Petri dishes intended for general laboratory purposes and microbiological work. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/64/56464","uuid":"dff5a4e1-1633-4bfa-989e-2bc820506189","title":"ISO 13165-1:2013 Water quality — Radium-226 — Part 1: Test method using liquid scintillation counting","status":"Withdrawn","year":2022,"order":100,"text":"ISO 13165-1:2013 specifies the determination of radium-226 ( 226 Ra) activity concentration in non-saline water samples by extraction of its daughter radon-222 ( 222 Rn) and its measurement using liquid scintillation counting. Radium-226 activity concentrations which can be measured by this test method utilizing currently available liquid scintillation counters goes down to 50 mBq l −1 . This method is not applicable to the measurement of other radium isotopes. ","objectID":"56464_0","_highlightResult":{"title":{"value":"ISO 13165-1:2013 Water quality — Radium-226 — Part 1: Test method using liquid scintillation counting","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13165-1:2013 specifies the determination of radium-226 ( 226 Ra) activity concentration in non-saline water samples by extraction of its daughter radon-222 ( 222 Rn) and its measurement using liquid scintillation counting. Radium-226 activity concentrations which can be measured by this test method utilizing currently available liquid scintillation counters goes down to 50 mBq l −1 . This method is not applicable to the measurement of other radium isotopes. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/34/53406","uuid":"d62847dd-98e1-4c66-92c6-7f8c9129e05c","title":"ISO 13165-2:2014 Water quality — Radium-226 — Part 2: Test method using emanometry","status":"Withdrawn","year":2022,"order":100,"text":"ISO 13165-2:2014 specifies the determination of radium-226 ( 226 Ra) activity concentration in all types of water by emanometry. The method specified is suitable for the determination of the soluble, suspended, and total 226 Ra activity concentration in all types of water with soluble 226 Ra activity concentrations greater than 0,02 Bq l −1 . In water containing high activity concentrations of 228 Th, interference from 220 Rn decay products can lead to overestimation of measured levels. ","objectID":"53406_0","_highlightResult":{"title":{"value":"ISO 13165-2:2014 Water quality — Radium-226 — Part 2: Test method using emanometry","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13165-2:2014 specifies the determination of radium-226 ( 226 Ra) activity concentration in all types of water by emanometry. The method specified is suitable for the determination of the soluble, suspended, and total 226 Ra activity concentration in all types of water with soluble 226 Ra activity concentrations greater than 0,02 Bq l −1 . In water containing high activity concentrations of 228 Th, interference from 220 Rn decay products can lead to overestimation of measured levels. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/33/53330","uuid":"b6eb2146-a4b3-44ce-b073-b7549c36e486","title":"ISO 13137:2013 Workplace atmospheres — Pumps for personal sampling of chemical and biological agents — Requirements and test methods","status":"Withdrawn","year":2022,"order":100,"text":"ISO 13137:2013 specifies performance requirements for battery powered pumps used for personal sampling of chemical and biological agents in workplace air. It also specifies test methods in order to determine the performance characteristics of such pumps under prescribed laboratory conditions. ISO 13137:2013 is applicable to battery powered pumps having a nominal volume flow rate above 10 ml ⋅ min −1 , as used with combinations of sampler and collection substrate for sampling of gases, vapours, dusts, fumes, mists and fibres. ISO 13137:2013 is primarily intended for flow-controlled pumps. ","objectID":"53330_0","_highlightResult":{"title":{"value":"ISO 13137:2013 Workplace atmospheres — Pumps for personal sampling of chemical and biological agents — Requirements and test methods","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13137:2013 specifies performance requirements for battery powered pumps used for personal sampling of chemical and biological agents in workplace air. It also specifies test methods in order to determine the performance characteristics of such pumps under prescribed laboratory conditions. ISO 13137:2013 is applicable to battery powered pumps having a nominal volume flow rate above 10 ml ⋅ min −1 , as used with combinations of sampler and collection substrate for sampling of gases, vapours, dusts, fumes, mists and fibres. ISO 13137:2013 is primarily intended for flow-controlled pumps. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/29/52951","uuid":"9efea716-b846-41d5-8d83-142e2de3ca83","title":"ISO 13119:2012 Health informatics — Clinical knowledge resources — Metadata","status":"Withdrawn","year":2022,"order":100,"text":"ISO 13119:2012 specifies a number of metadata elements that describe resources containing medical knowledge. It is primarily applicable to digital documents provided as web resources, accessible from databases or via file transfer, but can be applicable also to paper documents, e.g. articles in medical literature. ","objectID":"52951_0","_highlightResult":{"title":{"value":"ISO 13119:2012 Health informatics — Clinical knowledge resources — Metadata","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13119:2012 specifies a number of metadata elements that describe resources containing medical knowledge. It is primarily applicable to digital documents provided as web resources, accessible from databases or via file transfer, but can be applicable also to paper documents, e.g. articles in medical literature. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/64/56463","uuid":"a9e1af10-b3ab-4d7b-b578-359013d5ba87","title":"ISO 13163:2013 Water quality — Lead-210 — Test method using liquid scintillation counting","status":"Withdrawn","year":2021,"order":100,"text":"ISO 13163 specifies the determination of lead-210 (210Pb) activity concentration in samples of all types of water using liquid scintillation counting (LSC). For raw and drinking water, the sample should be degassed in order to minimize the ingrowth of 210 Pb from radon-222 ( 222 Rn). Using currently available liquid scintillation counters, this test method can measure the 210 Pb activity concentrations in the range of less than 20 mBq⋅l -1 to 50 mBq⋅l -1 . These values can be achieved with a counting time between 180 min and 720 min for a sample volume from 0,5 l to 1,5 l. Higher 210 Pb activity concentrations can be measured by either diluting the sample or using smaller sample aliquots or both. It is the laboratory's responsibility to ensure the suitability of this test method for the water samples tested. ","objectID":"56463_0","_highlightResult":{"title":{"value":"ISO 13163:2013 Water quality — Lead-210 — Test method using liquid scintillation counting","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13163 specifies the determination of lead-210 (210Pb) activity concentration in samples of all types of water using liquid scintillation counting (LSC). For raw and drinking water, the sample should be degassed in order to minimize the ingrowth of 210 Pb from radon-222 ( 222 Rn). Using currently available liquid scintillation counters, this test method can measure the 210 Pb activity concentrations in the range of less than 20 mBq⋅l -1 to 50 mBq⋅l -1 . These values can be achieved with a counting time between 180 min and 720 min for a sample volume from 0,5 l to 1,5 l. Higher 210 Pb activity concentrations can be measured by either diluting the sample or using smaller sample aliquots or both. It is the laboratory's responsibility to ensure the suitability of this test method for the water samples tested. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/34/53448","uuid":"565c8f10-0f4f-4b6b-aa3e-416c0fc976dd","title":"ISO 13179-1:2014 Implants for surgery — Plasma-sprayed unalloyed titanium coatings on metallic surgical implants — Part 1: General requirements","status":"Withdrawn","year":2021,"order":100,"text":"ISO 13179-1:2014 specifies general requirements for plasma-sprayed unalloyed titanium coatings on metallic surgical implants. It applies to plasma spraying in air and in vacuum. ISO 13179-1:2014 does not apply to coatings made of other materials than unalloyed titanium or coatings realized by another technology than plasma spraying. ","objectID":"53448_0","_highlightResult":{"title":{"value":"ISO 13179-1:2014 Implants for surgery — Plasma-sprayed unalloyed titanium coatings on metallic surgical implants — Part 1: General requirements","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13179-1:2014 specifies general requirements for plasma-sprayed unalloyed titanium coatings on metallic surgical implants. It applies to plasma spraying in air and in vacuum. ISO 13179-1:2014 does not apply to coatings made of other materials than unalloyed titanium or coatings realized by another technology than plasma spraying. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/34/53403","uuid":"80895e83-d3cd-4475-9c3a-08fc6982b656","title":"ISO 13162:2011 Water quality — Determination of carbon 14 activity — Liquid scintillation counting method","status":"Withdrawn","year":2021,"order":100,"text":"ISO 13162:2011 specifies the conditions for the determination of 14 C activity concentration in samples of environmental water or of 14 C-containing water using liquid scintillation counting. The method is applicable to the analysis of any organic molecule soluble in water that is well mixed with the scintillation cocktail. It does not apply to micelles or \"large\" particles (lipids, fulvic acid, humic acid, etc.) that are inadequately mixed with the scintillation cocktail and the water. Some beta energy is lost without any excitation of the scintillation cocktail and the results are underestimated. The method is not applicable to the analysis of organically bound 14 C, whose determination requires additional chemical processing (such as chemical oxidation, combustion). It is possible to determine 14 C activity concentrations below 10 6 Bq l - 1 without any sample dilution. ","objectID":"53403_0","_highlightResult":{"title":{"value":"ISO 13162:2011 Water quality — Determination of carbon 14 activity — Liquid scintillation counting method","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13162:2011 specifies the conditions for the determination of 14 C activity concentration in samples of environmental water or of 14 C-containing water using liquid scintillation counting. The method is applicable to the analysis of any organic molecule soluble in water that is well mixed with the scintillation cocktail. It does not apply to micelles or \"large\" particles (lipids, fulvic acid, humic acid, etc.) that are inadequately mixed with the scintillation cocktail and the water. Some beta energy is lost without any excitation of the scintillation cocktail and the results are underestimated. The method is not applicable to the analysis of organically bound 14 C, whose determination requires additional chemical processing (such as chemical oxidation, combustion). It is possible to determine 14 C activity concentrations below 10 6 Bq l - 1 without any sample dilution. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/33/53362","uuid":"18eb1f82-4da8-40c2-9ce1-7f41f848b9cf","title":"ISO 13142:2015 Electro-optical systems — Cavity ring-down technique for high-reflectance measurement","status":"Withdrawn","year":2021,"order":100,"text":"ISO 13142:2015 specifies measurement procedures for the precise determination of the high reflectance of optical laser components. Up to now, the ISO standardized testing methods for reflectance of optical laser components have the accuracy limit of approximately 0,01 % (for measurement of absolute reflectance) which are not appropriate for measuring the reflectance higher than 99,99 % or, in some cases, measurement accuracy better than 0,01 % is required. The range of application of this standardized test method is reflectance 99 % and higher (theoretically up to 100 %). The methods given in ISO 13142:2015 are intended to be used for the testing and characterization of high reflectance of both concave and plane mirrors used in laser systems and laser-based instruments. The reflectance of convex mirrors can also be tested by taking into consideration the radius of curvature of the mirror surface. ","objectID":"53362_0","_highlightResult":{"title":{"value":"ISO 13142:2015 Electro-optical systems — Cavity ring-down technique for high-reflectance measurement","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13142:2015 specifies measurement procedures for the precise determination of the high reflectance of optical laser components. Up to now, the ISO standardized testing methods for reflectance of optical laser components have the accuracy limit of approximately 0,01 % (for measurement of absolute reflectance) which are not appropriate for measuring the reflectance higher than 99,99 % or, in some cases, measurement accuracy better than 0,01 % is required. The range of application of this standardized test method is reflectance 99 % and higher (theoretically up to 100 %). The methods given in ISO 13142:2015 are intended to be used for the testing and characterization of high reflectance of both concave and plane mirrors used in laser systems and laser-based instruments. The reflectance of convex mirrors can also be tested by taking into consideration the radius of curvature of the mirror surface. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/33/53332","uuid":"9af4d06c-519b-4957-b119-ea9f1e380f68","title":"ISO 13160:2012 Water quality — Strontium 90 and strontium 89 — Test methods using liquid scintillation counting or proportional counting","status":"Withdrawn","year":2021,"order":100,"text":"ISO 13160:2012 specifies the test methods and their associated principles for the measurement of the activity of 90 Sr in equilibrium with 90 Y, and 89 Sr, pure beta-emitting radionuclides, in water samples. Different chemical separation methods are presented to produce strontium and yttrium sources, the activity of which is determined using a proportional counter (PC) or liquid scintillation counter (LSC). The selection of the test method depends on the origin of the contamination, the characteristics of the water to be analysed, the required accuracy of test results and the available resources of the laboratories. These test methods are used for water monitoring following, past or present, accidental or routine, liquid or gaseous discharges. It also covers the monitoring of contamination caused by global fallout. When fallout occurs immediately following a nuclear accident, the contribution of 89 Sr to the total amount of strontium activity is not negligible. ISO 13160:2012 provides the test methods to determine the activity concentration of 90 Sr in presence of 89 Sr. ","objectID":"53332_0","_highlightResult":{"title":{"value":"ISO 13160:2012 Water quality — Strontium 90 and strontium 89 — Test methods using liquid scintillation counting or proportional counting","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13160:2012 specifies the test methods and their associated principles for the measurement of the activity of 90 Sr in equilibrium with 90 Y, and 89 Sr, pure beta-emitting radionuclides, in water samples. Different chemical separation methods are presented to produce strontium and yttrium sources, the activity of which is determined using a proportional counter (PC) or liquid scintillation counter (LSC). The selection of the test method depends on the origin of the contamination, the characteristics of the water to be analysed, the required accuracy of test results and the available resources of the laboratories. These test methods are used for water monitoring following, past or present, accidental or routine, liquid or gaseous discharges. It also covers the monitoring of contamination caused by global fallout. When fallout occurs immediately following a nuclear accident, the contribution of 89 Sr to the total amount of strontium activity is not negligible. ISO 13160:2012 provides the test methods to determine the activity concentration of 90 Sr in presence of 89 Sr. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/06/82/68246","uuid":"0a1f4990-4824-4747-a9e4-1e8ddb18911a","title":"ISO 13143-1:2016 Electronic fee collection — Evaluation of on-board and roadside equipment for conformity to ISO 12813 — Part 1: Test suite structure and test purposes","status":"Withdrawn","year":2020,"order":100,"text":"ISO 18143-1:2016 specifies the test suite structure (TSS) and test purposes (TP) to evaluate the conformity of on-board units (OBU) and roadside equipment (RSE) to ISO 12813:2015. It provides a basis for conformance tests for dedicated short-range communication (DSRC) equipment (on-board units and roadside units) to enable interoperability between different equipment supplied by different manufacturers. ","objectID":"68246_0","_highlightResult":{"title":{"value":"ISO 13143-1:2016 Electronic fee collection — Evaluation of on-board and roadside equipment for conformity to ISO 12813 — Part 1: Test suite structure and test purposes","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 18143-1:2016 specifies the test suite structure (TSS) and test purposes (TP) to evaluate the conformity of on-board units (OBU) and roadside equipment (RSE) to ISO 12813:2015. It provides a basis for conformance tests for dedicated short-range communication (DSRC) equipment (on-board units and roadside units) to enable interoperability between different equipment supplied by different manufacturers. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/92/59209","uuid":"82a5f5ce-9600-4c93-843e-e6b9f16fb72c","title":"ISO 13166:2014 Water quality — Uranium isotopes — Test method using alpha-spectrometry","status":"Withdrawn","year":2020,"order":100,"text":"ISO 13166:2014 specifies the conditions for the determination of uranium isotope activity concentration in samples of environmental water (including sea waters) using alpha-spectrometry and 232 U as a yield tracer. A chemical separation is required to separate and purify uranium from a test portion of the sample. Plutonium isotopes can interfere, if present, with detectable activities in the sample. The detection limit for measurement of a test portion of about 500 ml is approximately 5 mBq · l −1 with a counting time of about 200 000 s. ","objectID":"59209_0","_highlightResult":{"title":{"value":"ISO 13166:2014 Water quality — Uranium isotopes — Test method using alpha-spectrometry","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13166:2014 specifies the conditions for the determination of uranium isotope activity concentration in samples of environmental water (including sea waters) using alpha-spectrometry and 232 U as a yield tracer. A chemical separation is required to separate and purify uranium from a test portion of the sample. Plutonium isotopes can interfere, if present, with detectable activities in the sample. The detection limit for measurement of a test portion of about 500 ml is approximately 5 mBq · l −1 with a counting time of about 200 000 s. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/34/53402","uuid":"6b6fc7c5-74aa-4690-a26c-d624c37194cf","title":"ISO 13161:2011 Water quality — Measurement of polonium 210 activity concentration in water by alpha spectrometry","status":"Withdrawn","year":2020,"order":100,"text":"ISO 13161:2011 specifies the measurement of 210 Po activity concentration by alpha spectrometry in all kinds of natural waters. The detection limit of this method depends on the volume of the sample, the counting time, the background count rate and the detection efficiency. In the case of drinking water, the analysis is usually carried out on the raw sample, without filtration or other pretreatment. If suspended material has to be removed or analysed, filtration at 0,45 µm is recommended. The analysis of the insoluble fraction requires a mineralization step that is not covered by ISO 13161:2011. In this case, the measurement is made on the different phases obtained. The final activity is the sum of all the measured activity concentrations. ","objectID":"53402_0","_highlightResult":{"title":{"value":"ISO 13161:2011 Water quality — Measurement of polonium 210 activity concentration in water by alpha spectrometry","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13161:2011 specifies the measurement of 210 Po activity concentration by alpha spectrometry in all kinds of natural waters. The detection limit of this method depends on the volume of the sample, the counting time, the background count rate and the detection efficiency. In the case of drinking water, the analysis is usually carried out on the raw sample, without filtration or other pretreatment. If suspended material has to be removed or analysed, filtration at 0,45 µm is recommended. The analysis of the insoluble fraction requires a mineralization step that is not covered by ISO 13161:2011. In this case, the measurement is made on the different phases obtained. The final activity is the sum of all the measured activity concentrations. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/29/52952","uuid":"0d7c56c6-b497-4cf4-8634-bf58fc47d447","title":"ISO 13120:2013 Health informatics — Syntax to represent the content of healthcare classification systems — Classification Markup Language (ClaML)","status":"Withdrawn","year":2019,"order":100,"text":"The main purpose of ISO 13120:2013 is to formally represent the content and hierarchical structure of healthcare classification systems in a markup language for the safe exchange and distribution of data and structure between organizations and dissimilar software products. The scope of healthcare classifications systems covered in ISO 13120:2013 encompasses terminologies, and is constrained to traditional paper-based systems (like ICD-10) and systems built according to categorial structures and a cross thesaurus (like ICNP). ISO 13120:2013 is intended for representation of healthcare classification systems in which classes have textual definitions, hierarchical ordering, named hierarchical levels (such as \"chapter\", \"section\"), inclusion- and exclusion criteria, and codes. It is not intended to cover any formal representation, either for definition or composition, of concepts, or for specification of classification rules. Systems with such formal specifications can at best be partially represented using ISO 13120:2013, and are hence out of scope. ISO 13120:2013 is not intended to: provide a normative syntax on how a healthcare classification system is to be constructed; define link types between elements in a healthcare classification system; this is left to the developers of healthcare classification systems; provide a representation for direct viewing or printing. ","objectID":"52952_0","_highlightResult":{"title":{"value":"ISO 13120:2013 Health informatics — Syntax to represent the content of healthcare classification systems — Classification Markup Language (ClaML)","matchLevel":"none","matchedWords":[]},"text":{"value":"The main purpose of ISO 13120:2013 is to formally represent the content and hierarchical structure of healthcare classification systems in a markup language for the safe exchange and distribution of data and structure between organizations and dissimilar software products. The scope of healthcare classifications systems covered in ISO 13120:2013 encompasses terminologies, and is constrained to traditional paper-based systems (like ICD-10) and systems built according to categorial structures and a cross thesaurus (like ICNP). ISO 13120:2013 is intended for representation of healthcare classification systems in which classes have textual definitions, hierarchical ordering, named hierarchical levels (such as \"chapter\", \"section\"), inclusion- and exclusion criteria, and codes. It is not intended to cover any formal representation, either for definition or composition, of concepts, or for specification of classification rules. Systems with such formal specifications can at best be partially represented using ISO 13120:2013, and are hence out of scope. ISO 13120:2013 is not intended to: provide a normative syntax on how a healthcare classification system is to be constructed; define link types between elements in a healthcare classification system; this is left to the developers of healthcare classification systems; provide a representation for direct viewing or printing. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/00/58/5891","uuid":"26ff7451-6dd9-48b6-b1d0-2892e0ade743","title":"ISO 1310:1974 Carbon black for use in the rubber industry — Sampling packaged shipments","status":"Withdrawn","year":1989,"order":100,"objectID":"5891_0","_highlightResult":{"title":{"value":"ISO 1310:1974 Carbon black for use in the rubber industry — Sampling packaged shipments","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/08/58/85888","uuid":"90ab58bd-9bad-46b1-be46-e7735a6a2573","title":"ISO/CD 13196 Soil quality — Screening soils for selected elements by energy-dispersive X-ray fluorescence spectrometry using a handheld or portable instrument","status":"Under development","year":2023,"order":12,"text":"ISO 13196:2013 specifies the procedure for screening soils and soil-like materials for selected elements when handheld or portable energy-dispersive XRF spectrometers are used. This quick method is assumed to be applied on-site to obtain qualitative or semiquantitative data that assists decisions on further sampling strategy for assessing soil quality. The higher the efforts for pretreatment used on soil samples, the better the analytical results can be expected. ISO 13196:2013 does not explicitly specify elements for which it is applicable, since the applicability depends on the performance of the apparatus and the objective of the screening. The elements which can be determined are limited by the performance of the instruments used, the concentration of the element present in the soil, and the requirements of the investigation (e.g. guideline value). For Hg, Cd, Co, Mo, V and Sb, a majority of instruments are not sensitive enough to reach sufficiently low limits of quantification (LOQ) to meet the requirements (limit or threshold values) set in the ordinances of different countries. In this case, other methods need to be employed to measure these low concentrations. Usually, wet chemical methods are used, based on aqua regia extracts, in combination with optical or mass spectrometric (MS) methods like atomic absorption spectrometry (AAS), inductively coupled plasma/optical emission spectrometry (ICP/OES) or ICP/MS. ","objectID":"85888_0","_highlightResult":{"title":{"value":"ISO/CD 13196 Soil quality — Screening soils for selected elements by energy-dispersive X-ray fluorescence spectrometry using a handheld or portable instrument","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13196:2013 specifies the procedure for screening soils and soil-like materials for selected elements when handheld or portable energy-dispersive XRF spectrometers are used. This quick method is assumed to be applied on-site to obtain qualitative or semiquantitative data that assists decisions on further sampling strategy for assessing soil quality. The higher the efforts for pretreatment used on soil samples, the better the analytical results can be expected. ISO 13196:2013 does not explicitly specify elements for which it is applicable, since the applicability depends on the performance of the apparatus and the objective of the screening. The elements which can be determined are limited by the performance of the instruments used, the concentration of the element present in the soil, and the requirements of the investigation (e.g. guideline value). For Hg, Cd, Co, Mo, V and Sb, a majority of instruments are not sensitive enough to reach sufficiently low limits of quantification (LOQ) to meet the requirements (limit or threshold values) set in the ordinances of different countries. In this case, other methods need to be employed to measure these low concentrations. Usually, wet chemical methods are used, based on aqua regia extracts, in combination with optical or mass spectrometric (MS) methods like atomic absorption spectrometry (AAS), inductively coupled plasma/optical emission spectrometry (ICP/OES) or ICP/MS. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/08/49/84915","uuid":"07c0b28e-4735-4c9c-91e9-b6434a1b9bf0","title":"ISO/FDIS 13105-2 Building construction machinery and equipment — Machinery for concrete surface floating and finishing — Part 2: Safety requirements and verification","status":"Under development","year":2023,"order":12,"text":"ISO 13105-2:2014 specifies safety requirements for machines used for concrete surface floating and finishing. This includes pedestrian-controlled equipment and ride-on equipment. It is not applicable to internal or external vibrators or ancillary equipment used with internal and external vibrators, for example, air compressors, hydraulic power sources, and voltage transformers, to remote-controlled or hand-held smoothing machines and self-acting (robotic) smoothing machines, or to strike-off type machines commonly known as screeds. It deals with significant hazards, hazardous situations, or hazardous events relevant to machinery for concrete surface floating and finishing (power trowels) when used as intended and under conditions of misuse which are reasonably foreseeable by the manufacturer. It is not applicable to machines which are manufactured before the date of its publication. ","objectID":"84915_0","_highlightResult":{"title":{"value":"ISO/FDIS 13105-2 Building construction machinery and equipment — Machinery for concrete surface floating and finishing — Part 2: Safety requirements and verification","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13105-2:2014 specifies safety requirements for machines used for concrete surface floating and finishing. This includes pedestrian-controlled equipment and ride-on equipment. It is not applicable to internal or external vibrators or ancillary equipment used with internal and external vibrators, for example, air compressors, hydraulic power sources, and voltage transformers, to remote-controlled or hand-held smoothing machines and self-acting (robotic) smoothing machines, or to strike-off type machines commonly known as screeds. It deals with significant hazards, hazardous situations, or hazardous events relevant to machinery for concrete surface floating and finishing (power trowels) when used as intended and under conditions of misuse which are reasonably foreseeable by the manufacturer. It is not applicable to machines which are manufactured before the date of its publication. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/08/49/84914","uuid":"a0c4fb25-c1f9-4bf2-b081-b3501e5b48e8","title":"ISO/FDIS 13105-1 Building construction machinery and equipment — Machinery for concrete surface floating and finishing — Part 1: Commercial specifications","status":"Under development","year":2023,"order":12,"text":"ISO 13105-1:2014 defines terms and commercial specifications for machines used for concrete surface floating and finishing (also known as power trowels). This includes pedestrian-controlled equipment and ride-on equipment. It does not address strike-off type machines, commonly known as screeds. ","objectID":"84914_0","_highlightResult":{"title":{"value":"ISO/FDIS 13105-1 Building construction machinery and equipment — Machinery for concrete surface floating and finishing — Part 1: Commercial specifications","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13105-1:2014 defines terms and commercial specifications for machines used for concrete surface floating and finishing (also known as power trowels). This includes pedestrian-controlled equipment and ride-on equipment. It does not address strike-off type machines, commonly known as screeds. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/08/42/84238","uuid":"8c745cab-21d0-42e1-a898-70affb5056aa","title":"ISO/DIS 13165-3 Water quality — Radium-226 — Part 3: Test method using coprecipitation and gamma-spectrometry","status":"Under development","year":2023,"order":12,"text":"ISO 13165-3:2016 specifies the determination of radium-226 (226Ra) activity concentration in all types of water by coprecipitation followed by gamma-spectrometry (see ISO 18589‑3). The method described is suitable for determination of soluble 226Ra activity concentrations greater than 0,02 Bq l−1 using a sample volume of 1 l to 100 l of any water type. For water samples smaller than a volume of 1 l, direct gamma-spectrometry can be performed following ISO 10703 with a higher detection limit. NOTE          This test method also allows other isotopes of radium, 223Ra, 224Ra, and 228Ra, to be determined. ","objectID":"84238_0","_highlightResult":{"title":{"value":"ISO/DIS 13165-3 Water quality — Radium-226 — Part 3: Test method using coprecipitation and gamma-spectrometry","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13165-3:2016 specifies the determination of radium-226 (226Ra) activity concentration in all types of water by coprecipitation followed by gamma-spectrometry (see ISO 18589‑3). The method described is suitable for determination of soluble 226Ra activity concentrations greater than 0,02 Bq l−1 using a sample volume of 1 l to 100 l of any water type. For water samples smaller than a volume of 1 l, direct gamma-spectrometry can be performed following ISO 10703 with a higher detection limit. NOTE          This test method also allows other isotopes of radium, 223Ra, 224Ra, and 228Ra, to be determined. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/08/29/82930","uuid":"a2486664-458a-4955-87bd-f581db787e4f","title":"ISO/DIS 13141 Electronic fee collection — Localisation augmentation communication for autonomous systems","status":"Under development","year":2023,"order":12,"text":"ISO 13141:2015 establishes requirements for short-range communication for the purposes of augmenting the localization in autonomous electronic fee collection (EFC) systems. Localization augmentation serves to inform on-board equipment (OBE) about geographical location and the identification of a charge object. This International Standard specifies the provision of location and heading information and security means to protect from the manipulation of the OBE with false roadside equipment (RSE). The localization augmentation communication takes place between an OBE in a vehicle and fixed roadside equipment. This International Standard is applicable to OBE in an autonomous mode of operation. ISO 13141:2015 defines attributes and functions for the purpose of localization augmentation, by making use of the dedicated short-range communications (DSRC) communication services provided by DSRC Layer 7, and makes these LAC attributes and functions available to the LAC applications at the RSE and the OBE. Attributes and functions are defined on the level of Application Data Units (ADUs, see Figure 1). ","objectID":"82930_0","_highlightResult":{"title":{"value":"ISO/DIS 13141 Electronic fee collection — Localisation augmentation communication for autonomous systems","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 13141:2015 establishes requirements for short-range communication for the purposes of augmenting the localization in autonomous electronic fee collection (EFC) systems. Localization augmentation serves to inform on-board equipment (OBE) about geographical location and the identification of a charge object. This International Standard specifies the provision of location and heading information and security means to protect from the manipulation of the OBE with false roadside equipment (RSE). The localization augmentation communication takes place between an OBE in a vehicle and fixed roadside equipment. This International Standard is applicable to OBE in an autonomous mode of operation. ISO 13141:2015 defines attributes and functions for the purpose of localization augmentation, by making use of the dedicated short-range communications (DSRC) communication services provided by DSRC Layer 7, and makes these LAC attributes and functions available to the LAC applications at the RSE and the OBE. Attributes and functions are defined on the level of Application Data Units (ADUs, see Figure 1). ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/06/94/69404","uuid":"6de82ef3-6448-4c8a-ba90-1c33317d5b1d","title":"ISO 20899:2018 Water quality — Plutonium and neptunium — Test method using ICP-MS","status":"Published","year":2023,"order":11,"text":"This document specifies methods used to determine the concentration of plutonium and neptunium isotopes in water by inductively coupled plasma mass spectrometry (ICP-MS) (239Pu, 240Pu, 241Pu and 237Np). The concentrations obtained can be converted into activity concentrations of the different isotopes[9]. Due to its relatively short half-life and 238U isobaric interference, 238Pu can hardly be measured by this method. To quantify this isotope, other techniques can be used (ICP-MS with collision-reaction cell, ICP-MS/MS with collision-reaction cell or chemical separation). Alpha spectrometry measurement, as described in ISO 13167[10], is currently used[11]. This method is applicable to all types of water having a saline load less than 1 g·l−1. A dilution of the sample is possible to obtain a solution having a saline load and activity concentrations compatible with the preparation and the measurement assembly. A filtration at 0,45 μm is needed for determination of dissolved nuclides. Acidification and chemical separation of the sample are always needed. The limit of quantification depends on the chemical separation and the performance of the measurement device. This method covers the measurement of those isotopes in water in activity concentrations between around[12][13]: —          1 mBq·l−1 to 5 Bq·l−1 for 239Pu, 240Pu and 237Np; —          1 Bq·l−1 to 5 Bq·l−1 for 241Pu. In both cases, samples with higher activity concentrations than 5 Bq·l−1 can be measured if a dilution is performed before the chemical separation. It is possible to measure 241Pu following a pre-concentration step of at least 1 000. ","objectID":"69404_0","_highlightResult":{"title":{"value":"ISO 20899:2018 Water quality — Plutonium and neptunium — Test method using ICP-MS","matchLevel":"none","matchedWords":[]},"text":{"value":"This document specifies methods used to determine the concentration of plutonium and neptunium isotopes in water by inductively coupled plasma mass spectrometry (ICP-MS) (239Pu, 240Pu, 241Pu and 237Np). The concentrations obtained can be converted into activity concentrations of the different isotopes[9]. Due to its relatively short half-life and 238U isobaric interference, 238Pu can hardly be measured by this method. To quantify this isotope, other techniques can be used (ICP-MS with collision-reaction cell, ICP-MS/MS with collision-reaction cell or chemical separation). Alpha spectrometry measurement, as described in ISO 13167[10], is currently used[11]. This method is applicable to all types of water having a saline load less than 1 g·l−1. A dilution of the sample is possible to obtain a solution having a saline load and activity concentrations compatible with the preparation and the measurement assembly. A filtration at 0,45 μm is needed for determination of dissolved nuclides. Acidification and chemical separation of the sample are always needed. The limit of quantification depends on the chemical separation and the performance of the measurement device. This method covers the measurement of those isotopes in water in activity concentrations between around[12][13]: —          1 mBq·l−1 to 5 Bq·l−1 for 239Pu, 240Pu and 237Np; —          1 Bq·l−1 to 5 Bq·l−1 for 241Pu. In both cases, samples with higher activity concentrations than 5 Bq·l−1 can be measured if a dilution is performed before the chemical separation. It is possible to measure 241Pu following a pre-concentration step of at least 1 000. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/07/39/73961","uuid":"bc3fcfea-420e-4ecc-92b3-9794725e1c87","title":"ISO 20045:2023 Measurement of the radioactivity in the environment — Air: tritium — Test method using bubbler sampling","status":"Published","year":2023,"order":11,"text":"This document describes a test method to determine the activity concentration of atmospheric tritium by trapping tritium in air by bubbling through a water solution. Atmospheric tritium activity concentration levels are expressed in becquerel per cubic metre (Bq∙m -3 ). The formulae are given for a sampling system with four bubblers. They can also be applied to trapping systems with only one trapping module consisting of two bubblers if only tritiated water vapour (HTO) is in the atmosphere to be sampled. This document does not cover laboratory test sample results, in becquerel per litre of trapping solution, according to ISO 9698 or ISO 13168 . The test method detection limit result is between 0,2 Bq∙m -3 and 0,5 Bq∙m -3 when the sampling duration is about one week. ","objectID":"73961_0","_highlightResult":{"title":{"value":"ISO 20045:2023 Measurement of the radioactivity in the environment — Air: tritium — Test method using bubbler sampling","matchLevel":"none","matchedWords":[]},"text":{"value":"This document describes a test method to determine the activity concentration of atmospheric tritium by trapping tritium in air by bubbling through a water solution. Atmospheric tritium activity concentration levels are expressed in becquerel per cubic metre (Bq∙m -3 ). The formulae are given for a sampling system with four bubblers. They can also be applied to trapping systems with only one trapping module consisting of two bubblers if only tritiated water vapour (HTO) is in the atmosphere to be sampled. This document does not cover laboratory test sample results, in becquerel per litre of trapping solution, according to ISO 9698 or ISO 13168 . The test method detection limit result is between 0,2 Bq∙m -3 and 0,5 Bq∙m -3 when the sampling duration is about one week. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/06/77/67729","uuid":"4f55db29-1114-40f7-b42f-926d65f884ed","title":"ISO 12473:2017 General principles of cathodic protection in seawater","status":"Published","year":2023,"order":11,"text":"ISO 12473 covers the general principles of cathodic protection when applied in seawater, brackish waters and marine mud. It is intended to be an introduction, to provide a link between the theoretical aspects and the practical applications, and to constitute a support to the other standards devoted to cathodic protection of steel structures in seawater. ISO 12473 specifies the criteria required for cathodic protection. It provides recommendations and information on reference electrodes, design considerations and prevention of the secondary effects of cathodic protection. The practical applications of cathodic protection in seawater are covered by the following standards: -      EN 12495, Cathodic protection for fixed steel offshore structures ; -      ISO 13174, Cathodic protection of harbour installations ( ISO 13174 ) ; -      EN 12496, Galvanic anodes for cathodic protection in seawater and saline mud ; -      EN 13173, Cathodic protection for steel offshore floating structures ; -      EN 16222, Cathodic protection of ship hulls ; -      EN 12474, Cathodic protection of submarine pipelines ; -      ISO 15589‑2, Petroleum, petrochemical and natural gas industries ? Cathodic protection of pipeline transportation systems ? Part 2: Offshore pipelines . For cathodic protection of steel reinforced concrete whether exposed to seawater or to the atmosphere, ISO 12696 applies. ","objectID":"67729_0","_highlightResult":{"title":{"value":"ISO 12473:2017 General principles of cathodic protection in seawater","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 12473 covers the general principles of cathodic protection when applied in seawater, brackish waters and marine mud. It is intended to be an introduction, to provide a link between the theoretical aspects and the practical applications, and to constitute a support to the other standards devoted to cathodic protection of steel structures in seawater. ISO 12473 specifies the criteria required for cathodic protection. It provides recommendations and information on reference electrodes, design considerations and prevention of the secondary effects of cathodic protection. The practical applications of cathodic protection in seawater are covered by the following standards: -      EN 12495, Cathodic protection for fixed steel offshore structures ; -      ISO 13174, Cathodic protection of harbour installations ( ISO 13174 ) ; -      EN 12496, Galvanic anodes for cathodic protection in seawater and saline mud ; -      EN 13173, Cathodic protection for steel offshore floating structures ; -      EN 16222, Cathodic protection of ship hulls ; -      EN 12474, Cathodic protection of submarine pipelines ; -      ISO 15589‑2, Petroleum, petrochemical and natural gas industries ? Cathodic protection of pipeline transportation systems ? Part 2: Offshore pipelines . For cathodic protection of steel reinforced concrete whether exposed to seawater or to the atmosphere, ISO 12696 applies. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/04/53/45380","uuid":"c8af7131-61e3-43d8-97ff-b6a2e32553bc","title":"ISO 29282:2011 Intelligent transport systems — Communications access for land mobiles (CALM) — Satellite networks","status":"Published","year":2023,"order":11,"text":"ISO 29282:2011 provides definitions and procedures for the establishment, maintenance and termination of an ITS (intelligent transport systems) communications session within a CALM (communication access for land mobiles) system environment using bi-directional satellite communications. It defines the operation of the medium management adaptation entity (MMAE), which provides the management interface between a proprietary satellite communications medium and the \"ITS station management\". This enables the \"ITS station management\" to know the status of the communications medium and control the interface without the need for applications at the ITS station to have any knowledge of the satellite communications interface. The procedures that the \"ITS station management\" expects to use are also explained. ISO 29282:2011 defines how to connect and disconnect a communication session using satellite communication systems in the context of an application operated within the environment defined in ISO 21217. It supports peer-to-peer modes of communication. Support for broadcast satellite systems is defined in ISO 13183, which provides a common approach for all broadcast media. It supports satellite communications networks that are interconnected with the public network, as well as those which connect via the internet and those which provide a stand-alone capability. ","objectID":"45380_0","_highlightResult":{"title":{"value":"ISO 29282:2011 Intelligent transport systems — Communications access for land mobiles (CALM) — Satellite networks","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO 29282:2011 provides definitions and procedures for the establishment, maintenance and termination of an ITS (intelligent transport systems) communications session within a CALM (communication access for land mobiles) system environment using bi-directional satellite communications. It defines the operation of the medium management adaptation entity (MMAE), which provides the management interface between a proprietary satellite communications medium and the \"ITS station management\". This enables the \"ITS station management\" to know the status of the communications medium and control the interface without the need for applications at the ITS station to have any knowledge of the satellite communications interface. The procedures that the \"ITS station management\" expects to use are also explained. ISO 29282:2011 defines how to connect and disconnect a communication session using satellite communication systems in the context of an application operated within the environment defined in ISO 21217. It supports peer-to-peer modes of communication. Support for broadcast satellite systems is defined in ISO 13183, which provides a common approach for all broadcast media. It supports satellite communications networks that are interconnected with the public network, as well as those which connect via the internet and those which provide a stand-alone capability. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/06/70/67089","uuid":"4985ca41-c460-4d2f-87e6-5994cb4c81b4","title":"ISO 17438-4:2019 Intelligent transport systems — Indoor navigation for personal and vehicle ITS station — Part 4: Requirements and specifications for interface between personal/vehicle and central ITS stations","status":"Published","year":2019,"order":11,"text":"This document defines detailed use cases, requirements and message specifications for supporting indoor navigation functionality between a personal/vehicle (P/V) ITS station and a central ITS station. This document defines: a)    Clusters of use cases based on processing flows for indoor navigation between a P/V ITS station and a central ITS station; b)    Detailed use cases derived from the clusters of use cases for indoor navigation; c)    Message specifications to support some of the detailed use cases. The message specifications include mandatory, conditional and optional elements. This document is only applicable to the core flow for the navigational functionality in indoor space. The following issues which are adjunctive but essential for commercial navigation services are beyond the scope of this document: —          Authorized and authenticated access of users and services, including security; —          Payment; —          Preparation of indoor data which are necessary for indoor navigation; —          Detailed data formats for indoor navigation data, including indoor maps and indoor positioning references (these form a part of ISO 17438-2[1] and ISO 17438-3[2]); —          How to transfer and share data required for indoor navigation between a roadside ITS station and a central ITS station, i.e. low-level communication protocols; —          Other issues dependent on implementation of an instance of indoor navigation, e.g. indoor-outdoor seamless navigation. This document uses the XML and Data eXchange Message (DXM) format defined in ISO 13184-2 to encode defined messages. [1] Under development. Current stage 0.00. [2] Under development. Current stage 0.00. ","objectID":"67089_0","_highlightResult":{"title":{"value":"ISO 17438-4:2019 Intelligent transport systems — Indoor navigation for personal and vehicle ITS station — Part 4: Requirements and specifications for interface between personal/vehicle and central ITS stations","matchLevel":"none","matchedWords":[]},"text":{"value":"This document defines detailed use cases, requirements and message specifications for supporting indoor navigation functionality between a personal/vehicle (P/V) ITS station and a central ITS station. This document defines: a)    Clusters of use cases based on processing flows for indoor navigation between a P/V ITS station and a central ITS station; b)    Detailed use cases derived from the clusters of use cases for indoor navigation; c)    Message specifications to support some of the detailed use cases. The message specifications include mandatory, conditional and optional elements. This document is only applicable to the core flow for the navigational functionality in indoor space. The following issues which are adjunctive but essential for commercial navigation services are beyond the scope of this document: —          Authorized and authenticated access of users and services, including security; —          Payment; —          Preparation of indoor data which are necessary for indoor navigation; —          Detailed data formats for indoor navigation data, including indoor maps and indoor positioning references (these form a part of ISO 17438-2[1] and ISO 17438-3[2]); —          How to transfer and share data required for indoor navigation between a roadside ITS station and a central ITS station, i.e. low-level communication protocols; —          Other issues dependent on implementation of an instance of indoor navigation, e.g. indoor-outdoor seamless navigation. This document uses the XML and Data eXchange Message (DXM) format defined in ISO 13184-2 to encode defined messages. [1] Under development. Current stage 0.00. [2] Under development. Current stage 0.00. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/07/23/72373","uuid":"51aab459-3a65-401c-bcbf-f8cd6d6851b9","title":"ISO 22017:2020 Water quality — Guidance for rapid radioactivity measurements in nuclear or radiological emergency situation","status":"Published","year":2020,"order":11,"text":"This document provides guidelines for testing laboratories wanting to use rapid test methods on water samples that may be contaminated following a nuclear or radiological emergency incident. In an emergency situation, consideration should be given to: —     taking into account the specific context for the tests to be performed, e.g. a potentially high level of contamination; —     using or adjusting, when possible, radioactivity test methods implemented during routine situations to obtain a result rapidly or, for tests not performed routinely, applying specific rapid test methods previously validated by the laboratory, e.g. for 89 Sr determination; —     preparing the test laboratory to measure a large number of potentially contaminated samples. The aim of this document is to ensure decision makers have reliable results needed to take actions quickly and minimize the radiation dose to the public. Measurements are performed in order to minimize the risk to the public by checking the quality of water supplies. For emergency situations, test results are often compared to operational intervention levels. NOTE    Operational intervention levels (OILs) are derived from IAEA Safety Standards [8] or national authorities [9] . A key element of rapid analysis can be the use of routine methods but with a reduced turnaround time. The goal of these rapid measurements is often to check for unusual radioactivity levels in the test sample, to identify the radionuclides present and their activity concentration levels and to establish compliance of the water with intervention levels [10][11][12] . It should be noted that in such circumstances, validation parameters evaluated for routine use (e.g. reproducibility, precision, etc.) may not be applicable to the modified rapid method. However, due to the circumstances arising after an emergency, the modified method may still be fit-for-purpose although uncertainties associated with the test results need to be evaluated and may increase from routine analyses. The first steps of the analytical approach are usually screening methods based on gross alpha and gross beta test methods (adaptation of ISO 10704 and ISO 11704) and gamma spectrometry (adaptation of ISO 20042, ISO 10703 and ISO 19581). Then, if required [13] , test method standards for specific radionuclides (see Clause 2) are adapted and applied (for example, 90 Sr measurement according to ISO 13160) as proposed in Annex A. This document refers to published ISO documents. When appropriate, this document also refers to national standards or other publicly available documents. Screening techniques that can be carried out directly in the field are not part of this document. ","objectID":"72373_0","_highlightResult":{"title":{"value":"ISO 22017:2020 Water quality — Guidance for rapid radioactivity measurements in nuclear or radiological emergency situation","matchLevel":"none","matchedWords":[]},"text":{"value":"This document provides guidelines for testing laboratories wanting to use rapid test methods on water samples that may be contaminated following a nuclear or radiological emergency incident. In an emergency situation, consideration should be given to: —     taking into account the specific context for the tests to be performed, e.g. a potentially high level of contamination; —     using or adjusting, when possible, radioactivity test methods implemented during routine situations to obtain a result rapidly or, for tests not performed routinely, applying specific rapid test methods previously validated by the laboratory, e.g. for 89 Sr determination; —     preparing the test laboratory to measure a large number of potentially contaminated samples. The aim of this document is to ensure decision makers have reliable results needed to take actions quickly and minimize the radiation dose to the public. Measurements are performed in order to minimize the risk to the public by checking the quality of water supplies. For emergency situations, test results are often compared to operational intervention levels. NOTE    Operational intervention levels (OILs) are derived from IAEA Safety Standards [8] or national authorities [9] . A key element of rapid analysis can be the use of routine methods but with a reduced turnaround time. The goal of these rapid measurements is often to check for unusual radioactivity levels in the test sample, to identify the radionuclides present and their activity concentration levels and to establish compliance of the water with intervention levels [10][11][12] . It should be noted that in such circumstances, validation parameters evaluated for routine use (e.g. reproducibility, precision, etc.) may not be applicable to the modified rapid method. However, due to the circumstances arising after an emergency, the modified method may still be fit-for-purpose although uncertainties associated with the test results need to be evaluated and may increase from routine analyses. The first steps of the analytical approach are usually screening methods based on gross alpha and gross beta test methods (adaptation of ISO 10704 and ISO 11704) and gamma spectrometry (adaptation of ISO 20042, ISO 10703 and ISO 19581). Then, if required [13] , test method standards for specific radionuclides (see Clause 2) are adapted and applied (for example, 90 Sr measurement according to ISO 13160) as proposed in Annex A. This document refers to published ISO documents. When appropriate, this document also refers to national standards or other publicly available documents. Screening techniques that can be carried out directly in the field are not part of this document. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/00/00/46","uuid":"41e7ee91-40fc-4e93-8933-a6a33ecf8187","title":"ISO/R 131:1959 Title missing - Legacy paper document","status":"Withdrawn","year":1964,"order":100,"objectID":"46_0","_highlightResult":{"title":{"value":"ISO/R 131:1959 Title missing - Legacy paper document","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/08/42/84286","uuid":"e9c2d8ba-8686-4be8-a2ea-2c20cd3e7f31","title":"ISO/TS 13126:2023 Traditional Chinese medicine — Determination of ochratoxin A in natural products by liquid chromatography coupled with fluorescence detector","status":"Published","year":2023,"order":11,"text":"This document specifies the determination of ochratoxin A (OTA) in natural products by the liquid chromatography coupled with fluorescence detector (LC-FLD) method. It is applicable to the analysis of OTA in raw materials and manufactured products, including decoction pieces derived from plants and animals. It is suitable for samples during the processes of harvesting, transportation and storage, as well as domestic and foreign trade for quality classification. ","objectID":"84286_0","_highlightResult":{"title":{"value":"ISO/TS 13126:2023 Traditional Chinese medicine — Determination of ochratoxin A in natural products by liquid chromatography coupled with fluorescence detector","matchLevel":"none","matchedWords":[]},"text":{"value":"This document specifies the determination of ochratoxin A (OTA) in natural products by the liquid chromatography coupled with fluorescence detector (LC-FLD) method. It is applicable to the analysis of OTA in raw materials and manufactured products, including decoction pieces derived from plants and animals. It is suitable for samples during the processes of harvesting, transportation and storage, as well as domestic and foreign trade for quality classification. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/79/57954","uuid":"8bfd7503-b897-4f1b-b868-2fe36af71c3a","title":"ISO/IEC 13156:2011 Information technology — Telecommunications and information exchange between systems — High rate 60 GHz PHY, MAC and PALs","status":"Published","year":2022,"order":11,"text":"ISO/IEC 13156:2011 specifies a physical layer (PHY), distributed medium access control (MAC) sublayer, and an HDMI protocol adaptation layer (PAL) for 60 GHz wireless networks. ","objectID":"57954_0","_highlightResult":{"title":{"value":"ISO/IEC 13156:2011 Information technology — Telecommunications and information exchange between systems — High rate 60 GHz PHY, MAC and PALs","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO/IEC 13156:2011 specifies a physical layer (PHY), distributed medium access control (MAC) sublayer, and an HDMI protocol adaptation layer (PAL) for 60 GHz wireless networks. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/33/53328","uuid":"d80faea0-fd76-421c-b4fd-944e652e6d29","title":"ISO/TS 13136:2012 Microbiology of food and animal feed — Real-time polymerase chain reaction (PCR)-based method for the detection of food-borne pathogens — Horizontal method for the detection of Shiga toxin-producing Escherichia coli (STEC) and the determination of O157, O111, O26, O103 and O145 serogroups","status":"Published","year":2022,"order":11,"text":"ISO/TR 13136:2012 describes the identification of Shiga toxin-producing Escherichia coli (STEC) by means of the detection of the following genes: a) the major virulence genes of STEC, stx and eae ; b) the genes associated with the serogroups O157, O111, O26, O103, and O145. In any case, when one or both of the stx genes is/are detected, the isolation of the strain is attempted. The isolation of STEC from samples positive for the presence of the genes specifying the serogroups in the scope of this method can be facilitated by using serogroup-specific enrichment techniques (e.g. immunomagnetic separation, IMS). The protocol uses real-time PCR as the reference technology for detection of the virulence and serogroup-associated genes. ISO/TR 13136:2012 is applicable to: 1) products intended for human consumption and the feeding of animals; 2) environmental samples in the area of food production and food handling; 3) environmental samples in the area of primary production. ","objectID":"53328_0","_highlightResult":{"title":{"value":"ISO/TS 13136:2012 Microbiology of food and animal feed — Real-time polymerase chain reaction (PCR)-based method for the detection of food-borne pathogens — Horizontal method for the detection of Shiga toxin-producing Escherichia coli (STEC) and the determination of O157, O111, O26, O103 and O145 serogroups","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO/TR 13136:2012 describes the identification of Shiga toxin-producing Escherichia coli (STEC) by means of the detection of the following genes: a) the major virulence genes of STEC, stx and eae ; b) the genes associated with the serogroups O157, O111, O26, O103, and O145. In any case, when one or both of the stx genes is/are detected, the isolation of the strain is attempted. The isolation of STEC from samples positive for the presence of the genes specifying the serogroups in the scope of this method can be facilitated by using serogroup-specific enrichment techniques (e.g. immunomagnetic separation, IMS). The protocol uses real-time PCR as the reference technology for detection of the virulence and serogroup-associated genes. ISO/TR 13136:2012 is applicable to: 1) products intended for human consumption and the feeding of animals; 2) environmental samples in the area of food production and food handling; 3) environmental samples in the area of primary production. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/06/93/69344","uuid":"cef6beb7-71d9-45bb-81e7-4afc957bd759","title":"ISO/IEC 13157-5:2016 Information technology — Telecommunications and information exchange between systems — NFC Security — Part 5: NFC-SEC entity authentication and key agreement using symmetric cryptography","status":"Published","year":2021,"order":11,"text":"ISO/IEC 13157-5:2016 specifies the message contents and the cryptographic mechanisms for PID 04. ISO/IEC 13157-5:2016 specifies key agreement and confirmation mechanisms providing mutual authentication, using symmetric cryptography. ISO/IEC 13157-5:2016 adds entity authentication to the services provided by ISO/IEC 13157-3 (ECMA‑409) NFC-SEC-02. ","objectID":"69344_0","_highlightResult":{"title":{"value":"ISO/IEC 13157-5:2016 Information technology — Telecommunications and information exchange between systems — NFC Security — Part 5: NFC-SEC entity authentication and key agreement using symmetric cryptography","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO/IEC 13157-5:2016 specifies the message contents and the cryptographic mechanisms for PID 04. ISO/IEC 13157-5:2016 specifies key agreement and confirmation mechanisms providing mutual authentication, using symmetric cryptography. ISO/IEC 13157-5:2016 adds entity authentication to the services provided by ISO/IEC 13157-3 (ECMA‑409) NFC-SEC-02. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/06/93/69343","uuid":"86bc424f-f653-41b8-b252-2294bb1e197a","title":"ISO/IEC 13157-4:2016 Information technology — Telecommunications and information exchange between systems — NFC Security — Part 4: NFC-SEC entity authentication and key agreement using asymmetric cryptography","status":"Published","year":2021,"order":11,"text":"ISO/IEC 13157-4:2016 specifies the message contents and the cryptographic mechanisms for PID 03. ISO/IEC 13157-4:2016 specifies key agreement and confirmation mechanisms providing mutual authentication, using asymmetric cryptography, and the transport protocol requirements for the exchange between Sender and TTP. NOTE ISO/IEC 13157-4:2016 adds entity authentication to the services provided by ISO/IEC 13157-3 (ECMA-409) NFC-SEC-02. ","objectID":"69343_0","_highlightResult":{"title":{"value":"ISO/IEC 13157-4:2016 Information technology — Telecommunications and information exchange between systems — NFC Security — Part 4: NFC-SEC entity authentication and key agreement using asymmetric cryptography","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO/IEC 13157-4:2016 specifies the message contents and the cryptographic mechanisms for PID 03. ISO/IEC 13157-4:2016 specifies key agreement and confirmation mechanisms providing mutual authentication, using asymmetric cryptography, and the transport protocol requirements for the exchange between Sender and TTP. NOTE ISO/IEC 13157-4:2016 adds entity authentication to the services provided by ISO/IEC 13157-3 (ECMA-409) NFC-SEC-02. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/06/93/69342","uuid":"90ff550f-f783-4a83-a6bd-38ba0ca8486d","title":"ISO/IEC 13157-3:2016 Information technology — Telecommunications and information exchange between systems — NFC Security — Part 3: NFC-SEC cryptography standard using ECDH-256 and AES-GCM","status":"Published","year":2021,"order":11,"text":"ISO/IEC 13157-3:2016 specifies the message contents and the cryptographic methods for PID 02. It specifies cryptographic mechanisms that use the Elliptic Curves Diffie-Hellman (ECDH) protocol with a key length of 256 bits for key agreement and the AES algorithm in GCM mode to provide data authenticated encryption. ","objectID":"69342_0","_highlightResult":{"title":{"value":"ISO/IEC 13157-3:2016 Information technology — Telecommunications and information exchange between systems — NFC Security — Part 3: NFC-SEC cryptography standard using ECDH-256 and AES-GCM","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO/IEC 13157-3:2016 specifies the message contents and the cryptographic methods for PID 02. It specifies cryptographic mechanisms that use the Elliptic Curves Diffie-Hellman (ECDH) protocol with a key length of 256 bits for key agreement and the AES algorithm in GCM mode to provide data authenticated encryption. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/06/93/69328","uuid":"c50d14df-a679-4d77-99fc-a8b2e2c2eef6","title":"ISO/IEC 13157-2:2016 Information technology — Telecommunications and information exchange between systems — NFC Security — Part 2: NFC-SEC cryptography standard using ECDH and AES","status":"Published","year":2021,"order":11,"text":"ISO/IEC 13157-2:2016 specifies the message contents and the cryptographic methods for PID 01. ISO/IEC 13157-2:2016 specifies cryptographic mechanisms that use the Elliptic Curves Diffie-Hellman (ECDH) protocol for key agreement and the AES algorithm for data encryption and integrity. ","objectID":"69328_0","_highlightResult":{"title":{"value":"ISO/IEC 13157-2:2016 Information technology — Telecommunications and information exchange between systems — NFC Security — Part 2: NFC-SEC cryptography standard using ECDH and AES","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO/IEC 13157-2:2016 specifies the message contents and the cryptographic methods for PID 01. ISO/IEC 13157-2:2016 specifies cryptographic mechanisms that use the Elliptic Curves Diffie-Hellman (ECDH) protocol for key agreement and the AES algorithm for data encryption and integrity. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/05/34/53434","uuid":"794b1484-9f46-432e-acf0-1818ab334e09","title":"ISO/IEC 13170:2009 Information technology — 120 mm (8,54 Gbytes per side) and 80 mm (2,66 Gbytes per side) DVD re-recordable disk for dual layer (DVD-RW for DL)","status":"Published","year":2020,"order":11,"text":"ISO/IEC 13170:2010 specifies the mechanical, physical and optical characteristics of a 120 mm and an 80 mm dual layer DVD re-recordable disk to enable the interchange of such disks. It specifies the quality of the embossed, unrecorded and the recorded signals, the format of the data, the format of the information zone, the format of the unrecorded zone, and the recording method, thereby allowing for information interchange by means of such disks. This disk is identified as a DVD re-recordable disk for dual layer (DVD-RW for DL). ISO/IEC 13170:2010 specifies: 120 mm and 80 mm nominal diameter disks that may be either single or double sided; the conditions for conformance; the environments in which the disk is to be operated and stored; the mechanical and physical characteristics of the disk, so as to provide mechanical interchange between data processing systems; the format of the embossed information on an unrecorded disk, including the physical disposition of the tracks and sectors, the error correcting codes and the coding method used; the format of the data and the recorded information on the disk, including the physical disposition of the tracks and sectors, the error correcting codes and the coding method used; the characteristics of the signals from embossed and unrecorded areas on the disk, enabling data processing systems to read the embossed information and to write to the disks; the characteristics of the signals recorded on the disk, enabling data processing systems to read the data from the disk. ISO/IEC 13170:2010 provides for interchange of disks between disk drives. Together with an International Standard for volume and file structure, it provides for full data interchange between data processing systems. ","objectID":"53434_0","_highlightResult":{"title":{"value":"ISO/IEC 13170:2009 Information technology — 120 mm (8,54 Gbytes per side) and 80 mm (2,66 Gbytes per side) DVD re-recordable disk for dual layer (DVD-RW for DL)","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO/IEC 13170:2010 specifies the mechanical, physical and optical characteristics of a 120 mm and an 80 mm dual layer DVD re-recordable disk to enable the interchange of such disks. It specifies the quality of the embossed, unrecorded and the recorded signals, the format of the data, the format of the information zone, the format of the unrecorded zone, and the recording method, thereby allowing for information interchange by means of such disks. This disk is identified as a DVD re-recordable disk for dual layer (DVD-RW for DL). ISO/IEC 13170:2010 specifies: 120 mm and 80 mm nominal diameter disks that may be either single or double sided; the conditions for conformance; the environments in which the disk is to be operated and stored; the mechanical and physical characteristics of the disk, so as to provide mechanical interchange between data processing systems; the format of the embossed information on an unrecorded disk, including the physical disposition of the tracks and sectors, the error correcting codes and the coding method used; the format of the data and the recorded information on the disk, including the physical disposition of the tracks and sectors, the error correcting codes and the coding method used; the characteristics of the signals from embossed and unrecorded areas on the disk, enabling data processing systems to read the embossed information and to write to the disks; the characteristics of the signals recorded on the disk, enabling data processing systems to read the data from the disk. ISO/IEC 13170:2010 provides for interchange of disks between disk drives. Together with an International Standard for volume and file structure, it provides for full data interchange between data processing systems. ","matchLevel":"none","matchedWords":[]}}},{"category":"standard","path":"/sites/isoorg/contents/data/standard/06/47/64719","uuid":"5185661a-a2bd-4001-94b0-c11824c5227b","title":"ISO/IEC 13157-1:2014 Information technology — Telecommunications and information exchange between systems — NFC Security — Part 1: NFC-SEC NFCIP-1 security services and protocol","status":"Published","year":2019,"order":11,"text":"ISO/IEC 13157-1:2014 specifies the NFC-SEC secure channel and shared secret services for NFCIP-1 and the Protocol Data Units and protocol for those services. ","objectID":"64719_0","_highlightResult":{"title":{"value":"ISO/IEC 13157-1:2014 Information technology — Telecommunications and information exchange between systems — NFC Security — Part 1: NFC-SEC NFCIP-1 security services and protocol","matchLevel":"none","matchedWords":[]},"text":{"value":"ISO/IEC 13157-1:2014 specifies the NFC-SEC secure channel and shared secret services for NFCIP-1 and the Protocol Data Units and protocol for those services. ","matchLevel":"none","matchedWords":[]}}}],"nbHits":188,"page":0,"nbPages":2,"hitsPerPage":100,"exhaustiveNbHits":true,"exhaustiveTypo":true,"exhaustive":{"nbHits":true,"typo":true},"query":"ISO 131","params":"query=ISO+131&hitsPerPage=100&filters=category%3Astandard","processingTimeMS":9,"processingTimingsMS":{"_request":{"roundTrip":293},"afterFetch":{"format":{"highlighting":6,"total":7},"total":8},"total":9},"serverTimeMS":9}
  recorded_at: Mon, 25 Sep 2023 08:15:13 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/00/39/3944.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=C0C4C708E859F9F4EC4CDE8A99A4B668; Path=/; Secure; HttpOnly
      Location:
      - "/standard/3944.html"
      Content-Length:
      - '0'
      Date:
      - Mon, 25 Sep 2023 08:15:20 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Mon, 25 Sep 2023 08:15:21 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/3944.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=45BE4BA148C205D965093AEE780A9E12; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Mon, 25 Sep 2023 08:15:21 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="en">
  <head><link rel="canonical" href="https://www.iso.org/standard/3944.html" />
<link rel="alternate" hreflang="fr" href="https://www.iso.org/fr/standard/3944.html" />
    <script>
      dataLayer = [{
        'pageType': 'its:standard',
        'pageLanguage': 'en'
      }];
    </script>

    <style>
/* Early rules to mitigate CLS */
.nav-utility { padding: 5px; z-index: 1024; position: relative; }
.text-sm { font-size: .875em; }
.nav-utility li.nav-item a.nav-link { padding: 0; text-decoration: none; }
.dropdown-toggle::after { font-size: .75em; vertical-align: baseline; }
.logo.isologo.logo-sm { height: 50px; width: 50px; }
.nav-iso .navbar-toggler { margin-left: 0.5rem; order: 4; }
.navbar-toggler-icon-animated { width: 20px; height: 15px; position: relative; margin: 0; transform: rotate(0); display: inline-block; }
.nav-iso .navbar-form { order: 2; flex: 1; }
.navbar-form { margin-left: 0.5rem; }
.height-300 { height: 300px; }
section.section-md { padding-top: 3.75rem; padding-bottom: 3.75rem; }
.nav-relatives .nav-children, .nav-relatives .section-head { font-size: calc(1.255rem + .06vw); }
.previous a::before, .section-back a::before { vertical-align: bottom; padding-right: .3em; transition: all 0; }
@media screen and (max-width:500px) { .section-back { flex-wrap: nowrap; overflow-x: hidden; } .section-back > a:not(:first-of-type):not(:last-of-type) { display: none; } .heading-condensed > h1 { font-size: 31.6588px; line-height: 39.5735px; } .heading-condensed > h2 { font-size: 26.1713px; line-height: 32.7141px; } }
@media (max-width: 1199.98px) { section.section-navigation { padding-top: 1.875rem; } }
</style>
<!-- OneTrust Cookies Consent Notice start for www.iso.org -->
<script type="text/javascript" src="https://cdn.cookielaw.org/consent/0217ba9a-8935-44d6-872d-1f223304e117/OtAutoBlock.js" ></script>
<script src="https://cdn.cookielaw.org/scripttemplates/otSDKStub.js" data-document-language="true" type="text/javascript" charset="UTF-8" data-domain-script="0217ba9a-8935-44d6-872d-1f223304e117" ></script>
<script type="text/javascript">
// function to pull cookie value
function getCookie(name) {
    var value = "; " + document.cookie;
    var parts = value.split("; " + name + "=");
    if (parts.length == 2) return parts.pop().split(";").shift();
}
function OptanonWrapper() {
    console.log("OptanonWrapper called");
    var OABCcookieName = "OptanonAlertBoxClosed";
    var bannerAcceptBtn = document.getElementById("onetrust-accept-btn-handler");
    var pcAllowAllBtn = document.getElementById("accept-recommended-btn-handler");
    var pcSaveBtn = document.getElementsByClassName("save-preference-btn-handler onetrust-close-btn-handler")[0];
    var OABCcookie = getCookie(OABCcookieName);
   
    // IF logic needed here because ot-banner-sdk DIV is not injected on page loads if banner is not exposed
    if (!OABCcookie && bannerAcceptBtn) {
        bannerAcceptBtn.addEventListener('click', function() {
            console.log("Allowed all via Banner");
            location.reload();
        });
    }
    if (pcAllowAllBtn) {
        pcAllowAllBtn.addEventListener('click', function() {
            console.log("Allowed all via Preference Center");
            location.reload();
        });
    }
    if(pcSaveBtn){
        pcSaveBtn.addEventListener('click', function() {
            setTimeout(()=> {
            console.log("Set custom settings via Preference Center");
            location.reload();
        }, 1000) //quick timeout so that the consent receipt can be sent and the cookie can be updated
        });
    }
}
</script>
<!-- OneTrust Cookies Consent Notice end for www.iso.org -->
<meta name="google-site-verification" content="mQuqWPbWruZdQgZR8QwbxOWnjjxkcFiyJLHWY-cOOHk" />

<!-- Matomo Tag Manager -->
<script  type="text/plain" class="optanon-category-C0002">
var _mtm = window._mtm = window._mtm || [];
_mtm.push({'mtm.startTime': (new Date().getTime()), 'event': 'mtm.Start'});
var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
g.async=true; g.src='https://cdn.matomo.cloud/iso.matomo.cloud/container_dINwYKex.js'; s.parentNode.insertBefore(g,s);
</script>
<!-- End Matomo Tag Manager -->
<meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <title> ISO 131:1979 - Acoustics — Expression of physical and subjective magnitudes of sound or noise in air</title>

    <link rel="preload" as="font" type="font/woff2" href="/modules/isoorg-template/fonts/inter/Inter.var.woff2?v=3.19" crossorigin/>

    <link rel="stylesheet" href="/modules/isoorg-template/css/wood.bootstrap.min.css" media="screen,print,handheld" type="text/css"/>
    <link rel="preload" href="/modules/isoorg-template/css/wood.iso.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'">

    

<!-- start favicons -->
    <link rel="apple-touch-icon-precomposed" href="/modules/isoorg-template/img/iso/favicon/red/apple-touch-icon-152x152-precomposed.png">
    <link rel="shortcut icon" href="/modules/isoorg-template/img/iso/favicon/red/favicon.ico">
    <meta name="msapplication-TileColor" content="#eee">
    <meta name="msapplication-TileImage" content="/modules/isoorg-template/img/iso/favicon/red/mstile-144x144.png">
    <!-- end favicons -->

    <meta name="theme-color" content="#333">

  
<script type="application/json" id="jahia-data-ctx">{"contextPath":"","lang":"en","uilang":"en","siteUuid":"439146f8-677e-4dde-b6c6-b692b7534f52","wcag":false,"ckeCfg":""}</script>
<script type="application/json" id="jahia-data-ck">{"path":"/modules/ckeditor/javascript/","lng":"en_US"}</script>
<script src="/javascript/initJahiaContext.js"></script>
<script id="staticAssetJavascript0" src="/modules/isoorg-template/javascript/wood.full.min.js?1692774279935"  defer></script>
<script id="staticAssetJavascript1" src="/modules/isoorg-template/javascript/custom.js?1692774279935"  defer></script>
<style>
        nav[role="navigation"]:has(.ticker--live) { background-color: var(--bs-brand)!important; }
nav[role="navigation"]:has(.ticker--live)  > .container { gap: 1rem; }
nav[role="navigation"]:has(.ticker--live) #utilities > li:not(#lang-switcher) { display: none!important; }
.card-footer:has(.ticker--live) { background-color: var(--bs-dark)!important; color: white; }
.card-footer:has(.ticker--live) a { color: white; }
/* FF properties : 
nav.nav-utility { background-color: var(--bs-brand)!important; } 
nav.nav-utility > .container { gap: 1rem; } */
.ticker:has(.ticker--live) { white-space: normal; }
.ticker--live .ticker__icon { animation: live 1s infinite; }
@keyframes live { 0% { color: transparent; } 50% { color: white; } 100% { color: transparent; } }
.bg-lightgray + svg { fill: #e4e2e1; }
svg + section.bg-lightergray { border-top: 0; }
svg:has(+.bg-lightergray) { fill: #efeded; transform: rotate(180deg) translateY(-1px); }</style>
    
<script src="/modules/iso-jahia-service-module/javascript/catalogue.js" defer ></script>

<meta name="category" content="w" />
  <meta name="pubdate" content="19960307" />
  
<!-- Twitter Card data -->
  <meta name="twitter:site" content="@isostandards" />

  <!-- Open Graph data -->
  <meta property="og:site_name" content="ISO" />
  <meta property="og:url" content="https://www.iso.org/standard/3944.html" />
  <meta property="og:type" content="website" />
  <!-- Thumbnail image (for twitter and Open Graph) -->
    <meta name="thumbnail" content="/modules/iso-jahia-service-module/img/iso/iso-logo-print.gif" />
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:image" content="/modules/iso-jahia-service-module/img/iso/iso-logo-print.gif" />
    <meta property="og:image" content="/modules/iso-jahia-service-module/img/iso/iso-logo-print.gif" />
    <meta property="og:image:alt" content="ISO logo" />
  <!-- Title (for twitter and Open Graph) -->
    <meta name="twitter:title" content="ISO 131:1979" />
    <meta property="og:title" content="ISO 131:1979" />
  <!-- Description (for google, twitter and Open Graph) -->
    <meta name="twitter:description" content="Acoustics — Expression of physical and subjective magnitudes of sound or noise in air" />
    <meta property="og:description" content="Acoustics — Expression of physical and subjective magnitudes of sound or noise in air" />
    <meta name="description" content="Acoustics — Expression of physical and subjective magnitudes of sound or noise in air" />
  <!-- Facebook admins : Lionel,Maria -->
  <meta property="fb:admins" content="100001116079676,100001440003305" />

  

<script type="text/javascript" src="/modules/CsrfServlet"></script>
</head>
  <body class="theme-red lang-en" id="page-top">
    <a class="skip-navigation btn btn-info visually-hidden visually-hidden-focusable" href="#content">Skip to main content</a>

    <!-- Topbar utility -->
    <nav role="navigation" aria-label="Utility Navigation" class="nav-utility navbar-expand-lg text-sm navbar-dark bg-darkergray text-light">
      <div class="container d-flex justify-content-between">
        <div class="ticker text-truncate float-start"></div>
        <ul class="nav d-flex justify-content-end justify-content-sm-around justify-content-md-end" id="utilities">
          <li class="nav-item d-none d-sm-block">
            <a href="https://login.iso.org" class="nav-link d-flex align-items-center" title="ISO's applications portal"><i class="bi-grid-3x3-gap-fill"></i>&nbsp;Applications</a>
          </li>
          <li class="nav-item d-none d-sm-block">
            <a href="https://www.iso.org/obp/ui/en/" class="nav-link d-flex align-items-center" title="Online Browsing Platform"><i class="bi-journal-text"></i>&nbsp;OBP</a>
          </li>
          <li class="nav-item dropdown" id="lang-switcher">
  <a id="lang-dropdown" class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" aria-expanded="false">English</a>
  <ul class="dropdown-menu dropdown-menu-end" role="menu" aria-labelledby="lang-dropdown">
    <li class="lang-fr "><a class="dropdown-item " href="/fr/standard/3944.html">français</a></li><li class="lang-ru "><a class="dropdown-item " href="/ru/standard/3944.html">русский</a></li></ul>
</li></ul>
      </div>
    </nav>

    <!-- Header ISO.ORG -->
    <header class="header-bootstrap sticky-top">
      <!-- Main navigation -->
      <nav class="navbar nav-iso navbar-expand-md navbar-light shadow-md bg-white text-dark">
        <div class="container">
          <a class="logo logo-square isologo logo-sm" href="/home.html" title="International Organization for Standardization" alt="ISO logo"></a>
          <div class="isologo-print"><img loading="lazy" fetchpriority="low" src="/modules/isoorg-template/img/iso/iso-logo-print.gif" alt="ISO logo for print"/></div>
          <button class="btn btn-light navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#mainNav" aria-controls="mainNav" aria-expanded="false" aria-label="Toggle navigation">
            <div class="navbar-toggler-icon-animated"><span></span><span></span><span></span><span></span></div><span class="visually-hidden-xs">&nbsp;Menu</span>
          </button>
          <!-- TOP LEVEL1 NAVIGATION -->
          <nav role="navigation" aria-label="Main Navigation" class="nav-megamenu collapse navbar-collapse" id="mainNav"><ul role='menubar' class='navbar-nav me-auto mb-lg-0 ps-2 pe-2 nav-level1' ><li role='menuitem' class='nav-item dropdown position-static noChildren firstInLevel' ><a class='nav-link dropdown-toggle megamenu-toggle  '   title="Covering almost every product, process or service imaginable, ISO makes standards used everywhere."  href='/standards.html'>Standards</a></li><!-- close of list item level 1 --><li role='menuitem' class='nav-item dropdown position-static noChildren' ><a class='nav-link dropdown-toggle megamenu-toggle  '   title="ISO brings together global experts to develop International Standards that help solve problems and drive innovation."  href='/about-us.html'>About us</a></li><!-- close of list item level 1 --><li role='menuitem' class='nav-item dropdown position-static noChildren' ><a class='nav-link dropdown-toggle megamenu-toggle  '   title="Keep up to date with the latest in standardization or browse our rich archives"  href='/news.html'>News</a></li><!-- close of list item level 1 --><li role='menuitem' class='nav-item dropdown position-static noChildren' ><a class='nav-link dropdown-toggle megamenu-toggle  '   title="Find out how the ISO process bring together global experts to create standards that are chosen the world over."  href='/developing-standards.html'>Taking part</a></li><!-- close of list item level 1 --><li role='menuitem' class='nav-item dropdown position-static noChildren inPath  lastInLevel' ><a class='nav-link dropdown-toggle megamenu-toggle  '   title="Are you looking to buy International Standards, guidelines, collections and checklists? They're all right here, in the ISO Store."  href='/store.html'>Store</a></li><!-- close of list item level 1 --></ul><!-- close of container level 1 --></nav><form class="navbar-form d-flex isosearch ms-sm-2" role="search" id="siteSearch">
            <span class="hidden" data-searchpageurl="/search.html"></span>
            <div class="input-group">
              <input type="search" class="form-control" placeholder="Search" aria-labelledby="input-search">
              <button id="input-search" class="btn btn-primary" type="submit"><i class="bi-search text-muted"></i><span class="visually-hidden">Search</span></button>
            </div>
          </form>
          <a role="button" id="shoppingCart" class="btn btn-light shopping-cart-link bg-white border-0 text-muted d-none d-lg-block" href="/webstore/shoppingbasket?memberId=ISO&guilang=en" title="Shopping cart" aria-label="Shopping cart" style-="display:none;">
            <i class="bi-cart"></i><span id="cartText" class="visually-hidden-xs ms-1" style="display: none;"> Cart</span>
          </a>
        </div>
      </nav>

    </header>

    <!-- MAIN CONTENT -->
    <main role="main" id="content" class="acer" aria-label="Content" tabindex="-1">
      


<span class="visually-hidden" id="indexReference" data-index="3944 - ISO 131:1979 - Acoustics — Expression of physical and subjective magnitudes of sound or noise in air"></span>
<span class="visually-hidden" id="itemReference">ISO 131:1979</span>
<div itemscope itemtype="https://schema.org/Product">
  <link itemprop="image" href="/modules/isoorg-template/img/iso/iso-logo-print.gif" /><section class="section-navigation">
    <div class="container">
      <div class="row">
        <div class="col-md-12">
          <div class="visually-hidden" itemprop="category">w</div>
          <div class="visually-hidden" itemprop="name" id="docRef">ISO 131:1979</div>
          <div class="visually-hidden" itemprop="productID" id="csNumber">3944</div>

          <div class="visually-hidden" itemprop="brand" itemscope itemtype="https://schema.org/Brand">
            <div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject">
              <meta itemprop="url" content="/modules/isoorg-template/img/iso/iso-logo-print.gif"/>
              <meta itemprop="width" content="283">
              <meta itemprop="height" content="261">
            </div>
            <meta itemprop="name" content="ISO - International Organization for Standardization">
          </div>

          <nav role="navigation" aria-label="Children Navigation" class="heading-condensed nav-relatives">

  <div class="section-head section-back"><span class="icon "></span><a target="" href="/standards-catalogue/browse-by-ics.html"title="Browse the full collection of ISO standards and find the ones that apply to your sector.">ICS</a><a href="/en/ics/17.html">17</a><a href="/en/ics/17.140.html">17.140</a><a href="/en/ics/17.140.01.html">17.140.01</a></div>
  <h1>ISO 131:1979</h1>
  <h2 class="mt-0 ">Acoustics — Expression of physical and subjective magnitudes of sound or noise in air</h2></nav></div>
      </div>
    </div>
  </section>

  <section id="product-details">
    <div class="container">
      <div class="row">
        <div class="col-md-7">
          <div class="d-flex justify-content-between align-items-center">
  <h3>
    General information<sup>&nbsp;<a href="/contents/data/standard/00/39/3944.detail.rss" class="bi-rss-fill text-warning fs-6" data-bs-toggle="iso-tooltip" data-original-title="Subscribe&nbsp;to&nbsp;updates"></a></sup>
  </h3>
  &nbsp;</div>
<ul class="refine">
  <li>
    <div class="row">
      <div class="col-sm-6">
        <div class="entry-label">Status</div>&nbsp;:&nbsp;<span>Withdrawn</span>
        </div>
      <div class="col-sm-6">
        <div class="entry-label">Publication date</div>&nbsp;:&nbsp;<span itemprop="releaseDate">1979-11</span>
        </div>
    </div>
  </li>
  <li>
    <div class="row">
      <div class="col-sm-6">
        <div class="entry-label">Edition</div>&nbsp;:&nbsp;1</div>
      <div class="col-sm-6">
        <div class="entry-label">Number of pages</div>&nbsp;:&nbsp;3</div>
    </div>
  </li>
  <li>
      <div class="clearfix">
        <div class="entry-label">Technical Committee</div>&nbsp;:
        <span class="entry-name entry-block">
          <a href="/committee/48458.html">ISO/TC 43</a></span>
        <span class="entry-title">Acoustics</span>
      </div>
    </li>
  <li>
    <dl class="dl-inline no-bottom-margin">
      <dt class="entry-label entry-block"><strong>ICS</strong></dt>&nbsp;:
      <dd>
          <span class="entry-name entry-block">
            <a href="/ics/17.140.01.html">
                17.140.01</a>
          </span>
          <span class="entry-title">Acoustic measurements and noise abatement in general</span>
        </dd>
      </dl>
  </li>
</ul>
</div>

        <div class="col-md-4 col-md-offset-1">
          </div>
      </div>
    </div>
  </section>

  <!-- START OF MODAL (Buy ISO.ORG with OPTOUT) -->
  <div class="modal fade" tabindex="-1" role="dialog" id="iso-optout" aria-hidden="true" aria-labelledby="modalLabel">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h4 class="modal-title" id="modalLabel">Buy&nbsp;this standard</h4>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="modal-body clearfix">
            <div id="modalOptOut"></div>
            <div id="modalNoOptOut"></div>
            <span id="proceedToCheckout" class="visually-hidden" data-label="Checkout"></span>
            <span id="continueShopping" class="visually-hidden" data-label="Continue shopping"></span>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- END OF MODAL -->

</div> <section id="lifecycle">
  <div class="container">
    <div class="row">
      <div class="col-md-12">
        <h3>Life cycle</h3>
        <div class="lifecycle">
          <ul class="steps">
            <li class="time-step">
                <h4 class="ms-sm-3 text-muted">Previously</h4>
                <div class="step step-dark">
                  <div class="step-item">
                    <div class="section-head">Withdrawn</div>
                    <h5><a href="/standard/4323.html">ISO/R 357:1963</a></h5>
                  </div>
                </div>
              </li>
            <li class="time-step">
              <h4 class="ms-sm-3 text-muted">Now</h4>

              <div class="step step-dark active">
                    <div class="section-head">Withdrawn</div>
                    <h5>ISO 131:1979</h5>
                  <a data-bs-toggle="collapse" role="button" aria-expanded="false" href="#stages" class="dropdown-toggle current-stage text-sm collapsed">Stage: <strong>95.99</strong></a>
            </div>
              <ul class="stages collapse" id="stages">
                <li class="dropdown alert-info">

                      <a href="javascript:void(0)"  role="button" aria-haspopup="true" aria-expanded="false">
                        <span class="stage-code">00</span>
                        <div class="stage-title">Preliminary</div>
                      </a>

                      </li>
                  <li class="dropdown alert-info">

                      <a href="javascript:void(0)"  role="button" aria-haspopup="true" aria-expanded="false">
                        <span class="stage-code">10</span>
                        <div class="stage-title">Proposal</div>
                      </a>

                      </li>
                  <li class="dropdown alert-info">

                      <a href="javascript:void(0)"  role="button" aria-haspopup="true" aria-expanded="false">
                        <span class="stage-code">20</span>
                        <div class="stage-title">Preparatory</div>
                      </a>

                      </li>
                  <li class="dropdown alert-info">

                      <a href="javascript:void(0)" class="dropdown-toggle" data-bs-display="static" data-bs-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                        <span class="stage-code">30</span>
                        <div class="stage-title">Committee</div>
                      </a>

                      <ul class="dropdown-menu">
                            <li >
                            <a href="/stage-codes.html#30_00">
                              <span class="stage-code">30.00</span>
                              <span class="stage-date">1978-07-01</span>
                              <div class="stage-title">
                                Committee draft (CD) registered</div>
                            </a>
                          </li></ul>
                      </li>
                  <li class="dropdown alert-info">

                      <a href="javascript:void(0)"  role="button" aria-haspopup="true" aria-expanded="false">
                        <span class="stage-code">40</span>
                        <div class="stage-title">Enquiry</div>
                      </a>

                      </li>
                  <li class="dropdown alert-info">

                      <a href="javascript:void(0)" class="dropdown-toggle" data-bs-display="static" data-bs-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                        <span class="stage-code">50</span>
                        <div class="stage-title">Approval</div>
                      </a>

                      <ul class="dropdown-menu">
                            <li >
                            <a href="/stage-codes.html#50_00">
                              <span class="stage-code">50.00</span>
                              <span class="stage-date">1979-03-01</span>
                              <div class="stage-title">
                                Final text received or FDIS registered for formal approval</div>
                            </a>
                          </li><li >
                            <a href="/stage-codes.html#50_20">
                              <span class="stage-code">50.20</span>
                              <span class="stage-date">1979-08-01</span>
                              <div class="stage-title">
                                Proof sent to secretariat or FDIS ballot initiated: 8 weeks</div>
                            </a>
                          </li><li >
                            <a href="/stage-codes.html#50_60">
                              <span class="stage-code">50.60</span>
                              <span class="stage-date">1979-08-01</span>
                              <div class="stage-title">
                                Close of voting. Proof returned by secretariat</div>
                            </a>
                          </li></ul>
                      </li>
                  <li class="dropdown alert-success">

                      <a href="javascript:void(0)" class="dropdown-toggle" data-bs-display="static" data-bs-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                        <span class="stage-code">60</span>
                        <div class="stage-title">Publication</div>
                      </a>

                      <ul class="dropdown-menu">
                            <li >
                            <a href="/stage-codes.html#60_60">
                              <span class="stage-code">60.60</span>
                              <span class="stage-date">1979-11-01</span>
                              <div class="stage-title">
                                International Standard published</div>
                            </a>
                          </li></ul>
                      </li>
                  <li class="dropdown alert-success">

                      <a href="javascript:void(0)" class="dropdown-toggle" data-bs-display="static" data-bs-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                        <span class="stage-code">90</span>
                        <div class="stage-title">Review</div>
                      </a>

                      <ul class="dropdown-menu">
                            <li  class='list-separation'>
                            <a href="/stage-codes.html#90_20">
                              <span class="stage-code">90.20</span>
                              <span class="stage-date">1993-11-30</span>
                              <div class="stage-title">
                                International Standard under systematic review</div>
                            </a>
                          </li><li >
                            <a href="/stage-codes.html#90_60">
                              <span class="stage-code">90.60</span>
                              <span class="stage-date">1994-07-15</span>
                              <div class="stage-title">
                                Close of review</div>
                            </a>
                          </li><li >
                            <a href="/stage-codes.html#90_99">
                              <span class="stage-code">90.99</span>
                              <span class="stage-date">1995-07-19</span>
                              <div class="stage-title">
                                Withdrawal of International Standard proposed by TC or SC</div>
                            </a>
                          </li></ul>
                      </li>
                  <li class="dropdown bg-dark active">

                      <a href="javascript:void(0)" class="dropdown-toggle" data-bs-display="static" data-bs-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                        <span class="stage-code">95</span>
                        <div class="stage-title">Withdrawal</div>
                      </a>

                      <ul class="dropdown-menu">
                            <li >
                            <a href="/stage-codes.html#95_20">
                              <span class="stage-code">95.20</span>
                              <span class="stage-date">1995-08-10</span>
                              <div class="stage-title">
                                Withdrawal ballot initiated</div>
                            </a>
                          </li><li >
                            <a href="/stage-codes.html#95_60">
                              <span class="stage-code">95.60</span>
                              <span class="stage-date">1995-11-08</span>
                              <div class="stage-title">
                                Close of voting</div>
                            </a>
                          </li><li class="active">
                            <a href="/stage-codes.html#95_99">
                              <span class="stage-code">95.99</span>
                              <span class="stage-date">1996-03-07</span>
                              <div class="stage-title">
                                Withdrawal of International Standard</div>
                            </a>
                          </li></ul>
                      </li>
                  </ul>

                  </li>
            </ul>
        </div>
      </div>
    </div>
  </div>
</section>
<div class="section text-center">
  <div class="container">
    <div class="row row-cols-1 row-cols-sm-2 row-cols-xl-3 g-4">
      <style>
    .list-sectors svg.isoicon { max-width: 75px; margin-bottom: 0;}
</style>
</div>
  </div>
</div>

<section class="bg-lightgray" id="contact">
  <div class="container">
    <div class="row">
      <div class="col-md-4">
        <h4>Got a question?</h4>

<p>Check out our <a href="/frequently-asked-questions-faqs.html" title="Frequently Asked Questions (FAQs)">FAQs</a></p></div>
      <div class="col-md-4">
        <div class="vcard contact no-figure clearfix" itemscope="" itemtype="http://schema.org/Person">
<div class="content-box no-image">
<div class="fn n"><span class="given-name" itemprop="givenName">Customer care</span></div>

<div class="tel" itemprop="telephone">+41 22 749 08 88</div>

<div class="email" itemprop="email"><a href="mailto:customerservice@iso.org">customerservice@iso.org</a></div>

<hr />
<div class="note">
<p class="small">Opening hours:<br />
Monday to Friday - 09:00-12:00, 14:00-17:00 (UTC+1)</p>
</div>
</div>
</div></div>
      <div class="col-md-4">
        </div>
    </div>
  </div>
</section><div class="nav-breadcrumb print-footer bg-black">
        <div class="container">
          <div class="row">
            <div class="col-sm-10 small">
              <!-- BREADCRUMB -->
              <ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="/home.html" title="Home page"><i class="bi-house" aria-hidden="true"></i></a></li>
    <li class="breadcrumb-item">
          <a href="/store.html">Store</a>
            </li>
      <li class="breadcrumb-item">
          <a href="/standards-catalogue/browse-by-ics.html" >Standards catalogue</a>
</li>
      <li class="breadcrumb-item">
          <a href="/standards-catalogue/browse-by-ics.html">ICS</a>
            </li>
      <li class="breadcrumb-item"><a href="/en/ics/17.html">17</a></li>
    <li class="breadcrumb-item"><a href="/en/ics/17.140.html">17.140</a></li>
    <li class="breadcrumb-item"><a href="/en/ics/17.140.01.html">17.140.01</a></li><li class="breadcrumb-item">ISO 131:1979</li></ol></div>
            <div class="col-sm-2 hidden-print text-end small mt-3 mt-sm-0">
              <a role="button" class="dropdown-toggle text-white collapsed" data-bs-toggle="collapse" href="#collapseSitemap" target="_self" aria-expanded="false" aria-controls="collapseSitemap">Sitemap</a>
            </div>
          </div>

          <div class="collapse border-top" id="collapseSitemap">
            <div class="row">
              <!-- SITEMAP -->
              <nav role="navigation" aria-label="Sitemap" class="sitemap-footer clearfix small" id="nav-sitemap"><ul role='menubar' class='list-inline-5 clearfix nav-level1' ><li role='menuitem' class=' hasChildren firstInLevel' ><a class='nav-link   '   title="Covering almost every product, process or service imaginable, ISO makes standards used everywhere."  href='/standards.html'>Standards</a><ul role='menubar' class='list-unstyled nav-level2' ><li role='menuitem' class=' noChildren firstInLevel' ><a class='nav-link   '   title="Whether you run a business, work for a company or government, or you are a consumer looking for goods and services that meet customer expectations: Find out what standards can do for you."  href='/benefits-of-standards.html'>Benefits</a></li><!-- close of list item level 2 --><li role='menuitem' class=' noChildren' ><a class='nav-link   '   title="Here you can discover some of the best-known and most widely-used standards, as well as those that address recently emerged challenges affecting us all.

"  href='/popular-standards.html'>Popular standards</a></li><!-- close of list item level 2 --><li role='menuitem' class=' noChildren' ><a class='nav-link   '   title="A set of processes that show your product, service or system meets the requirements of a standard."  href='/conformity-assessment.html'>Conformity assessment</a></li><!-- close of list item level 2 --><li role='menuitem' class=' noChildren lastInLevel' ><a class='nav-link   '   title="Organizations and companies looking to contribute to the SDGs will find that International Standards provide effective tools to help them rise to the challenge."  href='/sdgs.html'>SDGs</a></li><!-- close of list item level 2 --></ul><!-- close of container level 2 --></li><!-- close of list item level 1 --><li role='menuitem' class=' hasChildren' ><a class='nav-link   '   title="ISO brings together global experts to develop International Standards that help solve problems and drive innovation."  href='/about-us.html'>About us</a><ul role='menubar' class='list-unstyled nav-level2' ><li role='menuitem' class=' noChildren firstInLevel' ><a class='nav-link   '   title="Find out how we develop and publish international standards by bringing together more than 160 members and more than 45,000 experts"  href='/what-we-do.html'>What we do</a></li><!-- close of list item level 2 --><li role='menuitem' class=' noChildren' ><a class='nav-link   '    href='/structure.html'>Structure</a></li><!-- close of list item level 2 --><li role='menuitem' class=' noChildren' ><a class='nav-link   '   title="Representing the four corners of the world with one member per country, ISO is the International Organization for Standardization."  href='/members.html'>Members</a></li><!-- close of list item level 2 --><li role='menuitem' class=' noChildren lastInLevel' ><a class='nav-link   '   title="Making lives easier, safer and better. Our Strategy outlines our vision and our mission for the next 10 years and a set of goals and priorities to help us get there."  href='/strategy2030.html'>Strategy</a></li><!-- close of list item level 2 --></ul><!-- close of container level 2 --></li><!-- close of list item level 1 --><li role='menuitem' class=' hasChildren' ><a class='nav-link   '   title="Keep up to date with the latest in standardization or browse our rich archives"  href='/news.html'>News</a><ul role='menubar' class='list-unstyled nav-level2' ><li role='menuitem' class=' noChildren' ><a class='nav-link   '   title="Find out what's coming up and what you might have missed."  href='/events.html'>Events</a></li><!-- close of list item level 2 --><li role='menuitem' class=' noChildren' ><a class='nav-link   '    href='/media-kit.html'>Media kit</a></li><!-- close of list item level 2 --></ul><!-- close of container level 2 --></li><!-- close of list item level 1 --><li role='menuitem' class=' hasChildren' ><a class='nav-link   '   title="Find out how the ISO process bring together global experts to create standards that are chosen the world over."  href='/developing-standards.html'>Taking part</a><ul role='menubar' class='list-unstyled nav-level2' ><li role='menuitem' class=' noChildren firstInLevel' ><a class='nav-link   '   title="ISO has put together groups of experts that represent every sector imaginable from soaps to spacecraft, MP3 to coffee. In fact there are more than 250 technical committees. You can find out what they do here."  href='/who-develops-standards.html'>Who develops standards</a></li><!-- close of list item level 2 --><li role='menuitem' class=' noChildren' ><a class='nav-link   '   title="The different types of ISO publications."  href='/deliverables-all.html'>Deliverables</a></li><!-- close of list item level 2 --><li role='menuitem' class=' noChildren' ><a class='nav-link   '    href='/get-involved.html'>Get involved</a></li><!-- close of list item level 2 --><li role='menuitem' class=' noChildren' ><a class='nav-link   '   title="The ISO Climate Action Kit is a collection of case studies from around the world on how standards can be effectively used as a tool for sustainability."  href='/ClimateAction.html'>Climate action kit</a></li><!-- close of list item level 2 --><li role='menuitem' class=' noChildren lastInLevel' ><a class='nav-link   '   title="Resources to support the work of individuals involved in standards development. "  href='/resources.html'>Resources</a></li><!-- close of list item level 2 --></ul><!-- close of container level 2 --></li><!-- close of list item level 1 --><li role='menuitem' class=' hasChildren inPath  lastInLevel' ><a class='nav-link   '   title="Are you looking to buy International Standards, guidelines, collections and checklists? They're all right here, in the ISO Store."  href='/store.html'>Store</a><ul role='menubar' class='list-unstyled nav-level2' ><li role='menuitem' class=' noChildren inPath  active firstInLevel' ><a class='nav-link   '    href='/standards-catalogue/browse-by-ics.html'>Standards catalogue</a></li><!-- close of list item level 2 --><li role='menuitem' class=' noChildren' ><a class='nav-link   '   title="ISO publications give insights and guidance into specific applications and show how standards add value."  href='/publication-list.html'>Publications and products</a></li><!-- close of list item level 2 --></ul><!-- close of container level 2 --></li><!-- close of list item level 1 --></ul><!-- close of container level 1 --></nav></div>
          </div>
        </div>
      </div>
    </main>
    <footer role="contentinfo" aria-label="Footer" class="footer-iso footer-dark bg-dark">
      <div class="container">
        <div class="footer-links center-block">
          <!-- FOOTER LINKS -->
          <nav role="navigation" aria-label="Inline Navigation" class="" id=""><ul role='menubar' class='list-inline clearfix nav-level1' ><li role='menuitem' class=' noChildren firstInLevel' ><a class='nav-link   '    href='/iso-name-and-logo.html'>ISO name and logo</a></li><!-- close of list item level 1 --><li role='menuitem' class=' noChildren' ><a class='nav-link   '    href='/privacy.html'>Privacy Notice</a></li><!-- close of list item level 1 --><li role='menuitem' class=' noChildren' ><a class='nav-link   '    href='/copyright.html'>Copyright</a></li><!-- close of list item level 1 --><li role='menuitem' class=' noChildren' ><a class='nav-link   '    href='/cookies.html'>Cookie policy</a></li><!-- close of list item level 1 --><li role='menuitem' class=' noChildren' ><a class='nav-link   '    href='/working-with-iso.html'>Jobs</a></li><!-- close of list item level 1 --><li role='menuitem' class=' noChildren' ><a class='nav-link   '    href='/frequently-asked-questions-faqs.html'>FAQs</a></li><!-- close of list item level 1 --><li role='menuitem' class=' noChildren' ><a class='nav-link   '    href='/contact-iso.html'>Contact ISO</a></li><!-- close of list item level 1 --></ul><!-- close of container level 1 --></nav><div class="row       " >
<div class="col-md-6 offset-md-3 col-xl-4 offset-xl-4"><h2 class="h4 pt-3 pb-2" id="isoinsights">Sign up for email updates</h2><form method="POST" action="https://iso272.activehosted.com/proc.php" id="_form_23_" class="_form _form_23 _inline-form  _dark" novalidate>
  <input type="hidden" name="u" value="23" />
  <input type="hidden" name="f" value="23" />
  <input type="hidden" name="s" />
  <input type="hidden" name="c" value="0" />
  <input type="hidden" name="m" value="0" />
  <input type="hidden" name="act" value="sub" />
  <input type="hidden" name="v" value="2" />
  <input type="hidden" name="or" value="9417b9cd52ff6c742e176a370ed5442a" />

  <style>
      ._error {
          width: 100%;
          padding: 0.5em 1.25em;
          text-align: left;
      }
  </style>

  <div class="_form-content">
    <div class="input-group input-group-round mb-3">
      <input type="text" id="email" class="form-control" name="email" placeholder="Email" aria-label="Email" aria-describedby="_form_23_submit" required/>

      <button id="_form_23_submit" class="_submit btn btn-primary" type="submit">
        Subscribe</button>
    </div>
  </div>

    <div class="_form-thank-you mb-3" style="display:none;">
          <p><strong>Almost done!&nbsp;</strong><br />
You are only one step away from joining the ISO subscriber list. Please confirm your subscription by clicking on the email we&#39;ve just sent to you. You will not be registered until you confirm your subscription. If you can&#39;t find the email, kindly check your spam folder and/or the promotions tab (if you use Gmail).</p></div>
      </form>


<script type="text/javascript">
  window._show_thank_you = function(id, message, trackcmp_url, email) {
    var form = document.getElementById('_form_' + id + '_'), thank_you = form.querySelector('._form-thank-you');
    form.querySelector('._form-content').style.display = 'none';
    // thank_you.innerHTML = message;
    thank_you.style.display = 'block';
    const vgoAlias = typeof visitorGlobalObjectAlias === 'undefined' ? 'vgo' : visitorGlobalObjectAlias;
    var visitorObject = window[vgoAlias];
    if (email && typeof visitorObject !== 'undefined') {
      visitorObject('setEmail', email);
      visitorObject('update');
    } else if (typeof(trackcmp_url) != 'undefined' && trackcmp_url) {
      // Site tracking URL to use after inline form submission.
      _load_script(trackcmp_url);
    }
    if (typeof window._form_callback !== 'undefined') window._form_callback(id);
  };
  window._show_error = function(id, message, html) {
    var form = document.getElementById('_form_' + id + '_'), err = document.createElement('div'), button = form.querySelector('button'), old_error = form.querySelector('._form_error');
    if (old_error) old_error.parentNode.removeChild(old_error);
    err.innerHTML = message;
    err.className = '_error-inner _form_error _no_arrow';
    var wrapper = document.createElement('div');
    wrapper.className = '_form-inner';
    wrapper.appendChild(err);
    button.parentNode.insertBefore(wrapper, button);
    document.querySelector('[id^="_form"][id$="_submit"]').disabled = false;
    if (html) {
      var div = document.createElement('div');
      div.className = '_error-html';
      div.innerHTML = html;
      err.appendChild(div);
    }
  };
  window._load_script = function(url, callback) {
    var head = document.querySelector('head'), script = document.createElement('script'), r = false;
    script.type = 'text/javascript';
    script.charset = 'utf-8';
    script.src = url;
    if (callback) {
      script.onload = script.onreadystatechange = function() {
        if (!r && (!this.readyState || this.readyState == 'complete')) {
          r = true;
          callback();
        }
      };
    }
    head.appendChild(script);
  };
  (function() {
    if (window.location.search.search("excludeform") !== -1) return false;
    var getCookie = function(name) {
      var match = document.cookie.match(new RegExp('(^|; )' + name + '=([^;]+)'));
      return match ? match[2] : null;
    }
    var setCookie = function(name, value) {
      var now = new Date();
      var time = now.getTime();
      var expireTime = time + 1000 * 60 * 60 * 24 * 365;
      now.setTime(expireTime);
      document.cookie = name + '=' + value + '; expires=' + now + ';path=/; Secure; SameSite=Lax;';// cannot be HttpOnly
    }
    var addEvent = function(element, event, func) {
      if (element.addEventListener) {
        element.addEventListener(event, func);
      } else {
        var oldFunc = element['on' + event];
        element['on' + event] = function() {
          oldFunc.apply(this, arguments);
          func.apply(this, arguments);
        };
      }
    }
    var _removed = false;
    var form_to_submit = document.getElementById('_form_23_');
    var allInputs = form_to_submit.querySelectorAll('input, select, textarea'), tooltips = [], submitted = false;

    var getUrlParam = function(name) {
      var params = new URLSearchParams(window.location.search);
      return params.get(name) || false;
    };

    for (var i = 0; i < allInputs.length; i++) {
      var regexStr = "field\\[(\\d+)\\]";
      var results = new RegExp(regexStr).exec(allInputs[i].name);
      if (results != undefined) {
        allInputs[i].dataset.name = window.cfields[results[1]];
      } else {
        allInputs[i].dataset.name = allInputs[i].name;
      }
      var fieldVal = getUrlParam(allInputs[i].dataset.name);

      if (fieldVal) {
        if (allInputs[i].dataset.autofill === "false") {
          continue;
        }
        if (allInputs[i].type == "radio" || allInputs[i].type == "checkbox") {
          if (allInputs[i].value == fieldVal) {
            allInputs[i].checked = true;
          }
        } else {
          allInputs[i].value = fieldVal;
        }
      }
    }

    var remove_tooltips = function() {
      for (var i = 0; i < tooltips.length; i++) {
        tooltips[i].tip.parentNode.removeChild(tooltips[i].tip);
      }
      tooltips = [];
    };
    var remove_tooltip = function(elem) {
      for (var i = 0; i < tooltips.length; i++) {
        if (tooltips[i].elem === elem) {
          tooltips[i].tip.parentNode.removeChild(tooltips[i].tip);
          tooltips.splice(i, 1);
          return;
        }
      }
    };
    var create_tooltip = function(elem, text) {
      var tooltip = document.createElement('div'), arrow = document.createElement('div'), inner = document.createElement('div'), new_tooltip = {};
      if (elem.type != 'radio' && elem.type != 'checkbox') {
        tooltip.className = '_error text-sm text-muted text-start';
        arrow.className = '_error-arrow';
        inner.className = '_error-inner';
        inner.innerHTML = text;
        tooltip.appendChild(arrow);
        tooltip.appendChild(inner);
        elem.parentNode.appendChild(tooltip);
      } else {
        tooltip.className = '_error-inner _no_arrow';
        tooltip.innerHTML = text;
        elem.parentNode.insertBefore(tooltip, elem);
        new_tooltip.no_arrow = true;
      }
      new_tooltip.tip = tooltip;
      new_tooltip.elem = elem;
      tooltips.push(new_tooltip);
      return new_tooltip;
    };
    var resize_tooltip = function(tooltip) {
      var rect = tooltip.elem.getBoundingClientRect();
      var doc = document.documentElement, scrollPosition = rect.top - ((window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0));
      if (scrollPosition < 40) {
        tooltip.tip.className = tooltip.tip.className.replace(/ ?(_above|_below) ?/g, '') + ' _below';
      } else {
        tooltip.tip.className = tooltip.tip.className.replace(/ ?(_above|_below) ?/g, '') + ' _above';
      }
    };
    var resize_tooltips = function() {
      if (_removed) return;
      for (var i = 0; i < tooltips.length; i++) {
        if (!tooltips[i].no_arrow) resize_tooltip(tooltips[i]);
      }
    };
    var validate_field = function(elem, remove) {
      var tooltip = null, value = elem.value, no_error = true;
      remove ? remove_tooltip(elem) : false;
      if (elem.type != 'checkbox') elem.className = elem.className.replace(/ ?_has_error ?/g, '');
      if (elem.getAttribute('required') !== null) {
        if (elem.type == 'radio' || (elem.type == 'checkbox' && /any/.test(elem.className))) {
          var elems = form_to_submit.elements[elem.name];
          if (!(elems instanceof NodeList || elems instanceof HTMLCollection) || elems.length <= 1) {
            no_error = elem.checked;
          }
          else {
            no_error = false;
            for (var i = 0; i < elems.length; i++) {
              if (elems[i].checked) no_error = true;
            }
          }
          if (!no_error) {
            tooltip = create_tooltip(elem, "Please select an option.");
          }
        } else if (elem.type =='checkbox') {
          var elems = form_to_submit.elements[elem.name], found = false, err = [];
          no_error = true;
          for (var i = 0; i < elems.length; i++) {
            if (elems[i].getAttribute('required') === null) continue;
            if (!found && elems[i] !== elem) return true;
            found = true;
            elems[i].className = elems[i].className.replace(/ ?_has_error ?/g, '');
            if (!elems[i].checked) {
              no_error = false;
              elems[i].className = elems[i].className + ' _has_error';
              err.push("Checking %s is required".replace("%s", elems[i].value));
            }
          }
          if (!no_error) {
            tooltip = create_tooltip(elem, err.join('<br/>'));
          }
        } else if (elem.tagName == 'SELECT') {
          var selected = true;
          if (elem.multiple) {
            selected = false;
            for (var i = 0; i < elem.options.length; i++) {
              if (elem.options[i].selected) {
                selected = true;
                break;
              }
            }
          } else {
            for (var i = 0; i < elem.options.length; i++) {
              if (elem.options[i].selected && (!elem.options[i].value || (elem.options[i].value.match(/\n/g)))) {
                selected = false;
              }
            }
          }
          if (!selected) {
            elem.className = elem.className + ' _has_error';
            no_error = false;
            tooltip = create_tooltip(elem, "Please select an option.");
          }
        } else if (value === undefined || value === null || value === '') {
          elem.className = elem.className + ' _has_error';
          no_error = false;
          tooltip = create_tooltip(elem, "This field is required");
        }
      }
      if (no_error && (elem.id == 'field[]' || elem.id == 'ca[11][v]')) {
        if (elem.className.includes('phone-input-error')) {
          elem.className = elem.className + ' _has_error';
          no_error = false;
        }
      }
      if (no_error && elem.name == 'email') {
        if (!value.match(/^[\+_a-z0-9-'&=]+(\.[\+_a-z0-9-']+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,})$/i)) {
          elem.className = elem.className + ' _has_error';
          no_error = false;
          tooltip = create_tooltip(elem, 'Please enter a valid email address');
        }
      }
      if (no_error && /date_field/.test(elem.className)) {
        if (!value.match(/^\d\d\d\d-\d\d-\d\d$/)) {
          elem.className = elem.className + ' _has_error';
          no_error = false;
          tooltip = create_tooltip(elem, "Enter a valid date.");
        }
      }
      tooltip ? resize_tooltip(tooltip) : false;
      return no_error;
    };
    var needs_validate = function(el) {
      if(el.getAttribute('required') !== null){
        return true
      }
      if(el.name === 'email' && el.value !== ""){
        return true
      }

      if((el.id == 'field[]' || el.id == 'ca[11][v]') && el.className.includes('phone-input-error')){
        return true
      }

      return false
    };
    var validate_form = function(e) {
      var err = form_to_submit.querySelector('._form_error'), no_error = true;
      if (!submitted) {
        submitted = true;
        for (var i = 0, len = allInputs.length; i < len; i++) {
          var input = allInputs[i];
          if (needs_validate(input)) {
            if (input.type == 'tel') {
              addEvent(input, 'blur', function() {
                this.value = this.value.trim();
                validate_field(this, true);
              });
            }
            if (input.type == 'text' || input.type == 'number' || input.type == 'time') {
              addEvent(input, 'blur', function() {
                this.value = this.value.trim();
                validate_field(this, true);
              });
              addEvent(input, 'input', function() {
                validate_field(this, true);
              });
            } else if (input.type == 'radio' || input.type == 'checkbox') {
              (function(el) {
                var radios = form_to_submit.elements[el.name];
                for (var i = 0; i < radios.length; i++) {
                  addEvent(radios[i], 'click', function() {
                    validate_field(el, true);
                  });
                }
              })(input);
            } else if (input.tagName == 'SELECT') {
              addEvent(input, 'change', function() {
                validate_field(this, true);
              });
            } else if (input.type == 'textarea'){
              addEvent(input, 'input', function() {
                validate_field(this, true);
              });
            }
          }
        }
      }
      remove_tooltips();
      for (var i = 0, len = allInputs.length; i < len; i++) {
        var elem = allInputs[i];
        if (needs_validate(elem)) {
          if (elem.tagName.toLowerCase() !== "select") {
            elem.value = elem.value.trim();
          }
          validate_field(elem) ? true : no_error = false;
        }
      }
      if (!no_error && e) {
        e.preventDefault();
      }
      resize_tooltips();
      return no_error;
    };
    addEvent(window, 'resize', resize_tooltips);
    addEvent(window, 'scroll', resize_tooltips);

    var hidePhoneInputError = function(inputId) {
      var errorMessage =  document.getElementById("error-msg-" + inputId);
      var input = document.getElementById(inputId);
      errorMessage.classList.remove("phone-error");
      errorMessage.classList.add("phone-error-hidden");
      input.classList.remove("phone-input-error");
    };

    var initializePhoneInput = function(input, defaultCountry) {
      return window.intlTelInput(input, {
        utilsScript: "https://unpkg.com/intl-tel-input@17.0.18/build/js/utils.js",
        autoHideDialCode: false,
        separateDialCode: true,
        initialCountry: defaultCountry,
        preferredCountries: []
      });
    }

    var setPhoneInputEventListeners = function(inputId, input, iti) {
      input.addEventListener('blur', function() {
        var errorMessage = document.getElementById("error-msg-" + inputId);
        if (input.value.trim()) {
          if (iti.isValidNumber()) {
            iti.setNumber(iti.getNumber());
            if (errorMessage.classList.contains("phone-error")){
              hidePhoneInputError(inputId);
            }
          } else {
            showPhoneInputError(inputId)
          }
        } else {
          if (errorMessage.classList.contains("phone-error")){
            hidePhoneInputError(inputId);
          }
        }
      });

      input.addEventListener("countrychange", function() {
        iti.setNumber('');
      });

      input.addEventListener("keydown", function(e) {
        var charCode = (e.which) ? e.which : e.keyCode;
        if (charCode > 31 && (charCode < 48 || charCode > 57) && charCode !== 8) {
          e.preventDefault();
        }
      });
    };

    var showPhoneInputError = function(inputId) {
      var errorMessage =  document.getElementById("error-msg-" + inputId);
      var input = document.getElementById(inputId);
      errorMessage.classList.add("phone-error");
      errorMessage.classList.remove("phone-error-hidden");
      input.classList.add("phone-input-error");
    };


    var _form_serialize = function(form){if(!form||form.nodeName!=="FORM"){return }var i,j,q=[];for(i=0;i<form.elements.length;i++){if(form.elements[i].name===""){continue}switch(form.elements[i].nodeName){case"INPUT":switch(form.elements[i].type){case"tel":q.push(form.elements[i].name+"="+encodeURIComponent(form.elements[i].previousSibling.querySelector('div.iti__selected-dial-code').innerText)+encodeURIComponent(" ")+encodeURIComponent(form.elements[i].value));break;case"text":case"number":case"date":case"time":case"hidden":case"password":case"button":case"reset":case"submit":q.push(form.elements[i].name+"="+encodeURIComponent(form.elements[i].value));break;case"checkbox":case"radio":if(form.elements[i].checked){q.push(form.elements[i].name+"="+encodeURIComponent(form.elements[i].value))}break;case"file":break}break;case"TEXTAREA":q.push(form.elements[i].name+"="+encodeURIComponent(form.elements[i].value));break;case"SELECT":switch(form.elements[i].type){case"select-one":q.push(form.elements[i].name+"="+encodeURIComponent(form.elements[i].value));break;case"select-multiple":for(j=0;j<form.elements[i].options.length;j++){if(form.elements[i].options[j].selected){q.push(form.elements[i].name+"="+encodeURIComponent(form.elements[i].options[j].value))}}break}break;case"BUTTON":switch(form.elements[i].type){case"reset":case"submit":case"button":q.push(form.elements[i].name+"="+encodeURIComponent(form.elements[i].value));break}break}}return q.join("&")};
    var form_submit = function(e) {
      e.preventDefault();
      if (validate_form()) {
        // use this trick to get the submit button & disable it using plain javascript
        document.querySelector('#_form_23_submit').disabled = true;
        var serialized = _form_serialize(document.getElementById('_form_23_')).replace(/%0A/g, '\\n');
        var err = form_to_submit.querySelector('._form_error');
        err ? err.parentNode.removeChild(err) : false;
        _load_script('https://iso272.activehosted.com/proc.php?' + serialized + '&jsonp=true');
      }
      return false;
    };
    addEvent(form_to_submit, 'submit', form_submit);
  })();

</script><p class="text-xs">To learn how your data will be used, please see our <a href="/privacy.html" title="privacy-and-copyright">privacy notice</a>.</p></div></div></div>
        <div class="footer-social clearfix">
          <ul itemscope itemtype="https://schema.org/Organization">
            <link itemprop="url" href="https://www.iso.org/">
            <li><a itemprop="sameAs" target="_blank" rel="noopener" href="https://www.linkedin.com/company/isostandards" title="Linkedin"><i class="bi-linkedin"></i></a></li>
            <li><a itemprop="sameAs" target="_blank" rel="noopener" href="https://twitter.com/isostandards" title="Twitter"><i class="bi-twitter"></i></a></li>
            <li><a itemprop="sameAs" target="_blank" rel="noopener" href="https://www.facebook.com/isostandards" title="Facebook"><i class="bi-facebook"></i></a></li>
            <li><a itemprop="sameAs" target="_blank" rel="noopener" href="https://www.youtube.com/user/PlanetISO" title="YouTube"><i class="bi-youtube"></i></a></li>
            <li><a itemprop="sameAs" target="_blank" rel="noopener" href="https://www.instagram.com/isostandards" title="Instagram"><i class="bi-instagram"></i></a></li>
          </ul>
        </div>
        <p class="display-5 opacity-100">Making lives <strong><em>easier</em></strong>, <strong><em>safer</em></strong> and <strong><em>better</em></strong>.</p>
        <div class="row">
          <div class="col-md-8 col-md-offset-2 pull-left">
            <p class="text-xs">We are committed to ensuring that our website is accessible to everyone. If you have any questions or suggestions regarding the accessibility of this site, please <a href="mailto:webmaster@iso.org?subject=Accessibility" style="white-space: nowrap">contact us</a>.</p>
            <p class="text-sm"><a href="#copyright" target="_self" data-bs-toggle="collapse" aria-expanded="false" aria-controls="copyright">© All Rights Reserved</a> <span id="copyright" class="collapse">All ISO publications and materials are protected by copyright and are subject to the user’s acceptance of ISO’s conditions of copyright. Any use, including reproduction requires our written permission. All copyright requests should be addressed to <a href="mailto:copyright@iso.org">copyright@iso.org</a>.</span></p>
          </div>
        </div>
      </div>
      <div class="topbar">
        <div class="topbar-content">
          <a class="logo isologo logo-xs theme-red poweredby page-scroll logo-scrollTop" href="#page-top" title="Scroll to top"></a>
          <div class="poweredby-txt">Powered by</div>
        </div>
      </div>
    </footer>
    </body>
</html>
  recorded_at: Mon, 25 Sep 2023 08:15:22 GMT
recorded_with: VCR 6.1.0
