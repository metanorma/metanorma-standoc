---
http_interactions:
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 131","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.2.5), Ruby (3.1.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 26 Sep 2022 09:21:04 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '4'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 26 Sep 2022 09:21:04 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/00/39/3944.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=8DA35E61D9F2D75CB251F9057547019A; Path=/; Secure; HttpOnly
      Location:
      - "/standard/3944.html"
      Content-Length:
      - '0'
      Date:
      - Mon, 26 Sep 2022 09:21:09 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Mon, 26 Sep 2022 09:21:10 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/3944.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=B0840DE5422347E3F9C86A78520ACC50; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Mon, 26 Sep 2022 09:21:11 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 26 Sep 2022 09:21:11 GMT
recorded_with: VCR 6.1.0
