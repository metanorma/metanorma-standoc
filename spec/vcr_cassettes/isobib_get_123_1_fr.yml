---
http_interactions:
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 123","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.2), Ruby (3.2.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 19 Oct 2023 12:32:51 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 19 Oct 2023 12:32:51 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 123","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.2), Ruby (3.2.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 19 Oct 2023 12:32:51 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '2'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 19 Oct 2023 12:32:52 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/02/32/23281.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=C6E1F3FE92FD4D7A66E8AF2EE5525EB1; Path=/; Secure; HttpOnly
      Location:
      - "/standard/23281.html"
      Content-Length:
      - '0'
      Date:
      - Thu, 19 Oct 2023 12:33:08 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Thu, 19 Oct 2023 12:33:09 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/02/32/23281.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=696A1E49568DC2070BD142ADE2C4435B; Path=/; Secure; HttpOnly
      Location:
      - "/standard/23281.html"
      Content-Length:
      - '0'
      Date:
      - Thu, 19 Oct 2023 12:33:09 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Thu, 19 Oct 2023 12:33:10 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/23281.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=9B97463DDBF0290CC1C350CE50D1C2CB; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Thu, 19 Oct 2023 12:33:10 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KICA8aGVhZD48bGluayByZWw9ImNhbm9uaWNhbCIgaHJlZj0iaHR0cHM6Ly93d3cuaXNvLm9yZy9zdGFuZGFyZC8yMzI4MS5odG1sIiAvPgo8bGluayByZWw9ImFsdGVybmF0ZSIgaHJlZmxhbmc9ImZyIiBocmVmPSJodHRwczovL3d3dy5pc28ub3JnL2ZyL3N0YW5kYXJkLzIzMjgxLmh0bWwiIC8+CiAgICA8c2NyaXB0PgogICAgICBkYXRhTGF5ZXIgPSBbewogICAgICAgICdwYWdlVHlwZSc6ICdpdHM6c3RhbmRhcmQnLAogICAgICAgICdwYWdlTGFuZ3VhZ2UnOiAnZW4nCiAgICAgIH1dOwogICAgPC9zY3JpcHQ+CgogICAgPHN0eWxlPgovKiBFYXJseSBydWxlcyB0byBtaXRpZ2F0ZSBDTFMgKi8KLm5hdi11dGlsaXR5IHsgcGFkZGluZzogNXB4OyB6LWluZGV4OiAxMDI0OyBwb3NpdGlvbjogcmVsYXRpdmU7IH0KLnRleHQtc20geyBmb250LXNpemU6IC44NzVlbTsgfQoubmF2LXV0aWxpdHkgbGkubmF2LWl0ZW0gYS5uYXYtbGluayB7IHBhZGRpbmc6IDA7IHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfQouZHJvcGRvd24tdG9nZ2xlOjphZnRlciB7IGZvbnQtc2l6ZTogLjc1ZW07IHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTsgfQoubG9nby5pc29sb2dvLmxvZ28tc20geyBoZWlnaHQ6IDUwcHg7IHdpZHRoOiA1MHB4OyB9Ci5uYXYtaXNvIC5uYXZiYXItdG9nZ2xlciB7IG1hcmdpbi1sZWZ0OiAwLjVyZW07IG9yZGVyOiA0OyB9Ci5uYXZiYXItdG9nZ2xlci1pY29uLWFuaW1hdGVkIHsgd2lkdGg6IDIwcHg7IGhlaWdodDogMTVweDsgcG9zaXRpb246IHJlbGF0aXZlOyBtYXJnaW46IDA7IHRyYW5zZm9ybTogcm90YXRlKDApOyBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH0KLm5hdi1pc28gLm5hdmJhci1mb3JtIHsgb3JkZXI6IDI7IGZsZXg6IDE7IH0KLm5hdmJhci1mb3JtIHsgbWFyZ2luLWxlZnQ6IDAuNXJlbTsgfQouaGVpZ2h0LTMwMCB7IGhlaWdodDogMzAwcHg7IH0Kc2VjdGlvbi5zZWN0aW9uLW1kIHsgcGFkZGluZy10b3A6IDMuNzVyZW07IHBhZGRpbmctYm90dG9tOiAzLjc1cmVtOyB9Ci5uYXYtcmVsYXRpdmVzIC5uYXYtY2hpbGRyZW4sIC5uYXYtcmVsYXRpdmVzIC5zZWN0aW9uLWhlYWQgeyBmb250LXNpemU6IGNhbGMoMS4yNTVyZW0gKyAuMDZ2dyk7IH0KLnByZXZpb3VzIGE6OmJlZm9yZSwgLnNlY3Rpb24tYmFjayBhOjpiZWZvcmUgeyB2ZXJ0aWNhbC1hbGlnbjogYm90dG9tOyBwYWRkaW5nLXJpZ2h0OiAuM2VtOyB0cmFuc2l0aW9uOiBhbGwgMDsgfQpAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjUwMHB4KSB7IC5zZWN0aW9uLWJhY2sgeyBmbGV4LXdyYXA6IG5vd3JhcDsgb3ZlcmZsb3cteDogaGlkZGVuOyB9IC5zZWN0aW9uLWJhY2sgPiBhOm5vdCg6Zmlyc3Qtb2YtdHlwZSk6bm90KDpsYXN0LW9mLXR5cGUpIHsgZGlzcGxheTogbm9uZTsgfSAuaGVhZGluZy1jb25kZW5zZWQgPiBoMSB7IGZvbnQtc2l6ZTogMzEuNjU4OHB4OyBsaW5lLWhlaWdodDogMzkuNTczNXB4OyB9IC5oZWFkaW5nLWNvbmRlbnNlZCA+IGgyIHsgZm9udC1zaXplOiAyNi4xNzEzcHg7IGxpbmUtaGVpZ2h0OiAzMi43MTQxcHg7IH0gfQpAbWVkaWEgKG1heC13aWR0aDogMTE5OS45OHB4KSB7IHNlY3Rpb24uc2VjdGlvbi1uYXZpZ2F0aW9uIHsgcGFkZGluZy10b3A6IDEuODc1cmVtOyB9IH0KPC9zdHlsZT4KPCEtLSBPbmVUcnVzdCBDb29raWVzIENvbnNlbnQgTm90aWNlIHN0YXJ0IGZvciB3d3cuaXNvLm9yZyAtLT4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly9jZG4uY29va2llbGF3Lm9yZy9jb25zZW50LzAyMTdiYTlhLTg5MzUtNDRkNi04NzJkLTFmMjIzMzA0ZTExNy9PdEF1dG9CbG9jay5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG4uY29va2llbGF3Lm9yZy9zY3JpcHR0ZW1wbGF0ZXMvb3RTREtTdHViLmpzIiBkYXRhLWRvY3VtZW50LWxhbmd1YWdlPSJ0cnVlIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGNoYXJzZXQ9IlVURi04IiBkYXRhLWRvbWFpbi1zY3JpcHQ9IjAyMTdiYTlhLTg5MzUtNDRkNi04NzJkLTFmMjIzMzA0ZTExNyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+Ci8vIGZ1bmN0aW9uIHRvIHB1bGwgY29va2llIHZhbHVlCmZ1bmN0aW9uIGdldENvb2tpZShuYW1lKSB7CiAgICB2YXIgdmFsdWUgPSAiOyAiICsgZG9jdW1lbnQuY29va2llOwogICAgdmFyIHBhcnRzID0gdmFsdWUuc3BsaXQoIjsgIiArIG5hbWUgKyAiPSIpOwogICAgaWYgKHBhcnRzLmxlbmd0aCA9PSAyKSByZXR1cm4gcGFydHMucG9wKCkuc3BsaXQoIjsiKS5zaGlmdCgpOwp9CmZ1bmN0aW9uIE9wdGFub25XcmFwcGVyKCkgewogICAgY29uc29sZS5sb2coIk9wdGFub25XcmFwcGVyIGNhbGxlZCIpOwogICAgdmFyIE9BQkNjb29raWVOYW1lID0gIk9wdGFub25BbGVydEJveENsb3NlZCI7CiAgICB2YXIgYmFubmVyQWNjZXB0QnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm9uZXRydXN0LWFjY2VwdC1idG4taGFuZGxlciIpOwogICAgdmFyIHBjQWxsb3dBbGxCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYWNjZXB0LXJlY29tbWVuZGVkLWJ0bi1oYW5kbGVyIik7CiAgICB2YXIgcGNTYXZlQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgic2F2ZS1wcmVmZXJlbmNlLWJ0bi1oYW5kbGVyIG9uZXRydXN0LWNsb3NlLWJ0bi1oYW5kbGVyIilbMF07CiAgICB2YXIgT0FCQ2Nvb2tpZSA9IGdldENvb2tpZShPQUJDY29va2llTmFtZSk7CiAgIAogICAgLy8gSUYgbG9naWMgbmVlZGVkIGhlcmUgYmVjYXVzZSBvdC1iYW5uZXItc2RrIERJViBpcyBub3QgaW5qZWN0ZWQgb24gcGFnZSBsb2FkcyBpZiBiYW5uZXIgaXMgbm90IGV4cG9zZWQKICAgIGlmICghT0FCQ2Nvb2tpZSAmJiBiYW5uZXJBY2NlcHRCdG4pIHsKICAgICAgICBiYW5uZXJBY2NlcHRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coIkFsbG93ZWQgYWxsIHZpYSBCYW5uZXIiKTsKICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7CiAgICAgICAgfSk7CiAgICB9CiAgICBpZiAocGNBbGxvd0FsbEJ0bikgewogICAgICAgIHBjQWxsb3dBbGxCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coIkFsbG93ZWQgYWxsIHZpYSBQcmVmZXJlbmNlIENlbnRlciIpOwogICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTsKICAgICAgICB9KTsKICAgIH0KICAgIGlmKHBjU2F2ZUJ0bil7CiAgICAgICAgcGNTYXZlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9PiB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJTZXQgY3VzdG9tIHNldHRpbmdzIHZpYSBQcmVmZXJlbmNlIENlbnRlciIpOwogICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTsKICAgICAgICB9LCAxMDAwKSAvL3F1aWNrIHRpbWVvdXQgc28gdGhhdCB0aGUgY29uc2VudCByZWNlaXB0IGNhbiBiZSBzZW50IGFuZCB0aGUgY29va2llIGNhbiBiZSB1cGRhdGVkCiAgICAgICAgfSk7CiAgICB9Cn0KPC9zY3JpcHQ+CjwhLS0gT25lVHJ1c3QgQ29va2llcyBDb25zZW50IE5vdGljZSBlbmQgZm9yIHd3dy5pc28ub3JnIC0tPgo8bWV0YSBuYW1lPSJnb29nbGUtc2l0ZS12ZXJpZmljYXRpb24iIGNvbnRlbnQ9Im1RdXFXUGJXcnVaZFFnWlI4UXdieE9XbmpqeGtjRml5SkxIV1ktY09PSGsiIC8+Cgo8IS0tIE1hdG9tbyBUYWcgTWFuYWdlciAtLT4KPHNjcmlwdCAgdHlwZT0idGV4dC9wbGFpbiIgY2xhc3M9Im9wdGFub24tY2F0ZWdvcnktQzAwMDIiPgp2YXIgX210bSA9IHdpbmRvdy5fbXRtID0gd2luZG93Ll9tdG0gfHwgW107Cl9tdG0ucHVzaCh7J210bS5zdGFydFRpbWUnOiAobmV3IERhdGUoKS5nZXRUaW1lKCkpLCAnZXZlbnQnOiAnbXRtLlN0YXJ0J30pOwp2YXIgZD1kb2N1bWVudCwgZz1kLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpLCBzPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdOwpnLmFzeW5jPXRydWU7IGcuc3JjPSdodHRwczovL2Nkbi5tYXRvbW8uY2xvdWQvaXNvLm1hdG9tby5jbG91ZC9jb250YWluZXJfZElOd1lLZXguanMnOyBzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGcscyk7Cjwvc2NyaXB0Pgo8IS0tIEVuZCBNYXRvbW8gVGFnIE1hbmFnZXIgLS0+CjxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSI+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiPgoKICAgIDx0aXRsZT4gSVNPIDEyMzoyMDAxIC0gUnViYmVyIGxhdGV4IOKAlCBTYW1wbGluZzwvdGl0bGU+CgogICAgPGxpbmsgcmVsPSJwcmVsb2FkIiBhcz0iZm9udCIgdHlwZT0iZm9udC93b2ZmMiIgaHJlZj0iL21vZHVsZXMvaXNvb3JnLXRlbXBsYXRlL2ZvbnRzL2ludGVyL0ludGVyLnZhci53b2ZmMj92PTMuMTkiIGNyb3Nzb3JpZ2luLz4KCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9tb2R1bGVzL2lzb29yZy10ZW1wbGF0ZS9jc3Mvd29vZC5ib290c3RyYXAubWluLmNzcyIgbWVkaWE9InNjcmVlbixwcmludCxoYW5kaGVsZCIgdHlwZT0idGV4dC9jc3MiLz4KICAgIDxsaW5rIHJlbD0icHJlbG9hZCIgaHJlZj0iL21vZHVsZXMvaXNvb3JnLXRlbXBsYXRlL2Nzcy93b29kLmlzby5taW4uY3NzIiBhcz0ic3R5bGUiIG9ubG9hZD0idGhpcy5vbmxvYWQ9bnVsbDt0aGlzLnJlbD0nc3R5bGVzaGVldCciPgoKICAgIAoKPCEtLSBzdGFydCBmYXZpY29ucyAtLT4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbi1wcmVjb21wb3NlZCIgaHJlZj0iL21vZHVsZXMvaXNvb3JnLXRlbXBsYXRlL2ltZy9pc28vZmF2aWNvbi9yZWQvYXBwbGUtdG91Y2gtaWNvbi0xNTJ4MTUyLXByZWNvbXBvc2VkLnBuZyI+CiAgICA8bGluayByZWw9InNob3J0Y3V0IGljb24iIGhyZWY9Ii9tb2R1bGVzL2lzb29yZy10ZW1wbGF0ZS9pbWcvaXNvL2Zhdmljb24vcmVkL2Zhdmljb24uaWNvIj4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tVGlsZUNvbG9yIiBjb250ZW50PSIjZWVlIj4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tVGlsZUltYWdlIiBjb250ZW50PSIvbW9kdWxlcy9pc29vcmctdGVtcGxhdGUvaW1nL2lzby9mYXZpY29uL3JlZC9tc3RpbGUtMTQ0eDE0NC5wbmciPgogICAgPCEtLSBlbmQgZmF2aWNvbnMgLS0+CgogICAgPG1ldGEgbmFtZT0idGhlbWUtY29sb3IiIGNvbnRlbnQ9IiMzMzMiPgoKICAKPHNjcmlwdCB0eXBlPSJhcHBsaWNhdGlvbi9qc29uIiBpZD0iamFoaWEtZGF0YS1jdHgiPnsiY29udGV4dFBhdGgiOiIiLCJsYW5nIjoiZW4iLCJ1aWxhbmciOiJlbiIsInNpdGVVdWlkIjoiNDM5MTQ2ZjgtNjc3ZS00ZGRlLWI2YzYtYjY5MmI3NTM0ZjUyIiwid2NhZyI6ZmFsc2UsImNrZUNmZyI6IiJ9PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0iYXBwbGljYXRpb24vanNvbiIgaWQ9ImphaGlhLWRhdGEtY2siPnsicGF0aCI6Ii9tb2R1bGVzL2NrZWRpdG9yL2phdmFzY3JpcHQvIiwibG5nIjoiZW5fVVMifTwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iL2phdmFzY3JpcHQvaW5pdEphaGlhQ29udGV4dC5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgaWQ9InN0YXRpY0Fzc2V0SmF2YXNjcmlwdDAiIHNyYz0iL21vZHVsZXMvaXNvb3JnLXRlbXBsYXRlL2phdmFzY3JpcHQvd29vZC5mdWxsLm1pbi5qcz8xNjk3NTI0Nzg5MzIxIiAgZGVmZXI+PC9zY3JpcHQ+CjxzY3JpcHQgaWQ9InN0YXRpY0Fzc2V0SmF2YXNjcmlwdDEiIHNyYz0iL21vZHVsZXMvaXNvb3JnLXRlbXBsYXRlL2phdmFzY3JpcHQvY3VzdG9tLmpzPzE2OTc1MjQ3ODkzMjEiICBkZWZlcj48L3NjcmlwdD4KPHN0eWxlPgogICAgICAgIG5hdltyb2xlPSJuYXZpZ2F0aW9uIl06aGFzKC50aWNrZXItLWxpdmUpIHsgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYnMtYnJhbmQpIWltcG9ydGFudDsgfQpuYXZbcm9sZT0ibmF2aWdhdGlvbiJdOmhhcygudGlja2VyLS1saXZlKSAgPiAuY29udGFpbmVyIHsgZ2FwOiAxcmVtOyB9Cm5hdltyb2xlPSJuYXZpZ2F0aW9uIl06aGFzKC50aWNrZXItLWxpdmUpICN1dGlsaXRpZXMgPiBsaTpub3QoI2xhbmctc3dpdGNoZXIpIHsgZGlzcGxheTogbm9uZSFpbXBvcnRhbnQ7IH0KLmNhcmQtZm9vdGVyOmhhcygudGlja2VyLS1saXZlKSB7IGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJzLWRhcmspIWltcG9ydGFudDsgY29sb3I6IHdoaXRlOyB9Ci5jYXJkLWZvb3RlcjpoYXMoLnRpY2tlci0tbGl2ZSkgYSB7IGNvbG9yOiB3aGl0ZTsgfQoudGlja2VyOmhhcygudGlja2VyLS1saXZlKSB7IHdoaXRlLXNwYWNlOiBub3JtYWw7IH0KLnRpY2tlci0tbGl2ZSAudGlja2VyX19pY29uIHsgYW5pbWF0aW9uOiBsaXZlIDFzIGluZmluaXRlOyB9CkBrZXlmcmFtZXMgbGl2ZSB7IDAlIHsgY29sb3I6IHRyYW5zcGFyZW50OyB9IDUwJSB7IGNvbG9yOiB3aGl0ZTsgfSAxMDAlIHsgY29sb3I6IHRyYW5zcGFyZW50OyB9IH0KPC9zdHlsZT4KICAgIAo8c2NyaXB0IHNyYz0iL21vZHVsZXMvaXNvLWphaGlhLXNlcnZpY2UtbW9kdWxlL2phdmFzY3JpcHQvY2F0YWxvZ3VlLmpzIiBkZWZlciA+PC9zY3JpcHQ+Cgo8bWV0YSBuYW1lPSJjYXRlZ29yeSIgY29udGVudD0icCIgLz4KICA8bWV0YSBuYW1lPSJwdWJkYXRlIiBjb250ZW50PSIyMDIxMDYwNyIgLz4KICAKPCEtLSBUd2l0dGVyIENhcmQgZGF0YSAtLT4KICA8bWV0YSBuYW1lPSJ0d2l0dGVyOnNpdGUiIGNvbnRlbnQ9IkBpc29zdGFuZGFyZHMiIC8+CgogIDwhLS0gT3BlbiBHcmFwaCBkYXRhIC0tPgogIDxtZXRhIHByb3BlcnR5PSJvZzpzaXRlX25hbWUiIGNvbnRlbnQ9IklTTyIgLz4KICA8bWV0YSBwcm9wZXJ0eT0ib2c6dXJsIiBjb250ZW50PSJodHRwczovL3d3dy5pc28ub3JnL3N0YW5kYXJkLzIzMjgxLmh0bWwiIC8+CiAgPG1ldGEgcHJvcGVydHk9Im9nOnR5cGUiIGNvbnRlbnQ9IndlYnNpdGUiIC8+CiAgPCEtLSBUaHVtYm5haWwgaW1hZ2UgKGZvciB0d2l0dGVyIGFuZCBPcGVuIEdyYXBoKSAtLT4KICAgIDxtZXRhIG5hbWU9InRodW1ibmFpbCIgY29udGVudD0iL21vZHVsZXMvaXNvLWphaGlhLXNlcnZpY2UtbW9kdWxlL2ltZy9pc28vaXNvLWxvZ28tcHJpbnQuZ2lmIiAvPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjpjYXJkIiBjb250ZW50PSJzdW1tYXJ5IiAvPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjppbWFnZSIgY29udGVudD0iL21vZHVsZXMvaXNvLWphaGlhLXNlcnZpY2UtbW9kdWxlL2ltZy9pc28vaXNvLWxvZ28tcHJpbnQuZ2lmIiAvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlIiBjb250ZW50PSIvbW9kdWxlcy9pc28tamFoaWEtc2VydmljZS1tb2R1bGUvaW1nL2lzby9pc28tbG9nby1wcmludC5naWYiIC8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2U6YWx0IiBjb250ZW50PSJJU08gbG9nbyIgLz4KICA8IS0tIFRpdGxlIChmb3IgdHdpdHRlciBhbmQgT3BlbiBHcmFwaCkgLS0+CiAgICA8bWV0YSBuYW1lPSJ0d2l0dGVyOnRpdGxlIiBjb250ZW50PSJJU08gMTIzOjIwMDEiIC8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dGl0bGUiIGNvbnRlbnQ9IklTTyAxMjM6MjAwMSIgLz4KICA8IS0tIERlc2NyaXB0aW9uIChmb3IgZ29vZ2xlLCB0d2l0dGVyIGFuZCBPcGVuIEdyYXBoKSAtLT4KICAgIDxtZXRhIG5hbWU9InR3aXR0ZXI6ZGVzY3JpcHRpb24iIGNvbnRlbnQ9IlJ1YmJlciBsYXRleCDigJQgU2FtcGxpbmciIC8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6ZGVzY3JpcHRpb24iIGNvbnRlbnQ9IlJ1YmJlciBsYXRleCDigJQgU2FtcGxpbmciIC8+CiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iUnViYmVyIGxhdGV4IOKAlCBTYW1wbGluZyIgLz4KICA8IS0tIEZhY2Vib29rIGFkbWlucyA6IExpb25lbCxNYXJpYSAtLT4KICA8bWV0YSBwcm9wZXJ0eT0iZmI6YWRtaW5zIiBjb250ZW50PSIxMDAwMDExMTYwNzk2NzYsMTAwMDAxNDQwMDAzMzA1IiAvPgoKICAKCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9tb2R1bGVzL0NzcmZTZXJ2bGV0Ij48L3NjcmlwdD4KPC9oZWFkPgoKICA8IS0tIFRvcGJhciB1dGlsaXR5IC0tPgogIDxib2R5IGNsYXNzPSJ0aGVtZS1yZWQgbGFuZy1lbiBpdHMtc3RhbmRhcmQgaXMtcHJvZCBpcy1saXZlIiBpZD0icGFnZS10b3AiPgogICAgPGEgY2xhc3M9InNraXAtbmF2aWdhdGlvbiBidG4gYnRuLWluZm8gdmlzdWFsbHktaGlkZGVuIHZpc3VhbGx5LWhpZGRlbi1mb2N1c2FibGUiIGhyZWY9IiNjb250ZW50Ij5Ta2lwIHRvIG1haW4gY29udGVudDwvYT4KICAgIDxuYXYgcm9sZT0ibmF2aWdhdGlvbiIgYXJpYS1sYWJlbD0iVXRpbGl0eSBOYXZpZ2F0aW9uIiBjbGFzcz0ibmF2LXV0aWxpdHkgbmF2YmFyLWV4cGFuZC1sZyB0ZXh0LXNtIG5hdmJhci1kYXJrIGJnLWRhcmtlcmdyYXkgdGV4dC1saWdodCI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciBkLWZsZXgganVzdGlmeS1jb250ZW50LWJldHdlZW4iPgogICAgICAgIDxkaXYgY2xhc3M9InRpY2tlciB0ZXh0LXRydW5jYXRlIGZsb2F0LXN0YXJ0Ij48L2Rpdj4KICAgICAgICA8dWwgY2xhc3M9Im5hdiBkLWZsZXgganVzdGlmeS1jb250ZW50LWVuZCBqdXN0aWZ5LWNvbnRlbnQtc20tYXJvdW5kIGp1c3RpZnktY29udGVudC1tZC1lbmQiIGlkPSJ1dGlsaXRpZXMiPgogICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBkLW5vbmUgZC1zbS1ibG9jayI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vbG9naW4uaXNvLm9yZyIgY2xhc3M9Im5hdi1saW5rIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiIHRpdGxlPSJJU08ncyBhcHBsaWNhdGlvbnMgcG9ydGFsIj48aSBjbGFzcz0iYmktZ3JpZC0zeDMtZ2FwLWZpbGwiPjwvaT4mbmJzcDtBcHBsaWNhdGlvbnM8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBkLW5vbmUgZC1zbS1ibG9jayI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmlzby5vcmcvb2JwL3VpL2VuLyIgY2xhc3M9Im5hdi1saW5rIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiIHRpdGxlPSJPbmxpbmUgQnJvd3NpbmcgUGxhdGZvcm0iPjxpIGNsYXNzPSJiaS1qb3VybmFsLXRleHQiPjwvaT4mbmJzcDtPQlA8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBkcm9wZG93biIgaWQ9Imxhbmctc3dpdGNoZXIiPgogIDxhIGlkPSJsYW5nLWRyb3Bkb3duIiBjbGFzcz0ibmF2LWxpbmsgZHJvcGRvd24tdG9nZ2xlIiBkYXRhLWJzLXRvZ2dsZT0iZHJvcGRvd24iIGhyZWY9IiMiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj5FbmdsaXNoPC9hPgogIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LWVuZCIgcm9sZT0ibWVudSIgYXJpYS1sYWJlbGxlZGJ5PSJsYW5nLWRyb3Bkb3duIj4KICAgIDxsaSBjbGFzcz0ibGFuZy1mciAiPjxhIGNsYXNzPSJkcm9wZG93bi1pdGVtICIgaHJlZj0iL2ZyL3N0YW5kYXJkLzIzMjgxLmh0bWwiPmZyYW7Dp2FpczwvYT48L2xpPjxsaSBjbGFzcz0ibGFuZy1ydSAiPjxhIGNsYXNzPSJkcm9wZG93bi1pdGVtICIgaHJlZj0iL3J1L3N0YW5kYXJkLzIzMjgxLmh0bWwiPtGA0YPRgdGB0LrQuNC5PC9hPjwvbGk+PC91bD4KPC9saT48L3VsPgogICAgICA8L2Rpdj4KICAgIDwvbmF2PgoKICAgIDwhLS0gSGVhZGVyIElTTy5PUkcgLS0+CiAgICA8aGVhZGVyIGNsYXNzPSJoZWFkZXItYm9vdHN0cmFwIHN0aWNreS10b3AiPgogICAgICA8IS0tIE1haW4gbmF2aWdhdGlvbiAtLT4KICAgICAgPG5hdiBjbGFzcz0ibmF2YmFyIG5hdi1pc28gbmF2YmFyLWV4cGFuZC1tZCBuYXZiYXItbGlnaHQgc2hhZG93LW1kIGJnLXdoaXRlIHRleHQtZGFyayI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgIDxhIGNsYXNzPSJsb2dvIGxvZ28tc3F1YXJlIGlzb2xvZ28gbG9nby1zbSIgaHJlZj0iL2hvbWUuaHRtbCIgdGl0bGU9IkludGVybmF0aW9uYWwgT3JnYW5pemF0aW9uIGZvciBTdGFuZGFyZGl6YXRpb24iIGFsdD0iSVNPIGxvZ28iPjwvYT4KICAgICAgICAgIDxkaXYgY2xhc3M9Imlzb2xvZ28tcHJpbnQiPjxpbWcgbG9hZGluZz0ibGF6eSIgZmV0Y2hwcmlvcml0eT0ibG93IiBzcmM9Ii9tb2R1bGVzL2lzb29yZy10ZW1wbGF0ZS9pbWcvaXNvL2lzby1sb2dvLXByaW50LmdpZiIgYWx0PSJJU08gbG9nbyBmb3IgcHJpbnQiLz48L2Rpdj4KICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tbGlnaHQgbmF2YmFyLXRvZ2dsZXIiIHR5cGU9ImJ1dHRvbiIgZGF0YS1icy10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLWJzLXRhcmdldD0iI21haW5OYXYiIGFyaWEtY29udHJvbHM9Im1haW5OYXYiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWxhYmVsPSJUb2dnbGUgbmF2aWdhdGlvbiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci10b2dnbGVyLWljb24tYW5pbWF0ZWQiPjxzcGFuPjwvc3Bhbj48c3Bhbj48L3NwYW4+PHNwYW4+PC9zcGFuPjxzcGFuPjwvc3Bhbj48L2Rpdj48c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuLXhzIj4mbmJzcDtNZW51PC9zcGFuPgogICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICA8IS0tIFRPUCBMRVZFTDEgTkFWSUdBVElPTiAtLT4KICAgICAgICAgIDxuYXYgcm9sZT0ibmF2aWdhdGlvbiIgYXJpYS1sYWJlbD0iTWFpbiBOYXZpZ2F0aW9uIiBjbGFzcz0ibmF2LW1lZ2FtZW51IGNvbGxhcHNlIG5hdmJhci1jb2xsYXBzZSIgaWQ9Im1haW5OYXYiPjx1bCByb2xlPSdtZW51YmFyJyBjbGFzcz0nbmF2YmFyLW5hdiBtZS1hdXRvIG1iLWxnLTAgcHMtMiBwZS0yIG5hdi1sZXZlbDEnID48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPSduYXYtaXRlbSBkcm9wZG93biBwb3NpdGlvbi1zdGF0aWMgbm9DaGlsZHJlbiBmaXJzdEluTGV2ZWwnID48YSBjbGFzcz0nbmF2LWxpbmsgZHJvcGRvd24tdG9nZ2xlIG1lZ2FtZW51LXRvZ2dsZSAgJyAgIHRpdGxlPSJDb3ZlcmluZyBhbG1vc3QgZXZlcnkgcHJvZHVjdCwgcHJvY2VzcyBvciBzZXJ2aWNlIGltYWdpbmFibGUsIElTTyBtYWtlcyBzdGFuZGFyZHMgdXNlZCBldmVyeXdoZXJlLiIgIGhyZWY9Jy9zdGFuZGFyZHMuaHRtbCc+U3RhbmRhcmRzPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMSAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPSduYXYtaXRlbSBkcm9wZG93biBwb3NpdGlvbi1zdGF0aWMgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayBkcm9wZG93bi10b2dnbGUgbWVnYW1lbnUtdG9nZ2xlICAnICAgdGl0bGU9IklTTyBicmluZ3MgdG9nZXRoZXIgZ2xvYmFsIGV4cGVydHMgdG8gZGV2ZWxvcCBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkcyB0aGF0IGhlbHAgc29sdmUgcHJvYmxlbXMgYW5kIGRyaXZlIGlubm92YXRpb24uIiAgaHJlZj0nL2Fib3V0LXVzLmh0bWwnPkFib3V0IHVzPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMSAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPSduYXYtaXRlbSBkcm9wZG93biBwb3NpdGlvbi1zdGF0aWMgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayBkcm9wZG93bi10b2dnbGUgbWVnYW1lbnUtdG9nZ2xlICAnICAgdGl0bGU9IktlZXAgdXAgdG8gZGF0ZSB3aXRoIHRoZSBsYXRlc3QgaW4gc3RhbmRhcmRpemF0aW9uIG9yIGJyb3dzZSBvdXIgcmljaCBhcmNoaXZlcyIgIGhyZWY9Jy9uZXdzLmh0bWwnPk5ld3M8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9J25hdi1pdGVtIGRyb3Bkb3duIHBvc2l0aW9uLXN0YXRpYyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rIGRyb3Bkb3duLXRvZ2dsZSBtZWdhbWVudS10b2dnbGUgICcgICB0aXRsZT0iRmluZCBvdXQgaG93IHRoZSBJU08gcHJvY2VzcyBicmluZyB0b2dldGhlciBnbG9iYWwgZXhwZXJ0cyB0byBjcmVhdGUgc3RhbmRhcmRzIHRoYXQgYXJlIGNob3NlbiB0aGUgd29ybGQgb3Zlci4iICBocmVmPScvZGV2ZWxvcGluZy1zdGFuZGFyZHMuaHRtbCc+VGFraW5nIHBhcnQ8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9J25hdi1pdGVtIGRyb3Bkb3duIHBvc2l0aW9uLXN0YXRpYyBub0NoaWxkcmVuIGluUGF0aCAgbGFzdEluTGV2ZWwnID48YSBjbGFzcz0nbmF2LWxpbmsgZHJvcGRvd24tdG9nZ2xlIG1lZ2FtZW51LXRvZ2dsZSAgJyAgIHRpdGxlPSJBcmUgeW91IGxvb2tpbmcgdG8gYnV5IEludGVybmF0aW9uYWwgU3RhbmRhcmRzLCBndWlkZWxpbmVzLCBjb2xsZWN0aW9ucyBhbmQgY2hlY2tsaXN0cz8gVGhleSdyZSBhbGwgcmlnaHQgaGVyZSwgaW4gdGhlIElTTyBTdG9yZS4iICBocmVmPScvc3RvcmUuaHRtbCc+U3RvcmU8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjwvdWw+PCEtLSBjbG9zZSBvZiBjb250YWluZXIgbGV2ZWwgMSAtLT48L25hdj48Zm9ybSBjbGFzcz0ibmF2YmFyLWZvcm0gZC1mbGV4IGlzb3NlYXJjaCBtcy1zbS0yIiByb2xlPSJzZWFyY2giIGlkPSJzaXRlU2VhcmNoIj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhpZGRlbiIgZGF0YS1zZWFyY2hwYWdldXJsPSIvc2VhcmNoLmh0bWwiPjwvc3Bhbj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAiPgogICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzZWFyY2giIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHBsYWNlaG9sZGVyPSJTZWFyY2giIGFyaWEtbGFiZWxsZWRieT0iaW5wdXQtc2VhcmNoIj4KICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJpbnB1dC1zZWFyY2giIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHR5cGU9InN1Ym1pdCI+PGkgY2xhc3M9ImJpLXNlYXJjaCB0ZXh0LW11dGVkIj48L2k+PHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+U2VhcmNoPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgIDxhIHJvbGU9ImJ1dHRvbiIgaWQ9InNob3BwaW5nQ2FydCIgY2xhc3M9ImJ0biBidG4tbGlnaHQgc2hvcHBpbmctY2FydC1saW5rIGJnLXdoaXRlIGJvcmRlci0wIHRleHQtbXV0ZWQgZC1ub25lIGQtbGctYmxvY2siIGhyZWY9Ii93ZWJzdG9yZS9zaG9wcGluZ2Jhc2tldD9tZW1iZXJJZD1JU08mZ3VpbGFuZz1lbiIgdGl0bGU9IlNob3BwaW5nIGNhcnQiIGFyaWEtbGFiZWw9IlNob3BwaW5nIGNhcnQiIHN0eWxlLT0iZGlzcGxheTpub25lOyI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJiaS1jYXJ0Ij48L2k+PHNwYW4gaWQ9ImNhcnRUZXh0IiBjbGFzcz0idmlzdWFsbHktaGlkZGVuLXhzIG1zLTEiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+IENhcnQ8L3NwYW4+CiAgICAgICAgICA8L2E+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbmF2PgoKICAgIDwvaGVhZGVyPgoKICAgIDwhLS0gTUFJTiBDT05URU5UIC0tPgogICAgPG1haW4gcm9sZT0ibWFpbiIgaWQ9ImNvbnRlbnQiIGNsYXNzPSJhY2VyIiBhcmlhLWxhYmVsPSJDb250ZW50IiB0YWJpbmRleD0iLTEiPgogICAgICAKCgo8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIiBpZD0iaW5kZXhSZWZlcmVuY2UiIGRhdGEtaW5kZXg9IjIzMjgxIC0gSVNPIDEyMzoyMDAxIC0gUnViYmVyIGxhdGV4IOKAlCBTYW1wbGluZyI+PC9zcGFuPgo8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIiBpZD0iaXRlbVJlZmVyZW5jZSI+SVNPIDEyMzoyMDAxPC9zcGFuPgo8ZGl2IGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL1Byb2R1Y3QiIGNsYXNzPSJpdHMtc3RhbmRhcmQtY29udGFpbmVyIiBpZD0iaXRzLXN0YW5kYXJkLTIzMjgxIj4KICA8bGluayBpdGVtcHJvcD0iaW1hZ2UiIGhyZWY9Ii9tb2R1bGVzL2lzb29yZy10ZW1wbGF0ZS9pbWcvaXNvL2lzby1sb2dvLXByaW50LmdpZiIgLz48c2VjdGlvbiBjbGFzcz0ic2VjdGlvbi1uYXZpZ2F0aW9uIGJnLWxpZ2h0Z3JheSI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC03Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9InZpc3VhbGx5LWhpZGRlbiIgaXRlbXByb3A9ImNhdGVnb3J5Ij5wPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iIGl0ZW1wcm9wPSJuYW1lIiBpZD0iZG9jUmVmIj5JU08gMTIzOjIwMDE8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9InZpc3VhbGx5LWhpZGRlbiIgaXRlbXByb3A9InByb2R1Y3RJRCIgaWQ9ImNzTnVtYmVyIj4yMzI4MTwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9InZpc3VhbGx5LWhpZGRlbiIgaXRlbXByb3A9ImJyYW5kIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9CcmFuZCI+CiAgICAgICAgICAgIDxkaXYgaXRlbXByb3A9ImxvZ28iIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL0ltYWdlT2JqZWN0Ij4KICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0idXJsIiBjb250ZW50PSIvbW9kdWxlcy9pc29vcmctdGVtcGxhdGUvaW1nL2lzby9pc28tbG9nby1wcmludC5naWYiLz4KICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0id2lkdGgiIGNvbnRlbnQ9IjI4MyI+CiAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9ImhlaWdodCIgY29udGVudD0iMjYxIj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJuYW1lIiBjb250ZW50PSJJU08gLSBJbnRlcm5hdGlvbmFsIE9yZ2FuaXphdGlvbiBmb3IgU3RhbmRhcmRpemF0aW9uIj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxuYXYgcm9sZT0ibmF2aWdhdGlvbiIgYXJpYS1sYWJlbD0iQ2hpbGRyZW4gTmF2aWdhdGlvbiIgY2xhc3M9ImhlYWRpbmctY29uZGVuc2VkIG5hdi1yZWxhdGl2ZXMiPgoKICA8ZGl2IGNsYXNzPSJzZWN0aW9uLWhlYWQgc2VjdGlvbi1iYWNrIj48L2Rpdj4KICA8aDE+SVNPIDEyMzoyMDAxPC9oMT4KICA8aDIgY2xhc3M9Im10LTAgIj5SdWJiZXIgbGF0ZXg8L2gyPjxoMz5TYW1wbGluZzwvaDM+PC9uYXY+PGRpdiBjbGFzcz0iZC1pbmxpbmUtYmxvY2sgbXQtNCBjYWxsb3V0IGNhbGxvdXQtc3VjY2VzcyI+CiAgICAgICAgICAgICAgU3RhdHVzJm5ic3A7OiZuYnNwOzxzdHJvbmcgY2xhc3M9InRleHQtc3VjY2VzcyI+UHVibGlzaGVkPC9zdHJvbmc+CgogICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIChVbmRlciByZXZpZXcpCiAgICAgICAgICAgICAgICAgIDxkaXYgcm9sZT0iYWxlcnQiPjxpIGNsYXNzPSJiaSBiaS1jaGVjay1jaXJjbGUtZmlsbCB0ZXh0LXN1Y2Nlc3MiPjwvaT4KICAgICAgICAgICAgICAgICAgICBUaGlzIHN0YW5kYXJkIHdhcyBsYXN0IHJldmlld2VkIGFuZCBjb25maXJtZWQgaW4mbmJzcDsyMDIxLgogICAgICAgICAgICAgICAgICAgIFRoZXJlZm9yZSB0aGlzIHZlcnNpb24gcmVtYWlucyBjdXJyZW50LjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgY29sLW1kLW9mZnNldC0xIj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgc3RvcmUtYm94IHByb2R1Y3QtYm94IHNoYWRvdyBtYi0wIiBpZD0ic3RvcmUtYm94Ij4KICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CjxkaXYgY2xhc3M9ImZpdC10by1ib3giPgogICAgICAgIDxzcGFuIGNsYXNzPSJsYW5ndWFnZS1wYXRoIHZpc3VhbGx5LWhpZGRlbiI+ZW48L3NwYW4+CiAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSBvcmRlclByb2R1Y3QgYWxpZ24tbWlkZGxlIj4KICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgIDx0cj4KICAgICAgICAgICAgPHRoPjwvdGg+CiAgICAgICAgICAgIDx0aD5Gb3JtYXQ8L3RoPgogICAgICAgICAgICA8dGggaWQ9Imxhbmd1YWdlIj5MYW5ndWFnZTwvdGg+CiAgICAgICAgICA8L3RyPgogICAgICAgICAgPC90aGVhZD4KICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgIDx0ciBjbGFzcz0iYWN0aXZlIj4KICAgICAgICAgICAgICA8dGQgY2xhc3M9InNlbGVjdGlvbiI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idHlwZSB2aXN1YWxseS1oaWRkZW4iPnN0ZDwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb3VudGVyIHZpc3VhbGx5LWhpZGRlbiI+MTwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwcmljZSB2aXN1YWxseS1oaWRkZW4iPjYxPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNob29zZUZvcm1hdCBhY3RpdmUiPjxpIGNsYXNzPSJiaSBiaS1jaGVjay1sZyI+PC9pPjwvc3Bhbj4KICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgIDx0ZCBpZD0iYmtpZm10XzEiPgogICAgICAgICAgICAgICAgUERGPC90ZD4KICAgICAgICAgICAgICA8dGQgY2xhc3M9Im9yZGVyTGFuZ3VhZ2UiIHN0eWxlPSJtaW4td2lkdGg6IDE0MHB4OyI+CiAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJia2lfMSIgYXJpYS1sYWJlbGxlZGJ5PSJsYW5ndWFnZSIgY2xhc3M9ImZvcm0tc2VsZWN0Ij4KICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMDF1YjAwMDAwMDI4SGlpQUFFfmEwNWIwMDAwMDA1V1YyUkFBV35hMGZiMDAwMDAwMGViRnJBQUl+YTBjYjAwMDAwMDFRZlVrQUFLIiBsYW5nPSJlbiIgc2VsZWN0ZWQ+CiAgICAgICAgICAgICAgICAgICAgICBFbmdsaXNoPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjAxdWIwMDAwMDAyOEhpaUFBRX5hMDViMDAwMDAwNVdWMlJBQVd+YTBmYjAwMDAwMDBlYlB5QUFJfmEwY2IwMDAwMDAxUWZWSEFBMCIgbGFuZz0iZnIiPgogICAgICAgICAgICAgICAgICAgICAgRnJlbmNoPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICA8dHIgY2xhc3M9IiI+CiAgICAgICAgICAgICAgPHRkIGNsYXNzPSJzZWxlY3Rpb24iPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InR5cGUgdmlzdWFsbHktaGlkZGVuIj5zdGQ8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY291bnRlciB2aXN1YWxseS1oaWRkZW4iPjI8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHJpY2UgdmlzdWFsbHktaGlkZGVuIj42MTwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaG9vc2VGb3JtYXQiPjxpIGNsYXNzPSJiaSBiaS1jaGVjay1sZyB2aXN1YWxseS1oaWRkZW4iPjwvaT48L3NwYW4+CiAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICA8dGQgaWQ9ImJraWZtdF8yIj4KICAgICAgICAgICAgICAgIFBhcGVyPC90ZD4KICAgICAgICAgICAgICA8dGQgY2xhc3M9Im9yZGVyTGFuZ3VhZ2UiIHN0eWxlPSJtaW4td2lkdGg6IDE0MHB4OyI+CiAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJia2lfMiIgZGlzYWJsZWQgYXJpYS1sYWJlbGxlZGJ5PSJsYW5ndWFnZSIgY2xhc3M9ImZvcm0tc2VsZWN0Ij4KICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMDF1YjAwMDAwMDI4SGlpQUFFfmEwNWIwMDAwMDA1V1YyV0FBV35hMGZiMDAwMDAwMGViUG9BQUl+YTBjYjAwMDAwMDFRZldxQUFLIiBsYW5nPSJlbiIgc2VsZWN0ZWQ+CiAgICAgICAgICAgICAgICAgICAgICBFbmdsaXNoPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjAxdWIwMDAwMDAyOEhpaUFBRX5hMDViMDAwMDAwNVdWMldBQVd+YTBmYjAwMDAwMDBlYlB0QUFJfmEwY2IwMDAwMDAxUWZTTEFBMCIgbGFuZz0iZnIiPgogICAgICAgICAgICAgICAgICAgICAgRnJlbmNoPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICA8L3Rib2R5PgogICAgICAgIDwvdGFibGU+CiAgICAgIDwvZGl2PgoKICAgICAgPGRpdiBjbGFzcz0iY2xlYXJmaXgiIGl0ZW1wcm9wPSJvZmZlcnMiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL09mZmVyIj4KICAgICAgICA8bGluayBpdGVtcHJvcD0idXJsIiBocmVmPSJodHRwczovL3d3dy5pc28ub3JnL3N0YW5kYXJkLzIzMjgxLmh0bWwiIC8+CiAgICAgICAgPG1ldGEgaXRlbXByb3A9ImF2YWlsYWJpbGl0eSIgY29udGVudD0iaHR0cHM6Ly9zY2hlbWEub3JnL0luU3RvY2siIC8+CiAgICAgICAgPHVsIGNsYXNzPSJsaXN0LWlubGluZSBvcmRlckJhc2tldCIgaWQ9ImJraWFuY2hvcl8xIj4KICAgICAgICAgIDxsaSBjbGFzcz0icHJpY2Ugb3JkZXIiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iY3VycmVuY3kiIGl0ZW1wcm9wPSJwcmljZUN1cnJlbmN5Ij5DSEY8L3NwYW4+PHNwYW4gY2xhc3M9ImFtb3VudCIgaWQ9InByb2R1Y3RQcmljZSIgaXRlbXByb3A9InByaWNlIj42MTwvc3Bhbj4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGk+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBidG4tbGciIGlkPSJzdGFuZGFyZC1idXkiIGRhdGEtYnMtdG9nZ2xlPSJtb2RhbCIgZGF0YS1icy10YXJnZXQ9IiNpc28tb3B0b3V0IiBvbmNsaWNrPSJqYXZhc2NyaXB0OmFkZFRvQmFza2V0KCcxJywgJ2VuJywgJ3N0ZCcpIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0iYmktY2FydCI+PC9pPiZuYnNwO0J1eTwvYnV0dG9uPgogICAgICAgICAgPC9saT4KICAgICAgICA8L3VsPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0idGV4dC14cyB0ZXh0LW11dGVkIHRleHQtY2VudGVyIj5Db252ZXJ0IFN3aXNzIGZyYW5jcyAoQ0hGKSB0byA8YSBpZD0iY29udmVydFByaWNlIiB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cueGUuY29tL2VuL2N1cnJlbmN5Y29udmVydGVyL2NvbnZlcnQvP0Ftb3VudD02MSZGcm9tPUNIRiZUbz1FVVIiPnlvdXIgY3VycmVuY3k8L2E+PC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9zZWN0aW9uPgogIDxzdmcgY2xhc3M9IndhdmUiIHByZXNlcnZlQXNwZWN0UmF0aW89Im5vbmUiIHZpZXdCb3g9IjAgMCAxNDQwIDk2IiBmaWxsPSJub25lIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciPjxwYXRoIGQ9Im0wIDk2IDgwLTUuM0MxNjAgODUgMzIwIDc1IDQ4MCA2NHMzMjAtMjEgNDgwLTIxLjNjMTYwIC4zIDMyMCAxMC4zIDQwMCAxNmw4MCA1LjNWMEgwdjk2WiI+PC9wYXRoPjwvc3ZnPgoKPHNlY3Rpb24gaWQ9InByb2R1Y3QtZGV0YWlscyI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC03Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiBhbGlnbi1pdGVtcy1jZW50ZXIiPjxoMj5BYnN0cmFjdDwvaDI+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgaXRlbXByb3A9ImRlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICA8cD48cD5UaGlzIEludGVybmF0aW9uYWwgU3RhbmRhcmQgc3BlY2lmaWVzIHByb2NlZHVyZXMgZm9yIHNhbXBsaW5nIG5hdHVyYWwgcnViYmVyIGxhdGV4IGNvbmNlbnRyYXRlIGFuZCBmb3Igc2FtcGxpbmcgc3ludGhldGljPC9wPgo8cD5ydWJiZXIgbGF0aWNlcyBhbmQgYXJ0aWZpY2lhbCBsYXRpY2VzLiBJdCBpcyBhbHNvIHN1aXRhYmxlIGZvciBzYW1wbGluZyBydWJiZXIgbGF0ZXggY29udGFpbmVkIGluIGRydW1zLCB0YW5rIGNhcnMgb3I8L3A+CjxwPnRhbmtzLiBUaGUgcHJvY2VkdXJlcyBtYXkgYWxzbyBiZSB1c2VkIGZvciBzYW1wbGluZyBwbGFzdGljcyBkaXNwZXJzaW9ucy48L3A+PC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCBjb2wtbWQtb2Zmc2V0LTEiPgogICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIGFsaWduLWl0ZW1zLWNlbnRlciI+CiAgPGgzPkdlbmVyYWwgaW5mb3JtYXRpb248L2gzPgo8L2Rpdj4KPHVsIGNsYXNzPSJyZWZpbmUiPgogIDxsaT4KICAgIDxkaXYgY2xhc3M9IiIgaWQ9InB1YmxpY2F0aW9uU3RhdHVzIj4KICAgICAgPGRpdiBjbGFzcz0iZW50cnktbGFiZWwiPlN0YXR1czwvZGl2PiZuYnNwOzombmJzcDs8c3Bhbj5QdWJsaXNoZWQ8L3NwYW4+CiAgICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iIiBpZD0icHVibGljYXRpb25EYXRlIj4KICAgICAgPGRpdiBjbGFzcz0iZW50cnktbGFiZWwiPlB1YmxpY2F0aW9uIGRhdGU8L2Rpdj4mbmJzcDs6Jm5ic3A7PHNwYW4gaXRlbXByb3A9InJlbGVhc2VEYXRlIj4yMDAxLTA1PC9zcGFuPgogICAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSIiIGlkPSJzdGFnZUlkIj4KICAgICAgPGRpdiBjbGFzcz0iZW50cnktbGFiZWwiPlN0YWdlPC9kaXY+IDogSW50ZXJuYXRpb25hbCBTdGFuZGFyZCBjb25maXJtZWQgWzxhIGNsYXNzPSJwYWdlLXNjcm9sbCIgaHJlZj0iI2xpZmVjeWNsZSI+OTAuOTM8L2E+XQogICAgPC9kaXY+CgogIDwvbGk+CiAgPGxpPgogICAgPGRpdiBjbGFzcz0iIj4KICAgICAgPGRpdiBjbGFzcz0iZW50cnktbGFiZWwiPkVkaXRpb248L2Rpdj4mbmJzcDs6Jm5ic3A7MzwvZGl2PgogICAgPGRpdiBjbGFzcz0iIj4KICAgICAgPGRpdiBjbGFzcz0iZW50cnktbGFiZWwiPk51bWJlciBvZiBwYWdlczwvZGl2PiZuYnNwOzombmJzcDs4PC9kaXY+CiAgPC9saT4KCiAgPGxpPgogICAgPGRpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJlbnRyeS1sYWJlbCI+VGVjaG5pY2FsIENvbW1pdHRlZSZuYnNwOzo8L2Rpdj4KICAgICAgICA8c3BhbiBjbGFzcz0iZW50cnktbmFtZSBlbnRyeS1ibG9jayI+CiAgICAgICAgICA8YSB0aXRsZT0iUmF3IG1hdGVyaWFscyAoaW5jbHVkaW5nIGxhdGV4KSBmb3IgdXNlIGluIHRoZSBydWJiZXIgaW5kdXN0cnkiIGhyZWY9Ii9jb21taXR0ZWUvNDg3MTYuaHRtbCI+SVNPL1RDIDQ1L1NDIDM8L2E+PC9zcGFuPgogICAgICA8L2Rpdj4KICAgIDxkaXY+CiAgICAgIDxkaXYgY2xhc3M9ImVudHJ5LWxhYmVsIj48YWJiciB0aXRsZT0iSW50ZXJuYXRpb25hbCBDbGFzc2lmaWNhdGlvbiBmb3IgU3RhbmRhcmRzIj5JQ1M8L2FiYnI+Jm5ic3A7OjwvZGl2PgogICAgICAgIDxzcGFuIGNsYXNzPSJlbnRyeS1uYW1lIGVudHJ5LWJsb2NrIj4KICAgICAgICAgICAgPGEgdGl0bGU9IkxhdGV4IGFuZCByYXcgcnViYmVyIiBocmVmPSIvaWNzLzgzLjA0MC4xMC5odG1sIj4KICAgICAgICAgICAgICAgIDgzLjA0MC4xMDwvYT4mbmJzcDsKICAgICAgICAgIDwvc3Bhbj4KICAgICAgICA8L2Rpdj4KICA8L2xpPgogIDxsaSBjbGFzcz0idGV4dC14cyI+CiAgICA8aSBjbGFzcz0iYmktcnNzLWZpbGwgbWUtMSBhbGlnbi1iYXNlbGluZSB0ZXh0LXNtIiBzdHlsZT0iY29sb3I6ICNGOTkwMDA7Ij48L2k+PGEgaHJlZj0iL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDIvMzIvMjMyODEuZGV0YWlsLnJzcyI+UlNTPC9hPiZuYnNwO3VwZGF0ZXM8L2xpPgo8L3VsPgo8ZGl2IGNsYXNzPSJtZWRpYSBjbGVhcmZpeCBtdC01Ij4KICA8ZGl2IGNsYXNzPSJtZWRpYS1sZWZ0Ij4KICAgIDxmaWd1cmUgY2xhc3M9InJvdW5kZWQtMCBzaGFkb3ctc20gaG92ZXItem9vbSI+CiAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmlzby5vcmcvb2JwL3VpL2VuLyMhaXNvOnN0ZDoyMzI4MTplbiI+CiAgICAgICAgPGltZyBhbHQ9IlN0YW5kYXJkIGZpcnN0IHBhZ2UiIHNyYz0iL21vZHVsZXMvaXNvLWphaGlhLXNlcnZpY2UtbW9kdWxlL2ltZy9pc28tc3RhbmRhcmQtY292ZXItdGh1bWJuYWlsLndlYnAiIGNsYXNzPSJtZWRpYS1vYmplY3Qgd2lkdGgtMTAwIHJvdW5kZWQtMCIgLz4KICAgICAgPC9hPgogICAgPC9maWd1cmU+CiAgPC9kaXY+CiAgPGRpdiBjbGFzcz0ibWVkaWEtYm9keSI+CiAgICA8aDQgY2xhc3M9Img1IGVudHJ5LXRpdGxlIGVudHJ5LW5hbWUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lmlzby5vcmcvb2JwL3VpL2VuLyMhaXNvOnN0ZDoyMzI4MTplbiI+UmVhZCBzYW1wbGUmbmJzcDs8aSBjbGFzcz0iYmktYm94LWFycm93LXVwLXJpZ2h0IHNtYWxsIGFsaWduLWJhc2VsaW5lIj48L2k+PC9hPjwvaDQ+CiAgICA8ZGl2IGNsYXNzPSJlbnRyeS1zdW1tYXJ5Ij5QcmV2aWV3IHRoaXMgc3RhbmRhcmQgaW4gb3VyIE9ubGluZSBCcm93c2luZyBQbGF0ZWZvcm0gKE9CUCk8L2Rpdj4KICA8L2Rpdj4KPC9kaXY+CjwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvc2VjdGlvbj4KCiAgPCEtLSBTVEFSVCBPRiBNT0RBTCAoQnV5IElTTy5PUkcgd2l0aCBPUFRPVVQpIC0tPgogIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBpZD0iaXNvLW9wdG91dCIgYXJpYS1oaWRkZW49InRydWUiIGFyaWEtbGFiZWxsZWRieT0ibW9kYWxMYWJlbCI+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLWNlbnRlcmVkIj4KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgIDxoNCBjbGFzcz0ibW9kYWwtdGl0bGUiIGlkPSJtb2RhbExhYmVsIj5CdXkmbmJzcDt0aGlzIHN0YW5kYXJkPC9oND4KICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuLWNsb3NlIiBkYXRhLWJzLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+PC9idXR0b24+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5IGNsZWFyZml4Ij4KICAgICAgICAgICAgPGRpdiBpZD0ibW9kYWxPcHRPdXQiPjwvZGl2PgogICAgICAgICAgICA8ZGl2IGlkPSJtb2RhbE5vT3B0T3V0Ij48L2Rpdj4KICAgICAgICAgICAgPHNwYW4gaWQ9InByb2NlZWRUb0NoZWNrb3V0IiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIiBkYXRhLWxhYmVsPSJDaGVja291dCI+PC9zcGFuPgogICAgICAgICAgICA8c3BhbiBpZD0iY29udGludWVTaG9wcGluZyIgY2xhc3M9InZpc3VhbGx5LWhpZGRlbiIgZGF0YS1sYWJlbD0iQ29udGludWUgc2hvcHBpbmciPjwvc3Bhbj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2PgogIDwhLS0gRU5EIE9GIE1PREFMIC0tPgoKPC9kaXY+IDxzZWN0aW9uIGlkPSJsaWZlY3ljbGUiPgogIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPgogICAgICAgIDxoMz5MaWZlIGN5Y2xlPC9oMz4KICAgICAgICA8ZGl2IGNsYXNzPSJsaWZlY3ljbGUiPgogICAgICAgICAgPHVsIGNsYXNzPSJzdGVwcyI+CiAgICAgICAgICAgIDxsaSBjbGFzcz0idGltZS1zdGVwIj4KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ibXMtc20tMyB0ZXh0LW11dGVkIj5QcmV2aW91c2x5PC9oND4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0ZXAgc3RlcC1kYXJrIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RlcC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uLWhlYWQiPldpdGhkcmF3bjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxoNT48YSBocmVmPSIvc3RhbmRhcmQvMzkyNi5odG1sIj5JU08gMTIzOjE5ODU8L2E+PC9oNT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9InRpbWUtc3RlcCI+CiAgICAgICAgICAgICAgPGg0IGNsYXNzPSJtcy1zbS0zIHRleHQtbXV0ZWQiPk5vdzwvaDQ+CgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0ZXAgc3RlcC1zdWNjZXNzIGFjdGl2ZSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbi1oZWFkIj5QdWJsaXNoZWQ8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8aDU+SVNPIDEyMzoyMDAxPC9oNT4KICAgICAgICAgICAgICAgICAgPGJyLz5BIHN0YW5kYXJkIGlzIHJldmlld2VkIGV2ZXJ5IDUgeWVhcnM8YnIvPjxhIGRhdGEtYnMtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgaHJlZj0iI3N0YWdlcyIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSBjdXJyZW50LXN0YWdlIHRleHQtc20gY29sbGFwc2VkIj5TdGFnZTogPHN0cm9uZz45MC45Mzwvc3Ryb25nPiAoQ29uZmlybWVkKTwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPHVsIGNsYXNzPSJzdGFnZXMgY29sbGFwc2UiIGlkPSJzdGFnZXMiPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBhbGVydC1pbmZvIj4KCiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiICByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjAwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+UHJlbGltaW5hcnk8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIGFsZXJ0LWluZm8iPgoKICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MTA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5Qcm9wb3NhbDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gYWxlcnQtaW5mbyI+CgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLWJzLWRpc3BsYXk9InN0YXRpYyIgZGF0YS1icy10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+UHJlcGFyYXRvcnk8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzIwXzAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjIwLjAwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MTk5My0wOC0xNTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5ldyBwcm9qZWN0IHJlZ2lzdGVyZWQgaW4gVEMvU0Mgd29yayBwcm9ncmFtbWU8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCMyMF8yMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj4yMC4yMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjE5OTMtMTEtMTk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXb3JraW5nIGRyYWZ0IChXRCkgc3R1ZHkgaW5pdGlhdGVkPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjMjBfOTkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MjAuOTk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4xOTk1LTEyLTE1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV0QgYXBwcm92ZWQgZm9yIHJlZ2lzdHJhdGlvbiBhcyBDRDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gYWxlcnQtaW5mbyI+CgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLWJzLWRpc3BsYXk9InN0YXRpYyIgZGF0YS1icy10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjMwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+Q29tbWl0dGVlPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCMzMF8wMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj4zMC4wMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjE5OTYtMDctMjY8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb21taXR0ZWUgZHJhZnQgKENEKSByZWdpc3RlcmVkPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjMzBfMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MzAuMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4xOTk2LTA3LTI2PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ0Qgc3R1ZHkgaW5pdGlhdGVkPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjMzBfOTkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MzAuOTk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4xOTk2LTEwLTI4PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ0QgYXBwcm92ZWQgZm9yIHJlZ2lzdHJhdGlvbiBhcyBESVM8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIGFsZXJ0LWluZm8iPgoKICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS1icy1kaXNwbGF5PSJzdGF0aWMiIGRhdGEtYnMtdG9nZ2xlPSJkcm9wZG93biIgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj40MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPkVucXVpcnk8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzQwXzAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjQwLjAwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MTk5Ny0wOS0yMjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERJUyByZWdpc3RlcmVkPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjNDBfMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NDAuMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4xOTk3LTEwLTMwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRElTIGJhbGxvdCBpbml0aWF0ZWQ6IDEyIHdlZWtzPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjNDBfNjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NDAuNjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4xOTk4LTA0LTIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xvc2Ugb2Ygdm90aW5nPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjNDBfOTkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NDAuOTk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDAwLTA2LTI5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRnVsbCByZXBvcnQgY2lyY3VsYXRlZDogRElTIGFwcHJvdmVkIGZvciByZWdpc3RyYXRpb24gYXMgRkRJUzwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gYWxlcnQtaW5mbyI+CgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLWJzLWRpc3BsYXk9InN0YXRpYyIgZGF0YS1icy10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjUwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+QXBwcm92YWw8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzUwXzAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjUwLjAwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAwMC0wOC0yOTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbmFsIHRleHQgcmVjZWl2ZWQgb3IgRkRJUyByZWdpc3RlcmVkIGZvciBmb3JtYWwgYXBwcm92YWw8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM1MF8yMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj41MC4yMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMDAtMTItMDc8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9vZiBzZW50IHRvIHNlY3JldGFyaWF0IG9yIEZESVMgYmFsbG90IGluaXRpYXRlZDogOCB3ZWVrczwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzUwXzYwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjUwLjYwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAwMS0wMi0yODwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsb3NlIG9mIHZvdGluZy4gUHJvb2YgcmV0dXJuZWQgYnkgc2VjcmV0YXJpYXQ8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIGFsZXJ0LXN1Y2Nlc3MiPgoKICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS1icy1kaXNwbGF5PSJzdGF0aWMiIGRhdGEtYnMtdG9nZ2xlPSJkcm9wZG93biIgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPlB1YmxpY2F0aW9uPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM2MF8wMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj42MC4wMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMDEtMDMtMDU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIHVuZGVyIHB1YmxpY2F0aW9uPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjNjBfNjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NjAuNjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDAxLTA1LTMxPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW50ZXJuYXRpb25hbCBTdGFuZGFyZCBwdWJsaXNoZWQ8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIGJnLXN1Y2Nlc3MgYWN0aXZlIj4KCiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtYnMtZGlzcGxheT0ic3RhdGljIiBkYXRhLWJzLXRvZ2dsZT0iZHJvcGRvd24iIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5SZXZpZXc8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpICBjbGFzcz0nbGlzdC1zZXBhcmF0aW9uJz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzkwXzIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAwNS0xMS0xNTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludGVybmF0aW9uYWwgU3RhbmRhcmQgdW5kZXIgc3lzdGVtYXRpYyByZXZpZXc8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM5MF82MCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMDYtMDctMzE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbG9zZSBvZiByZXZpZXc8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM5MF85MyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC45Mzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMDYtMDctMzE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIGNvbmZpcm1lZDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpICBjbGFzcz0nbGlzdC1zZXBhcmF0aW9uJz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzkwXzIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxMS0wMS0xNTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludGVybmF0aW9uYWwgU3RhbmRhcmQgdW5kZXIgc3lzdGVtYXRpYyByZXZpZXc8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM5MF82MCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTEtMDYtMTc8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbG9zZSBvZiByZXZpZXc8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM5MF85MyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC45Mzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTEtMDYtMjE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIGNvbmZpcm1lZDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpICBjbGFzcz0nbGlzdC1zZXBhcmF0aW9uJz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzkwXzIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxNi0wMS0xNTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludGVybmF0aW9uYWwgU3RhbmRhcmQgdW5kZXIgc3lzdGVtYXRpYyByZXZpZXc8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM5MF82MCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTYtMDYtMTc8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbG9zZSBvZiByZXZpZXc8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM5MF85MyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC45Mzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTYtMDYtMjQ8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIGNvbmZpcm1lZDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpICBjbGFzcz0nbGlzdC1zZXBhcmF0aW9uJz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzkwXzIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAyMS0wMS0xNTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludGVybmF0aW9uYWwgU3RhbmRhcmQgdW5kZXIgc3lzdGVtYXRpYyByZXZpZXc8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM5MF82MCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMjEtMDYtMDU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbG9zZSBvZiByZXZpZXc8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSBjbGFzcz0iYWN0aXZlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzkwXzkzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjkzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAyMS0wNi0wNzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludGVybmF0aW9uYWwgU3RhbmRhcmQgY29uZmlybWVkPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgIGNsYXNzPSdsaXN0LXNlcGFyYXRpb24nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjOTBfMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTAuMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIHVuZGVyIHN5c3RlbWF0aWMgcmV2aWV3PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjOTBfNjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTAuNjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbG9zZSBvZiByZXZpZXc8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM5MF85OSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC45OTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdpdGhkcmF3YWwgb2YgSW50ZXJuYXRpb25hbCBTdGFuZGFyZCBwcm9wb3NlZCBieSBUQyBvciBTQzwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gYWxlcnQtbXV0ZWQiPgoKICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS1icy1kaXNwbGF5PSJzdGF0aWMiIGRhdGEtYnMtdG9nZ2xlPSJkcm9wZG93biIgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45NTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPldpdGhkcmF3YWw8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzk1Xzk5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjk1Ljk5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2l0aGRyYXdhbCBvZiBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPC91bD4KCiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+Cjwvc2VjdGlvbj4KPGRpdiBjbGFzcz0ic2VjdGlvbiB0ZXh0LWNlbnRlciBtdC0wIj4KICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgPGRpdiBjbGFzcz0icm93IHJvdy1jb2xzLTEgcm93LWNvbHMtc20tMiByb3ctY29scy14bC0zIGctNCI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgIDxkaXYgY2xhc3M9ImNhcmQgaC0xMDAgbWItMCI+CiAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgIDxwPgogICAgICAgICAgICA8aW1nIGxvYWRpbmc9ImxhenkiIHNyYz0iL2ZpbGVzL2xpdmUvc2l0ZXMvaXNvb3JnL2ZpbGVzL2RhdGEvc2RnL2VuL3NkZy1sb2dvLnBuZyIgY2xhc3M9ImltZy1mbHVpZCB3aWR0aC0xMDBwY3Qgcm91bmRlZC0wIG14LWF1dG8gZC1ibG9jayIgc3R5bGU9Im1heC13aWR0aDogMjUwcHg7IiBhbHQ9IlN1c3RhaW5hYmxlIERldmVsb3BtZW50IEdvYWxzIiAvPgogICAgICAgICAgPC9wPgogICAgICAgICAgPHA+CiAgICAgICAgICAgIFRoaXMgc3RhbmRhcmQgY29udHJpYnV0ZXMgdG8gdGhlIGZvbGxvd2luZyA8YSBocmVmPSIvc2Rncy5odG1sIj5TdXN0YWluYWJsZSBEZXZlbG9wbWVudCBHb2FsczwvYT48cD4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyZml4IGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgICAgICAgICAgPGEgaHJlZj0iL3NkZy9TREcxMi5odG1sIiB0aXRsZT0iUmVzcG9uc2libGUgQ29uc3VtcHRpb24gYW5kIFByb2R1Y3Rpb24iPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnIHNkZy1zbSBzZGctMTIiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGctaWNvbiI+PC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy1sYWJlbCI+MTI8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnLXRleHQiPlJlc3BvbnNpYmxlIENvbnN1bXB0aW9uIGFuZCBQcm9kdWN0aW9uPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy1sb2dvIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPGEgaHJlZj0iL3NkZy9TREcwOS5odG1sIiB0aXRsZT0iSW5kdXN0cnksIElubm92YXRpb24gYW5kIEluZnJhc3RydWN0dXJlIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZyBzZGctc20gc2RnLTA5Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnLWljb24iPjwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGctbGFiZWwiPjk8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnLXRleHQiPkluZHVzdHJ5LCBJbm5vdmF0aW9uIGFuZCBJbmZyYXN0cnVjdHVyZTwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGctbG9nbyI+PC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2PgogIDwvZGl2Pgo8L2Rpdj4KCjxzZWN0aW9uIGNsYXNzPSJiZy1saWdodGdyYXkiIGlkPSJjb250YWN0Ij4KICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQiPgogICAgICAgIDxoND5Hb3QgYSBxdWVzdGlvbj88L2g0PgoKPHA+Q2hlY2sgb3V0IG91ciA8YSBocmVmPSIvZnJlcXVlbnRseS1hc2tlZC1xdWVzdGlvbnMtZmFxcy5odG1sIiB0aXRsZT0iRnJlcXVlbnRseSBBc2tlZCBRdWVzdGlvbnMgKEZBUXMpIj5GQVFzPC9hPjwvcD48L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQiPgogICAgICAgIDxkaXYgY2xhc3M9InZjYXJkIGNvbnRhY3Qgbm8tZmlndXJlIGNsZWFyZml4IiBpdGVtc2NvcGU9IiIgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL1BlcnNvbiI+CjxkaXYgY2xhc3M9ImNvbnRlbnQtYm94IG5vLWltYWdlIj4KPGRpdiBjbGFzcz0iZm4gbiI+PHNwYW4gY2xhc3M9ImdpdmVuLW5hbWUiIGl0ZW1wcm9wPSJnaXZlbk5hbWUiPkN1c3RvbWVyIGNhcmU8L3NwYW4+PC9kaXY+Cgo8ZGl2IGNsYXNzPSJ0ZWwiIGl0ZW1wcm9wPSJ0ZWxlcGhvbmUiPis0MSAyMiA3NDkgMDggODg8L2Rpdj4KCjxkaXYgY2xhc3M9ImVtYWlsIiBpdGVtcHJvcD0iZW1haWwiPjxhIGhyZWY9Im1haWx0bzpjdXN0b21lcnNlcnZpY2VAaXNvLm9yZyI+Y3VzdG9tZXJzZXJ2aWNlQGlzby5vcmc8L2E+PC9kaXY+Cgo8aHIgLz4KPGRpdiBjbGFzcz0ibm90ZSI+CjxwIGNsYXNzPSJzbWFsbCI+T3BlbmluZyBob3Vyczo8YnIgLz4KTW9uZGF5IHRvIEZyaWRheSAtIDA5OjAwLTEyOjAwLCAxNDowMC0xNzowMCAoVVRDKzEpPC9wPgo8L2Rpdj4KPC9kaXY+CjwvZGl2PjwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCI+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9zZWN0aW9uPjxkaXYgY2xhc3M9Im5hdi1icmVhZGNydW1iIHByaW50LWZvb3RlciBiZy1ibGFjayI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMCBzbWFsbCI+CiAgICAgICAgICAgICAgPCEtLSBCUkVBRENSVU1CIC0tPgogICAgICAgICAgICAgIDxvbCBjbGFzcz0iYnJlYWRjcnVtYiI+CiAgICA8bGkgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+PGEgaHJlZj0iL2hvbWUuaHRtbCIgdGl0bGU9IkhvbWUgcGFnZSI+PGkgY2xhc3M9ImJpLWhvdXNlIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPjwvYT48L2xpPgogICAgPGxpIGNsYXNzPSJicmVhZGNydW1iLWl0ZW0iPgogICAgICAgICAgPGEgaHJlZj0iL3N0b3JlLmh0bWwiPlN0b3JlPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+CiAgICAgICAgICA8YSBocmVmPSIvc3RhbmRhcmRzLWNhdGFsb2d1ZS9icm93c2UtYnktaWNzLmh0bWwiID5TdGFuZGFyZHMgY2F0YWxvZ3VlPC9hPgo8L2xpPgogICAgICA8bGkgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+CiAgICAgICAgICA8YSBocmVmPSIvc3RhbmRhcmRzLWNhdGFsb2d1ZS9icm93c2UtYnktaWNzLmh0bWwiPklDUzwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJicmVhZGNydW1iLWl0ZW0iPjxhIGhyZWY9Ii9lbi9pY3MvODMuaHRtbCI+ODM8L2E+PC9saT4KICAgIDxsaSBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIj48YSBocmVmPSIvZW4vaWNzLzgzLjA0MC5odG1sIj44My4wNDA8L2E+PC9saT4KICAgIDxsaSBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIj48YSBocmVmPSIvZW4vaWNzLzgzLjA0MC4xMC5odG1sIj44My4wNDAuMTA8L2E+PC9saT48bGkgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+SVNPIDEyMzoyMDAxPC9saT48L29sPjwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMiBoaWRkZW4tcHJpbnQgdGV4dC1lbmQgc21hbGwgbXQtMyBtdC1zbS0wIj4KICAgICAgICAgICAgICA8YSByb2xlPSJidXR0b24iIGNsYXNzPSJkcm9wZG93bi10b2dnbGUgdGV4dC13aGl0ZSBjb2xsYXBzZWQiIGRhdGEtYnMtdG9nZ2xlPSJjb2xsYXBzZSIgaHJlZj0iI2NvbGxhcHNlU2l0ZW1hcCIgdGFyZ2V0PSJfc2VsZiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtY29udHJvbHM9ImNvbGxhcHNlU2l0ZW1hcCI+U2l0ZW1hcDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2xsYXBzZSBib3JkZXItdG9wIiBpZD0iY29sbGFwc2VTaXRlbWFwIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICA8IS0tIFNJVEVNQVAgLS0+CiAgICAgICAgICAgICAgPG5hdiByb2xlPSJuYXZpZ2F0aW9uIiBhcmlhLWxhYmVsPSJTaXRlbWFwIiBjbGFzcz0ic2l0ZW1hcC1mb290ZXIgY2xlYXJmaXggc21hbGwiIGlkPSJuYXYtc2l0ZW1hcCI+PHVsIHJvbGU9J21lbnViYXInIGNsYXNzPSdsaXN0LWlubGluZS01IGNsZWFyZml4IG5hdi1sZXZlbDEnID48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgaGFzQ2hpbGRyZW4gZmlyc3RJbkxldmVsJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJDb3ZlcmluZyBhbG1vc3QgZXZlcnkgcHJvZHVjdCwgcHJvY2VzcyBvciBzZXJ2aWNlIGltYWdpbmFibGUsIElTTyBtYWtlcyBzdGFuZGFyZHMgdXNlZCBldmVyeXdoZXJlLiIgIGhyZWY9Jy9zdGFuZGFyZHMuaHRtbCc+U3RhbmRhcmRzPC9hPjx1bCByb2xlPSdtZW51YmFyJyBjbGFzcz0nbGlzdC11bnN0eWxlZCBuYXYtbGV2ZWwyJyA+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4gZmlyc3RJbkxldmVsJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJXaGV0aGVyIHlvdSBydW4gYSBidXNpbmVzcywgd29yayBmb3IgYSBjb21wYW55IG9yIGdvdmVybm1lbnQsIG9yIHlvdSBhcmUgYSBjb25zdW1lciBsb29raW5nIGZvciBnb29kcyBhbmQgc2VydmljZXMgdGhhdCBtZWV0IGN1c3RvbWVyIGV4cGVjdGF0aW9uczogRmluZCBvdXQgd2hhdCBzdGFuZGFyZHMgY2FuIGRvIGZvciB5b3UuIiAgaHJlZj0nL2JlbmVmaXRzLW9mLXN0YW5kYXJkcy5odG1sJz5CZW5lZml0czwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDIgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgdGl0bGU9IkhlcmUgeW91IGNhbiBkaXNjb3ZlciBzb21lIG9mIHRoZSBiZXN0LWtub3duIGFuZCBtb3N0IHdpZGVseS11c2VkIHN0YW5kYXJkcywgYXMgd2VsbCBhcyB0aG9zZSB0aGF0IGFkZHJlc3MgcmVjZW50bHkgZW1lcmdlZCBjaGFsbGVuZ2VzIGFmZmVjdGluZyB1cyBhbGwuCgoiICBocmVmPScvcG9wdWxhci1zdGFuZGFyZHMuaHRtbCc+UG9wdWxhciBzdGFuZGFyZHM8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJBIHNldCBvZiBwcm9jZXNzZXMgdGhhdCBzaG93IHlvdXIgcHJvZHVjdCwgc2VydmljZSBvciBzeXN0ZW0gbWVldHMgdGhlIHJlcXVpcmVtZW50cyBvZiBhIHN0YW5kYXJkLiIgIGhyZWY9Jy9jb25mb3JtaXR5LWFzc2Vzc21lbnQuaHRtbCc+Q29uZm9ybWl0eSBhc3Nlc3NtZW50PC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbiBsYXN0SW5MZXZlbCcgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iT3JnYW5pemF0aW9ucyBhbmQgY29tcGFuaWVzIGxvb2tpbmcgdG8gY29udHJpYnV0ZSB0byB0aGUgU0RHcyB3aWxsIGZpbmQgdGhhdCBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkcyBwcm92aWRlIGVmZmVjdGl2ZSB0b29scyB0byBoZWxwIHRoZW0gcmlzZSB0byB0aGUgY2hhbGxlbmdlLiIgIGhyZWY9Jy9zZGdzLmh0bWwnPlNER3M8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjwvdWw+PCEtLSBjbG9zZSBvZiBjb250YWluZXIgbGV2ZWwgMiAtLT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIGhhc0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJJU08gYnJpbmdzIHRvZ2V0aGVyIGdsb2JhbCBleHBlcnRzIHRvIGRldmVsb3AgSW50ZXJuYXRpb25hbCBTdGFuZGFyZHMgdGhhdCBoZWxwIHNvbHZlIHByb2JsZW1zIGFuZCBkcml2ZSBpbm5vdmF0aW9uLiIgIGhyZWY9Jy9hYm91dC11cy5odG1sJz5BYm91dCB1czwvYT48dWwgcm9sZT0nbWVudWJhcicgY2xhc3M9J2xpc3QtdW5zdHlsZWQgbmF2LWxldmVsMicgPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCcgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iRmluZCBvdXQgaG93IHdlIGRldmVsb3AgYW5kIHB1Ymxpc2ggaW50ZXJuYXRpb25hbCBzdGFuZGFyZHMgYnkgYnJpbmdpbmcgdG9nZXRoZXIgbW9yZSB0aGFuIDE2MCBtZW1iZXJzIGFuZCBtb3JlIHRoYW4gNDUsMDAwIGV4cGVydHMiICBocmVmPScvd2hhdC13ZS1kby5odG1sJz5XaGF0IHdlIGRvPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICAgaHJlZj0nL3N0cnVjdHVyZS5odG1sJz5TdHJ1Y3R1cmU8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJSZXByZXNlbnRpbmcgdGhlIGZvdXIgY29ybmVycyBvZiB0aGUgd29ybGQgd2l0aCBvbmUgbWVtYmVyIHBlciBjb3VudHJ5LCBJU08gaXMgdGhlIEludGVybmF0aW9uYWwgT3JnYW5pemF0aW9uIGZvciBTdGFuZGFyZGl6YXRpb24uIiAgaHJlZj0nL21lbWJlcnMuaHRtbCc+TWVtYmVyczwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDIgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4gbGFzdEluTGV2ZWwnID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgdGl0bGU9Ik1ha2luZyBsaXZlcyBlYXNpZXIsIHNhZmVyIGFuZCBiZXR0ZXIuIE91ciBTdHJhdGVneSBvdXRsaW5lcyBvdXIgdmlzaW9uIGFuZCBvdXIgbWlzc2lvbiBmb3IgdGhlIG5leHQgMTAgeWVhcnMgYW5kIGEgc2V0IG9mIGdvYWxzIGFuZCBwcmlvcml0aWVzIHRvIGhlbHAgdXMgZ2V0IHRoZXJlLiIgIGhyZWY9Jy9zdHJhdGVneTIwMzAuaHRtbCc+U3RyYXRlZ3k8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjwvdWw+PCEtLSBjbG9zZSBvZiBjb250YWluZXIgbGV2ZWwgMiAtLT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIGhhc0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJLZWVwIHVwIHRvIGRhdGUgd2l0aCB0aGUgbGF0ZXN0IGluIHN0YW5kYXJkaXphdGlvbiBvciBicm93c2Ugb3VyIHJpY2ggYXJjaGl2ZXMiICBocmVmPScvbmV3cy5odG1sJz5OZXdzPC9hPjx1bCByb2xlPSdtZW51YmFyJyBjbGFzcz0nbGlzdC11bnN0eWxlZCBuYXYtbGV2ZWwyJyA+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgdGl0bGU9IkZpbmQgb3V0IHdoYXQncyBjb21pbmcgdXAgYW5kIHdoYXQgeW91IG1pZ2h0IGhhdmUgbWlzc2VkLiIgIGhyZWY9Jy9ldmVudHMuaHRtbCc+RXZlbnRzPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICAgaHJlZj0nL21lZGlhLWtpdC5odG1sJz5NZWRpYSBraXQ8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjwvdWw+PCEtLSBjbG9zZSBvZiBjb250YWluZXIgbGV2ZWwgMiAtLT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIGhhc0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJGaW5kIG91dCBob3cgdGhlIElTTyBwcm9jZXNzIGJyaW5nIHRvZ2V0aGVyIGdsb2JhbCBleHBlcnRzIHRvIGNyZWF0ZSBzdGFuZGFyZHMgdGhhdCBhcmUgY2hvc2VuIHRoZSB3b3JsZCBvdmVyLiIgIGhyZWY9Jy9kZXZlbG9waW5nLXN0YW5kYXJkcy5odG1sJz5UYWtpbmcgcGFydDwvYT48dWwgcm9sZT0nbWVudWJhcicgY2xhc3M9J2xpc3QtdW5zdHlsZWQgbmF2LWxldmVsMicgPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCcgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iSVNPIGhhcyBwdXQgdG9nZXRoZXIgZ3JvdXBzIG9mIGV4cGVydHMgdGhhdCByZXByZXNlbnQgZXZlcnkgc2VjdG9yIGltYWdpbmFibGUgZnJvbSBzb2FwcyB0byBzcGFjZWNyYWZ0LCBNUDMgdG8gY29mZmVlLiBJbiBmYWN0IHRoZXJlIGFyZSBtb3JlIHRoYW4gMjUwIHRlY2huaWNhbCBjb21taXR0ZWVzLiBZb3UgY2FuIGZpbmQgb3V0IHdoYXQgdGhleSBkbyBoZXJlLiIgIGhyZWY9Jy93aG8tZGV2ZWxvcHMtc3RhbmRhcmRzLmh0bWwnPldobyBkZXZlbG9wcyBzdGFuZGFyZHM8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJUaGUgZGlmZmVyZW50IHR5cGVzIG9mIElTTyBwdWJsaWNhdGlvbnMuIiAgaHJlZj0nL2RlbGl2ZXJhYmxlcy1hbGwuaHRtbCc+RGVsaXZlcmFibGVzPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICAgaHJlZj0nL2dldC1pbnZvbHZlZC5odG1sJz5HZXQgaW52b2x2ZWQ8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJUaGUgSVNPIENsaW1hdGUgQWN0aW9uIEtpdCBpcyBhIGNvbGxlY3Rpb24gb2YgY2FzZSBzdHVkaWVzIGZyb20gYXJvdW5kIHRoZSB3b3JsZCBvbiBob3cgc3RhbmRhcmRzIGNhbiBiZSBlZmZlY3RpdmVseSB1c2VkIGFzIGEgdG9vbCBmb3Igc3VzdGFpbmFiaWxpdHkuIiAgaHJlZj0nL0NsaW1hdGVBY3Rpb24uaHRtbCc+Q2xpbWF0ZSBhY3Rpb24ga2l0PC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbiBsYXN0SW5MZXZlbCcgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iUmVzb3VyY2VzIHRvIHN1cHBvcnQgdGhlIHdvcmsgb2YgaW5kaXZpZHVhbHMgaW52b2x2ZWQgaW4gc3RhbmRhcmRzIGRldmVsb3BtZW50LiAiICBocmVmPScvcmVzb3VyY2VzLmh0bWwnPlJlc291cmNlczwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDIgLS0+PC91bD48IS0tIGNsb3NlIG9mIGNvbnRhaW5lciBsZXZlbCAyIC0tPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMSAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgaGFzQ2hpbGRyZW4gaW5QYXRoICBsYXN0SW5MZXZlbCcgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iQXJlIHlvdSBsb29raW5nIHRvIGJ1eSBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkcywgZ3VpZGVsaW5lcywgY29sbGVjdGlvbnMgYW5kIGNoZWNrbGlzdHM/IFRoZXkncmUgYWxsIHJpZ2h0IGhlcmUsIGluIHRoZSBJU08gU3RvcmUuIiAgaHJlZj0nL3N0b3JlLmh0bWwnPlN0b3JlPC9hPjx1bCByb2xlPSdtZW51YmFyJyBjbGFzcz0nbGlzdC11bnN0eWxlZCBuYXYtbGV2ZWwyJyA+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4gaW5QYXRoICBhY3RpdmUgZmlyc3RJbkxldmVsJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgICBocmVmPScvc3RhbmRhcmRzLWNhdGFsb2d1ZS9icm93c2UtYnktaWNzLmh0bWwnPlN0YW5kYXJkcyBjYXRhbG9ndWU8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJJU08gcHVibGljYXRpb25zIGdpdmUgaW5zaWdodHMgYW5kIGd1aWRhbmNlIGludG8gc3BlY2lmaWMgYXBwbGljYXRpb25zIGFuZCBzaG93IGhvdyBzdGFuZGFyZHMgYWRkIHZhbHVlLiIgIGhyZWY9Jy9wdWJsaWNhdGlvbi1saXN0Lmh0bWwnPlB1YmxpY2F0aW9ucyBhbmQgcHJvZHVjdHM8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjwvdWw+PCEtLSBjbG9zZSBvZiBjb250YWluZXIgbGV2ZWwgMiAtLT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PC91bD48IS0tIGNsb3NlIG9mIGNvbnRhaW5lciBsZXZlbCAxIC0tPjwvbmF2PjwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9tYWluPgogICAgPGZvb3RlciByb2xlPSJjb250ZW50aW5mbyIgYXJpYS1sYWJlbD0iRm9vdGVyIiBjbGFzcz0iZm9vdGVyLWlzbyBmb290ZXItZGFyayBiZy1kYXJrIj4KICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItbGlua3MgY2VudGVyLWJsb2NrIj4KICAgICAgICAgIDwhLS0gRk9PVEVSIExJTktTIC0tPgogICAgICAgICAgPG5hdiByb2xlPSJuYXZpZ2F0aW9uIiBhcmlhLWxhYmVsPSJJbmxpbmUgTmF2aWdhdGlvbiIgY2xhc3M9IiIgaWQ9IiI+PHVsIHJvbGU9J21lbnViYXInIGNsYXNzPSdsaXN0LWlubGluZSBjbGVhcmZpeCBuYXYtbGV2ZWwxJyA+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4gZmlyc3RJbkxldmVsJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgICBocmVmPScvaXNvLW5hbWUtYW5kLWxvZ28uaHRtbCc+SVNPIG5hbWUgYW5kIGxvZ288L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgICBocmVmPScvcHJpdmFjeS5odG1sJz5Qcml2YWN5IE5vdGljZTwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgIGhyZWY9Jy9jb3B5cmlnaHQuaHRtbCc+Q29weXJpZ2h0PC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMSAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICAgaHJlZj0nL2Nvb2tpZXMuaHRtbCc+Q29va2llIHBvbGljeTwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgIGhyZWY9Jy93b3JraW5nLXdpdGgtaXNvLmh0bWwnPkpvYnM8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgICBocmVmPScvZnJlcXVlbnRseS1hc2tlZC1xdWVzdGlvbnMtZmFxcy5odG1sJz5GQVFzPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMSAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICAgaHJlZj0nL2NvbnRhY3QtaXNvLmh0bWwnPkNvbnRhY3QgSVNPPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMSAtLT48L3VsPjwhLS0gY2xvc2Ugb2YgY29udGFpbmVyIGxldmVsIDEgLS0+PC9uYXY+PGRpdiBjbGFzcz0icm93ICAgICAgICIgPgo8ZGl2IGNsYXNzPSJjb2wtbWQtNiBvZmZzZXQtbWQtMyBjb2wteGwtNCBvZmZzZXQteGwtNCI+PGgyIGNsYXNzPSJoNCBwdC0zIHBiLTIiIGlkPSJpc29pbnNpZ2h0cyI+U2lnbiB1cCBmb3IgZW1haWwgdXBkYXRlczwvaDI+PGZvcm0gbWV0aG9kPSJQT1NUIiBhY3Rpb249Imh0dHBzOi8vaXNvMjcyLmFjdGl2ZWhvc3RlZC5jb20vcHJvYy5waHAiIGlkPSJfZm9ybV8yM18iIGNsYXNzPSJfZm9ybSBfZm9ybV8yMyBfaW5saW5lLWZvcm0gIF9kYXJrIiBub3ZhbGlkYXRlPgogIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InUiIHZhbHVlPSIyMyIgLz4KICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJmIiB2YWx1ZT0iMjMiIC8+CiAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icyIgLz4KICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjIiB2YWx1ZT0iMCIgLz4KICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJtIiB2YWx1ZT0iMCIgLz4KICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhY3QiIHZhbHVlPSJzdWIiIC8+CiAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0idiIgdmFsdWU9IjIiIC8+CiAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib3IiIHZhbHVlPSI5NDE3YjljZDUyZmY2Yzc0MmUxNzZhMzcwZWQ1NDQyYSIgLz4KCiAgPHN0eWxlPgogICAgICAuX2Vycm9yIHsKICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgcGFkZGluZzogMC41ZW0gMS4yNWVtOwogICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDsKICAgICAgfQogIDwvc3R5bGU+CgogIDxkaXYgY2xhc3M9Il9mb3JtLWNvbnRlbnQiPgogICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgaW5wdXQtZ3JvdXAtcm91bmQgbWItMyI+CiAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iZW1haWwiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5hbWU9ImVtYWlsIiBwbGFjZWhvbGRlcj0iRW1haWwiIGFyaWEtbGFiZWw9IkVtYWlsIiBhcmlhLWRlc2NyaWJlZGJ5PSJfZm9ybV8yM19zdWJtaXQiIHJlcXVpcmVkLz4KCiAgICAgIDxidXR0b24gaWQ9Il9mb3JtXzIzX3N1Ym1pdCIgY2xhc3M9Il9zdWJtaXQgYnRuIGJ0bi1wcmltYXJ5IiB0eXBlPSJzdWJtaXQiPgogICAgICAgIFN1YnNjcmliZTwvYnV0dG9uPgogICAgPC9kaXY+CiAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0iX2Zvcm0tdGhhbmsteW91IG1iLTMiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgICAgIDxwPjxzdHJvbmc+QWxtb3N0IGRvbmUhJm5ic3A7PC9zdHJvbmc+PGJyIC8+CllvdSBhcmUgb25seSBvbmUgc3RlcCBhd2F5IGZyb20gam9pbmluZyB0aGUgSVNPIHN1YnNjcmliZXIgbGlzdC4gUGxlYXNlIGNvbmZpcm0geW91ciBzdWJzY3JpcHRpb24gYnkgY2xpY2tpbmcgb24gdGhlIGVtYWlsIHdlJiMzOTt2ZSBqdXN0IHNlbnQgdG8geW91LiBZb3Ugd2lsbCBub3QgYmUgcmVnaXN0ZXJlZCB1bnRpbCB5b3UgY29uZmlybSB5b3VyIHN1YnNjcmlwdGlvbi4gSWYgeW91IGNhbiYjMzk7dCBmaW5kIHRoZSBlbWFpbCwga2luZGx5IGNoZWNrIHlvdXIgc3BhbSBmb2xkZXIgYW5kL29yIHRoZSBwcm9tb3Rpb25zIHRhYiAoaWYgeW91IHVzZSBHbWFpbCkuPC9wPjwvZGl2PgogICAgICA8L2Zvcm0+CgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogIHdpbmRvdy5fc2hvd190aGFua195b3UgPSBmdW5jdGlvbihpZCwgbWVzc2FnZSwgdHJhY2tjbXBfdXJsLCBlbWFpbCkgewogICAgdmFyIGZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnX2Zvcm1fJyArIGlkICsgJ18nKSwgdGhhbmtfeW91ID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcuX2Zvcm0tdGhhbmsteW91Jyk7CiAgICBmb3JtLnF1ZXJ5U2VsZWN0b3IoJy5fZm9ybS1jb250ZW50Jykuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgIC8vIHRoYW5rX3lvdS5pbm5lckhUTUwgPSBtZXNzYWdlOwogICAgdGhhbmtfeW91LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgY29uc3QgdmdvQWxpYXMgPSB0eXBlb2YgdmlzaXRvckdsb2JhbE9iamVjdEFsaWFzID09PSAndW5kZWZpbmVkJyA/ICd2Z28nIDogdmlzaXRvckdsb2JhbE9iamVjdEFsaWFzOwogICAgdmFyIHZpc2l0b3JPYmplY3QgPSB3aW5kb3dbdmdvQWxpYXNdOwogICAgaWYgKGVtYWlsICYmIHR5cGVvZiB2aXNpdG9yT2JqZWN0ICE9PSAndW5kZWZpbmVkJykgewogICAgICB2aXNpdG9yT2JqZWN0KCdzZXRFbWFpbCcsIGVtYWlsKTsKICAgICAgdmlzaXRvck9iamVjdCgndXBkYXRlJyk7CiAgICB9IGVsc2UgaWYgKHR5cGVvZih0cmFja2NtcF91cmwpICE9ICd1bmRlZmluZWQnICYmIHRyYWNrY21wX3VybCkgewogICAgICAvLyBTaXRlIHRyYWNraW5nIFVSTCB0byB1c2UgYWZ0ZXIgaW5saW5lIGZvcm0gc3VibWlzc2lvbi4KICAgICAgX2xvYWRfc2NyaXB0KHRyYWNrY21wX3VybCk7CiAgICB9CiAgICBpZiAodHlwZW9mIHdpbmRvdy5fZm9ybV9jYWxsYmFjayAhPT0gJ3VuZGVmaW5lZCcpIHdpbmRvdy5fZm9ybV9jYWxsYmFjayhpZCk7CiAgfTsKICB3aW5kb3cuX3Nob3dfZXJyb3IgPSBmdW5jdGlvbihpZCwgbWVzc2FnZSwgaHRtbCkgewogICAgdmFyIGZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnX2Zvcm1fJyArIGlkICsgJ18nKSwgZXJyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksIGJ1dHRvbiA9IGZvcm0ucXVlcnlTZWxlY3RvcignYnV0dG9uJyksIG9sZF9lcnJvciA9IGZvcm0ucXVlcnlTZWxlY3RvcignLl9mb3JtX2Vycm9yJyk7CiAgICBpZiAob2xkX2Vycm9yKSBvbGRfZXJyb3IucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvbGRfZXJyb3IpOwogICAgZXJyLmlubmVySFRNTCA9IG1lc3NhZ2U7CiAgICBlcnIuY2xhc3NOYW1lID0gJ19lcnJvci1pbm5lciBfZm9ybV9lcnJvciBfbm9fYXJyb3cnOwogICAgdmFyIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgIHdyYXBwZXIuY2xhc3NOYW1lID0gJ19mb3JtLWlubmVyJzsKICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoZXJyKTsKICAgIGJ1dHRvbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh3cmFwcGVyLCBidXR0b24pOwogICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2lkXj0iX2Zvcm0iXVtpZCQ9Il9zdWJtaXQiXScpLmRpc2FibGVkID0gZmFsc2U7CiAgICBpZiAoaHRtbCkgewogICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgIGRpdi5jbGFzc05hbWUgPSAnX2Vycm9yLWh0bWwnOwogICAgICBkaXYuaW5uZXJIVE1MID0gaHRtbDsKICAgICAgZXJyLmFwcGVuZENoaWxkKGRpdik7CiAgICB9CiAgfTsKICB3aW5kb3cuX2xvYWRfc2NyaXB0ID0gZnVuY3Rpb24odXJsLCBjYWxsYmFjaykgewogICAgdmFyIGhlYWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkJyksIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpLCByID0gZmFsc2U7CiAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwogICAgc2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnOwogICAgc2NyaXB0LnNyYyA9IHVybDsKICAgIGlmIChjYWxsYmFjaykgewogICAgICBzY3JpcHQub25sb2FkID0gc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmICghciAmJiAoIXRoaXMucmVhZHlTdGF0ZSB8fCB0aGlzLnJlYWR5U3RhdGUgPT0gJ2NvbXBsZXRlJykpIHsKICAgICAgICAgIHIgPSB0cnVlOwogICAgICAgICAgY2FsbGJhY2soKTsKICAgICAgICB9CiAgICAgIH07CiAgICB9CiAgICBoZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7CiAgfTsKICAoZnVuY3Rpb24oKSB7CiAgICBpZiAod2luZG93LmxvY2F0aW9uLnNlYXJjaC5zZWFyY2goImV4Y2x1ZGVmb3JtIikgIT09IC0xKSByZXR1cm4gZmFsc2U7CiAgICB2YXIgZ2V0Q29va2llID0gZnVuY3Rpb24obmFtZSkgewogICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58OyApJyArIG5hbWUgKyAnPShbXjtdKyknKSk7CiAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzJdIDogbnVsbDsKICAgIH0KICAgIHZhciBzZXRDb29raWUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkgewogICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTsKICAgICAgdmFyIHRpbWUgPSBub3cuZ2V0VGltZSgpOwogICAgICB2YXIgZXhwaXJlVGltZSA9IHRpbWUgKyAxMDAwICogNjAgKiA2MCAqIDI0ICogMzY1OwogICAgICBub3cuc2V0VGltZShleHBpcmVUaW1lKTsKICAgICAgZG9jdW1lbnQuY29va2llID0gbmFtZSArICc9JyArIHZhbHVlICsgJzsgZXhwaXJlcz0nICsgbm93ICsgJztwYXRoPS87IFNlY3VyZTsgU2FtZVNpdGU9TGF4Oyc7Ly8gY2Fubm90IGJlIEh0dHBPbmx5CiAgICB9CiAgICB2YXIgYWRkRXZlbnQgPSBmdW5jdGlvbihlbGVtZW50LCBldmVudCwgZnVuYykgewogICAgICBpZiAoZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKSB7CiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBmdW5jKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgb2xkRnVuYyA9IGVsZW1lbnRbJ29uJyArIGV2ZW50XTsKICAgICAgICBlbGVtZW50WydvbicgKyBldmVudF0gPSBmdW5jdGlvbigpIHsKICAgICAgICAgIG9sZEZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB9OwogICAgICB9CiAgICB9CiAgICB2YXIgX3JlbW92ZWQgPSBmYWxzZTsKICAgIHZhciBmb3JtX3RvX3N1Ym1pdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdfZm9ybV8yM18nKTsKICAgIHZhciBhbGxJbnB1dHMgPSBmb3JtX3RvX3N1Ym1pdC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYScpLCB0b29sdGlwcyA9IFtdLCBzdWJtaXR0ZWQgPSBmYWxzZTsKCiAgICB2YXIgZ2V0VXJsUGFyYW0gPSBmdW5jdGlvbihuYW1lKSB7CiAgICAgIHZhciBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpOwogICAgICByZXR1cm4gcGFyYW1zLmdldChuYW1lKSB8fCBmYWxzZTsKICAgIH07CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGxJbnB1dHMubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIHJlZ2V4U3RyID0gImZpZWxkXFxbKFxcZCspXFxdIjsKICAgICAgdmFyIHJlc3VsdHMgPSBuZXcgUmVnRXhwKHJlZ2V4U3RyKS5leGVjKGFsbElucHV0c1tpXS5uYW1lKTsKICAgICAgaWYgKHJlc3VsdHMgIT0gdW5kZWZpbmVkKSB7CiAgICAgICAgYWxsSW5wdXRzW2ldLmRhdGFzZXQubmFtZSA9IHdpbmRvdy5jZmllbGRzW3Jlc3VsdHNbMV1dOwogICAgICB9IGVsc2UgewogICAgICAgIGFsbElucHV0c1tpXS5kYXRhc2V0Lm5hbWUgPSBhbGxJbnB1dHNbaV0ubmFtZTsKICAgICAgfQogICAgICB2YXIgZmllbGRWYWwgPSBnZXRVcmxQYXJhbShhbGxJbnB1dHNbaV0uZGF0YXNldC5uYW1lKTsKCiAgICAgIGlmIChmaWVsZFZhbCkgewogICAgICAgIGlmIChhbGxJbnB1dHNbaV0uZGF0YXNldC5hdXRvZmlsbCA9PT0gImZhbHNlIikgewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGlmIChhbGxJbnB1dHNbaV0udHlwZSA9PSAicmFkaW8iIHx8IGFsbElucHV0c1tpXS50eXBlID09ICJjaGVja2JveCIpIHsKICAgICAgICAgIGlmIChhbGxJbnB1dHNbaV0udmFsdWUgPT0gZmllbGRWYWwpIHsKICAgICAgICAgICAgYWxsSW5wdXRzW2ldLmNoZWNrZWQgPSB0cnVlOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBhbGxJbnB1dHNbaV0udmFsdWUgPSBmaWVsZFZhbDsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICB2YXIgcmVtb3ZlX3Rvb2x0aXBzID0gZnVuY3Rpb24oKSB7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9vbHRpcHMubGVuZ3RoOyBpKyspIHsKICAgICAgICB0b29sdGlwc1tpXS50aXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0b29sdGlwc1tpXS50aXApOwogICAgICB9CiAgICAgIHRvb2x0aXBzID0gW107CiAgICB9OwogICAgdmFyIHJlbW92ZV90b29sdGlwID0gZnVuY3Rpb24oZWxlbSkgewogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvb2x0aXBzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKHRvb2x0aXBzW2ldLmVsZW0gPT09IGVsZW0pIHsKICAgICAgICAgIHRvb2x0aXBzW2ldLnRpcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRvb2x0aXBzW2ldLnRpcCk7CiAgICAgICAgICB0b29sdGlwcy5zcGxpY2UoaSwgMSk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICB9CiAgICB9OwogICAgdmFyIGNyZWF0ZV90b29sdGlwID0gZnVuY3Rpb24oZWxlbSwgdGV4dCkgewogICAgICB2YXIgdG9vbHRpcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCBhcnJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCBpbm5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCBuZXdfdG9vbHRpcCA9IHt9OwogICAgICBpZiAoZWxlbS50eXBlICE9ICdyYWRpbycgJiYgZWxlbS50eXBlICE9ICdjaGVja2JveCcpIHsKICAgICAgICB0b29sdGlwLmNsYXNzTmFtZSA9ICdfZXJyb3IgdGV4dC1zbSB0ZXh0LW11dGVkIHRleHQtc3RhcnQnOwogICAgICAgIGFycm93LmNsYXNzTmFtZSA9ICdfZXJyb3ItYXJyb3cnOwogICAgICAgIGlubmVyLmNsYXNzTmFtZSA9ICdfZXJyb3ItaW5uZXInOwogICAgICAgIGlubmVyLmlubmVySFRNTCA9IHRleHQ7CiAgICAgICAgdG9vbHRpcC5hcHBlbmRDaGlsZChhcnJvdyk7CiAgICAgICAgdG9vbHRpcC5hcHBlbmRDaGlsZChpbm5lcik7CiAgICAgICAgZWxlbS5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHRvb2x0aXApOwogICAgICB9IGVsc2UgewogICAgICAgIHRvb2x0aXAuY2xhc3NOYW1lID0gJ19lcnJvci1pbm5lciBfbm9fYXJyb3cnOwogICAgICAgIHRvb2x0aXAuaW5uZXJIVE1MID0gdGV4dDsKICAgICAgICBlbGVtLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRvb2x0aXAsIGVsZW0pOwogICAgICAgIG5ld190b29sdGlwLm5vX2Fycm93ID0gdHJ1ZTsKICAgICAgfQogICAgICBuZXdfdG9vbHRpcC50aXAgPSB0b29sdGlwOwogICAgICBuZXdfdG9vbHRpcC5lbGVtID0gZWxlbTsKICAgICAgdG9vbHRpcHMucHVzaChuZXdfdG9vbHRpcCk7CiAgICAgIHJldHVybiBuZXdfdG9vbHRpcDsKICAgIH07CiAgICB2YXIgcmVzaXplX3Rvb2x0aXAgPSBmdW5jdGlvbih0b29sdGlwKSB7CiAgICAgIHZhciByZWN0ID0gdG9vbHRpcC5lbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgICB2YXIgZG9jID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBzY3JvbGxQb3NpdGlvbiA9IHJlY3QudG9wIC0gKCh3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jLnNjcm9sbFRvcCkgIC0gKGRvYy5jbGllbnRUb3AgfHwgMCkpOwogICAgICBpZiAoc2Nyb2xsUG9zaXRpb24gPCA0MCkgewogICAgICAgIHRvb2x0aXAudGlwLmNsYXNzTmFtZSA9IHRvb2x0aXAudGlwLmNsYXNzTmFtZS5yZXBsYWNlKC8gPyhfYWJvdmV8X2JlbG93KSA/L2csICcnKSArICcgX2JlbG93JzsKICAgICAgfSBlbHNlIHsKICAgICAgICB0b29sdGlwLnRpcC5jbGFzc05hbWUgPSB0b29sdGlwLnRpcC5jbGFzc05hbWUucmVwbGFjZSgvID8oX2Fib3ZlfF9iZWxvdykgPy9nLCAnJykgKyAnIF9hYm92ZSc7CiAgICAgIH0KICAgIH07CiAgICB2YXIgcmVzaXplX3Rvb2x0aXBzID0gZnVuY3Rpb24oKSB7CiAgICAgIGlmIChfcmVtb3ZlZCkgcmV0dXJuOwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvb2x0aXBzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKCF0b29sdGlwc1tpXS5ub19hcnJvdykgcmVzaXplX3Rvb2x0aXAodG9vbHRpcHNbaV0pOwogICAgICB9CiAgICB9OwogICAgdmFyIHZhbGlkYXRlX2ZpZWxkID0gZnVuY3Rpb24oZWxlbSwgcmVtb3ZlKSB7CiAgICAgIHZhciB0b29sdGlwID0gbnVsbCwgdmFsdWUgPSBlbGVtLnZhbHVlLCBub19lcnJvciA9IHRydWU7CiAgICAgIHJlbW92ZSA/IHJlbW92ZV90b29sdGlwKGVsZW0pIDogZmFsc2U7CiAgICAgIGlmIChlbGVtLnR5cGUgIT0gJ2NoZWNrYm94JykgZWxlbS5jbGFzc05hbWUgPSBlbGVtLmNsYXNzTmFtZS5yZXBsYWNlKC8gP19oYXNfZXJyb3IgPy9nLCAnJyk7CiAgICAgIGlmIChlbGVtLmdldEF0dHJpYnV0ZSgncmVxdWlyZWQnKSAhPT0gbnVsbCkgewogICAgICAgIGlmIChlbGVtLnR5cGUgPT0gJ3JhZGlvJyB8fCAoZWxlbS50eXBlID09ICdjaGVja2JveCcgJiYgL2FueS8udGVzdChlbGVtLmNsYXNzTmFtZSkpKSB7CiAgICAgICAgICB2YXIgZWxlbXMgPSBmb3JtX3RvX3N1Ym1pdC5lbGVtZW50c1tlbGVtLm5hbWVdOwogICAgICAgICAgaWYgKCEoZWxlbXMgaW5zdGFuY2VvZiBOb2RlTGlzdCB8fCBlbGVtcyBpbnN0YW5jZW9mIEhUTUxDb2xsZWN0aW9uKSB8fCBlbGVtcy5sZW5ndGggPD0gMSkgewogICAgICAgICAgICBub19lcnJvciA9IGVsZW0uY2hlY2tlZDsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICBub19lcnJvciA9IGZhbHNlOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgaWYgKGVsZW1zW2ldLmNoZWNrZWQpIG5vX2Vycm9yID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKCFub19lcnJvcikgewogICAgICAgICAgICB0b29sdGlwID0gY3JlYXRlX3Rvb2x0aXAoZWxlbSwgIlBsZWFzZSBzZWxlY3QgYW4gb3B0aW9uLiIpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoZWxlbS50eXBlID09J2NoZWNrYm94JykgewogICAgICAgICAgdmFyIGVsZW1zID0gZm9ybV90b19zdWJtaXQuZWxlbWVudHNbZWxlbS5uYW1lXSwgZm91bmQgPSBmYWxzZSwgZXJyID0gW107CiAgICAgICAgICBub19lcnJvciA9IHRydWU7CiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChlbGVtc1tpXS5nZXRBdHRyaWJ1dGUoJ3JlcXVpcmVkJykgPT09IG51bGwpIGNvbnRpbnVlOwogICAgICAgICAgICBpZiAoIWZvdW5kICYmIGVsZW1zW2ldICE9PSBlbGVtKSByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgZm91bmQgPSB0cnVlOwogICAgICAgICAgICBlbGVtc1tpXS5jbGFzc05hbWUgPSBlbGVtc1tpXS5jbGFzc05hbWUucmVwbGFjZSgvID9faGFzX2Vycm9yID8vZywgJycpOwogICAgICAgICAgICBpZiAoIWVsZW1zW2ldLmNoZWNrZWQpIHsKICAgICAgICAgICAgICBub19lcnJvciA9IGZhbHNlOwogICAgICAgICAgICAgIGVsZW1zW2ldLmNsYXNzTmFtZSA9IGVsZW1zW2ldLmNsYXNzTmFtZSArICcgX2hhc19lcnJvcic7CiAgICAgICAgICAgICAgZXJyLnB1c2goIkNoZWNraW5nICVzIGlzIHJlcXVpcmVkIi5yZXBsYWNlKCIlcyIsIGVsZW1zW2ldLnZhbHVlKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmICghbm9fZXJyb3IpIHsKICAgICAgICAgICAgdG9vbHRpcCA9IGNyZWF0ZV90b29sdGlwKGVsZW0sIGVyci5qb2luKCc8YnIvPicpKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKGVsZW0udGFnTmFtZSA9PSAnU0VMRUNUJykgewogICAgICAgICAgdmFyIHNlbGVjdGVkID0gdHJ1ZTsKICAgICAgICAgIGlmIChlbGVtLm11bHRpcGxlKSB7CiAgICAgICAgICAgIHNlbGVjdGVkID0gZmFsc2U7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbS5vcHRpb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgaWYgKGVsZW0ub3B0aW9uc1tpXS5zZWxlY3RlZCkgewogICAgICAgICAgICAgICAgc2VsZWN0ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW0ub3B0aW9ucy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgIGlmIChlbGVtLm9wdGlvbnNbaV0uc2VsZWN0ZWQgJiYgKCFlbGVtLm9wdGlvbnNbaV0udmFsdWUgfHwgKGVsZW0ub3B0aW9uc1tpXS52YWx1ZS5tYXRjaCgvXG4vZykpKSkgewogICAgICAgICAgICAgICAgc2VsZWN0ZWQgPSBmYWxzZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmICghc2VsZWN0ZWQpIHsKICAgICAgICAgICAgZWxlbS5jbGFzc05hbWUgPSBlbGVtLmNsYXNzTmFtZSArICcgX2hhc19lcnJvcic7CiAgICAgICAgICAgIG5vX2Vycm9yID0gZmFsc2U7CiAgICAgICAgICAgIHRvb2x0aXAgPSBjcmVhdGVfdG9vbHRpcChlbGVtLCAiUGxlYXNlIHNlbGVjdCBhbiBvcHRpb24uIik7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSAnJykgewogICAgICAgICAgZWxlbS5jbGFzc05hbWUgPSBlbGVtLmNsYXNzTmFtZSArICcgX2hhc19lcnJvcic7CiAgICAgICAgICBub19lcnJvciA9IGZhbHNlOwogICAgICAgICAgdG9vbHRpcCA9IGNyZWF0ZV90b29sdGlwKGVsZW0sICJUaGlzIGZpZWxkIGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChub19lcnJvciAmJiAoZWxlbS5pZCA9PSAnZmllbGRbXScgfHwgZWxlbS5pZCA9PSAnY2FbMTFdW3ZdJykpIHsKICAgICAgICBpZiAoZWxlbS5jbGFzc05hbWUuaW5jbHVkZXMoJ3Bob25lLWlucHV0LWVycm9yJykpIHsKICAgICAgICAgIGVsZW0uY2xhc3NOYW1lID0gZWxlbS5jbGFzc05hbWUgKyAnIF9oYXNfZXJyb3InOwogICAgICAgICAgbm9fZXJyb3IgPSBmYWxzZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKG5vX2Vycm9yICYmIGVsZW0ubmFtZSA9PSAnZW1haWwnKSB7CiAgICAgICAgaWYgKCF2YWx1ZS5tYXRjaCgvXltcK19hLXowLTktJyY9XSsoXC5bXCtfYS16MC05LSddKykqQFthLXowLTktXSsoXC5bYS16MC05LV0rKSooXC5bYS16XXsyLH0pJC9pKSkgewogICAgICAgICAgZWxlbS5jbGFzc05hbWUgPSBlbGVtLmNsYXNzTmFtZSArICcgX2hhc19lcnJvcic7CiAgICAgICAgICBub19lcnJvciA9IGZhbHNlOwogICAgICAgICAgdG9vbHRpcCA9IGNyZWF0ZV90b29sdGlwKGVsZW0sICdQbGVhc2UgZW50ZXIgYSB2YWxpZCBlbWFpbCBhZGRyZXNzJyk7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChub19lcnJvciAmJiAvZGF0ZV9maWVsZC8udGVzdChlbGVtLmNsYXNzTmFtZSkpIHsKICAgICAgICBpZiAoIXZhbHVlLm1hdGNoKC9eXGRcZFxkXGQtXGRcZC1cZFxkJC8pKSB7CiAgICAgICAgICBlbGVtLmNsYXNzTmFtZSA9IGVsZW0uY2xhc3NOYW1lICsgJyBfaGFzX2Vycm9yJzsKICAgICAgICAgIG5vX2Vycm9yID0gZmFsc2U7CiAgICAgICAgICB0b29sdGlwID0gY3JlYXRlX3Rvb2x0aXAoZWxlbSwgIkVudGVyIGEgdmFsaWQgZGF0ZS4iKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgdG9vbHRpcCA/IHJlc2l6ZV90b29sdGlwKHRvb2x0aXApIDogZmFsc2U7CiAgICAgIHJldHVybiBub19lcnJvcjsKICAgIH07CiAgICB2YXIgbmVlZHNfdmFsaWRhdGUgPSBmdW5jdGlvbihlbCkgewogICAgICBpZihlbC5nZXRBdHRyaWJ1dGUoJ3JlcXVpcmVkJykgIT09IG51bGwpewogICAgICAgIHJldHVybiB0cnVlCiAgICAgIH0KICAgICAgaWYoZWwubmFtZSA9PT0gJ2VtYWlsJyAmJiBlbC52YWx1ZSAhPT0gIiIpewogICAgICAgIHJldHVybiB0cnVlCiAgICAgIH0KCiAgICAgIGlmKChlbC5pZCA9PSAnZmllbGRbXScgfHwgZWwuaWQgPT0gJ2NhWzExXVt2XScpICYmIGVsLmNsYXNzTmFtZS5pbmNsdWRlcygncGhvbmUtaW5wdXQtZXJyb3InKSl7CiAgICAgICAgcmV0dXJuIHRydWUKICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlCiAgICB9OwogICAgdmFyIHZhbGlkYXRlX2Zvcm0gPSBmdW5jdGlvbihlKSB7CiAgICAgIHZhciBlcnIgPSBmb3JtX3RvX3N1Ym1pdC5xdWVyeVNlbGVjdG9yKCcuX2Zvcm1fZXJyb3InKSwgbm9fZXJyb3IgPSB0cnVlOwogICAgICBpZiAoIXN1Ym1pdHRlZCkgewogICAgICAgIHN1Ym1pdHRlZCA9IHRydWU7CiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFsbElucHV0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogICAgICAgICAgdmFyIGlucHV0ID0gYWxsSW5wdXRzW2ldOwogICAgICAgICAgaWYgKG5lZWRzX3ZhbGlkYXRlKGlucHV0KSkgewogICAgICAgICAgICBpZiAoaW5wdXQudHlwZSA9PSAndGVsJykgewogICAgICAgICAgICAgIGFkZEV2ZW50KGlucHV0LCAnYmx1cicsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUudHJpbSgpOwogICAgICAgICAgICAgICAgdmFsaWRhdGVfZmllbGQodGhpcywgdHJ1ZSk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGlucHV0LnR5cGUgPT0gJ3RleHQnIHx8IGlucHV0LnR5cGUgPT0gJ251bWJlcicgfHwgaW5wdXQudHlwZSA9PSAndGltZScpIHsKICAgICAgICAgICAgICBhZGRFdmVudChpbnB1dCwgJ2JsdXInLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLnRyaW0oKTsKICAgICAgICAgICAgICAgIHZhbGlkYXRlX2ZpZWxkKHRoaXMsIHRydWUpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGFkZEV2ZW50KGlucHV0LCAnaW5wdXQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhbGlkYXRlX2ZpZWxkKHRoaXMsIHRydWUpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0LnR5cGUgPT0gJ3JhZGlvJyB8fCBpbnB1dC50eXBlID09ICdjaGVja2JveCcpIHsKICAgICAgICAgICAgICAoZnVuY3Rpb24oZWwpIHsKICAgICAgICAgICAgICAgIHZhciByYWRpb3MgPSBmb3JtX3RvX3N1Ym1pdC5lbGVtZW50c1tlbC5uYW1lXTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmFkaW9zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgIGFkZEV2ZW50KHJhZGlvc1tpXSwgJ2NsaWNrJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVfZmllbGQoZWwsIHRydWUpOwogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KShpbnB1dCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQudGFnTmFtZSA9PSAnU0VMRUNUJykgewogICAgICAgICAgICAgIGFkZEV2ZW50KGlucHV0LCAnY2hhbmdlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YWxpZGF0ZV9maWVsZCh0aGlzLCB0cnVlKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dC50eXBlID09ICd0ZXh0YXJlYScpewogICAgICAgICAgICAgIGFkZEV2ZW50KGlucHV0LCAnaW5wdXQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhbGlkYXRlX2ZpZWxkKHRoaXMsIHRydWUpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHJlbW92ZV90b29sdGlwcygpOwogICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYWxsSW5wdXRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgdmFyIGVsZW0gPSBhbGxJbnB1dHNbaV07CiAgICAgICAgaWYgKG5lZWRzX3ZhbGlkYXRlKGVsZW0pKSB7CiAgICAgICAgICBpZiAoZWxlbS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICJzZWxlY3QiKSB7CiAgICAgICAgICAgIGVsZW0udmFsdWUgPSBlbGVtLnZhbHVlLnRyaW0oKTsKICAgICAgICAgIH0KICAgICAgICAgIHZhbGlkYXRlX2ZpZWxkKGVsZW0pID8gdHJ1ZSA6IG5vX2Vycm9yID0gZmFsc2U7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmICghbm9fZXJyb3IgJiYgZSkgewogICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgfQogICAgICByZXNpemVfdG9vbHRpcHMoKTsKICAgICAgcmV0dXJuIG5vX2Vycm9yOwogICAgfTsKICAgIGFkZEV2ZW50KHdpbmRvdywgJ3Jlc2l6ZScsIHJlc2l6ZV90b29sdGlwcyk7CiAgICBhZGRFdmVudCh3aW5kb3csICdzY3JvbGwnLCByZXNpemVfdG9vbHRpcHMpOwoKICAgIHZhciBoaWRlUGhvbmVJbnB1dEVycm9yID0gZnVuY3Rpb24oaW5wdXRJZCkgewogICAgICB2YXIgZXJyb3JNZXNzYWdlID0gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJlcnJvci1tc2ctIiArIGlucHV0SWQpOwogICAgICB2YXIgaW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpbnB1dElkKTsKICAgICAgZXJyb3JNZXNzYWdlLmNsYXNzTGlzdC5yZW1vdmUoInBob25lLWVycm9yIik7CiAgICAgIGVycm9yTWVzc2FnZS5jbGFzc0xpc3QuYWRkKCJwaG9uZS1lcnJvci1oaWRkZW4iKTsKICAgICAgaW5wdXQuY2xhc3NMaXN0LnJlbW92ZSgicGhvbmUtaW5wdXQtZXJyb3IiKTsKICAgIH07CgogICAgdmFyIGluaXRpYWxpemVQaG9uZUlucHV0ID0gZnVuY3Rpb24oaW5wdXQsIGRlZmF1bHRDb3VudHJ5KSB7CiAgICAgIHJldHVybiB3aW5kb3cuaW50bFRlbElucHV0KGlucHV0LCB7CiAgICAgICAgdXRpbHNTY3JpcHQ6ICJodHRwczovL3VucGtnLmNvbS9pbnRsLXRlbC1pbnB1dEAxNy4wLjE4L2J1aWxkL2pzL3V0aWxzLmpzIiwKICAgICAgICBhdXRvSGlkZURpYWxDb2RlOiBmYWxzZSwKICAgICAgICBzZXBhcmF0ZURpYWxDb2RlOiB0cnVlLAogICAgICAgIGluaXRpYWxDb3VudHJ5OiBkZWZhdWx0Q291bnRyeSwKICAgICAgICBwcmVmZXJyZWRDb3VudHJpZXM6IFtdCiAgICAgIH0pOwogICAgfQoKICAgIHZhciBzZXRQaG9uZUlucHV0RXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbihpbnB1dElkLCBpbnB1dCwgaXRpKSB7CiAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImVycm9yLW1zZy0iICsgaW5wdXRJZCk7CiAgICAgICAgaWYgKGlucHV0LnZhbHVlLnRyaW0oKSkgewogICAgICAgICAgaWYgKGl0aS5pc1ZhbGlkTnVtYmVyKCkpIHsKICAgICAgICAgICAgaXRpLnNldE51bWJlcihpdGkuZ2V0TnVtYmVyKCkpOwogICAgICAgICAgICBpZiAoZXJyb3JNZXNzYWdlLmNsYXNzTGlzdC5jb250YWlucygicGhvbmUtZXJyb3IiKSl7CiAgICAgICAgICAgICAgaGlkZVBob25lSW5wdXRFcnJvcihpbnB1dElkKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc2hvd1Bob25lSW5wdXRFcnJvcihpbnB1dElkKQogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAoZXJyb3JNZXNzYWdlLmNsYXNzTGlzdC5jb250YWlucygicGhvbmUtZXJyb3IiKSl7CiAgICAgICAgICAgIGhpZGVQaG9uZUlucHV0RXJyb3IoaW5wdXRJZCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoImNvdW50cnljaGFuZ2UiLCBmdW5jdGlvbigpIHsKICAgICAgICBpdGkuc2V0TnVtYmVyKCcnKTsKICAgICAgfSk7CgogICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCJrZXlkb3duIiwgZnVuY3Rpb24oZSkgewogICAgICAgIHZhciBjaGFyQ29kZSA9IChlLndoaWNoKSA/IGUud2hpY2ggOiBlLmtleUNvZGU7CiAgICAgICAgaWYgKGNoYXJDb2RlID4gMzEgJiYgKGNoYXJDb2RlIDwgNDggfHwgY2hhckNvZGUgPiA1NykgJiYgY2hhckNvZGUgIT09IDgpIHsKICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfTsKCiAgICB2YXIgc2hvd1Bob25lSW5wdXRFcnJvciA9IGZ1bmN0aW9uKGlucHV0SWQpIHsKICAgICAgdmFyIGVycm9yTWVzc2FnZSA9ICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZXJyb3ItbXNnLSIgKyBpbnB1dElkKTsKICAgICAgdmFyIGlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5wdXRJZCk7CiAgICAgIGVycm9yTWVzc2FnZS5jbGFzc0xpc3QuYWRkKCJwaG9uZS1lcnJvciIpOwogICAgICBlcnJvck1lc3NhZ2UuY2xhc3NMaXN0LnJlbW92ZSgicGhvbmUtZXJyb3ItaGlkZGVuIik7CiAgICAgIGlucHV0LmNsYXNzTGlzdC5hZGQoInBob25lLWlucHV0LWVycm9yIik7CiAgICB9OwoKCiAgICB2YXIgX2Zvcm1fc2VyaWFsaXplID0gZnVuY3Rpb24oZm9ybSl7aWYoIWZvcm18fGZvcm0ubm9kZU5hbWUhPT0iRk9STSIpe3JldHVybiB9dmFyIGksaixxPVtdO2ZvcihpPTA7aTxmb3JtLmVsZW1lbnRzLmxlbmd0aDtpKyspe2lmKGZvcm0uZWxlbWVudHNbaV0ubmFtZT09PSIiKXtjb250aW51ZX1zd2l0Y2goZm9ybS5lbGVtZW50c1tpXS5ub2RlTmFtZSl7Y2FzZSJJTlBVVCI6c3dpdGNoKGZvcm0uZWxlbWVudHNbaV0udHlwZSl7Y2FzZSJ0ZWwiOnEucHVzaChmb3JtLmVsZW1lbnRzW2ldLm5hbWUrIj0iK2VuY29kZVVSSUNvbXBvbmVudChmb3JtLmVsZW1lbnRzW2ldLnByZXZpb3VzU2libGluZy5xdWVyeVNlbGVjdG9yKCdkaXYuaXRpX19zZWxlY3RlZC1kaWFsLWNvZGUnKS5pbm5lclRleHQpK2VuY29kZVVSSUNvbXBvbmVudCgiICIpK2VuY29kZVVSSUNvbXBvbmVudChmb3JtLmVsZW1lbnRzW2ldLnZhbHVlKSk7YnJlYWs7Y2FzZSJ0ZXh0IjpjYXNlIm51bWJlciI6Y2FzZSJkYXRlIjpjYXNlInRpbWUiOmNhc2UiaGlkZGVuIjpjYXNlInBhc3N3b3JkIjpjYXNlImJ1dHRvbiI6Y2FzZSJyZXNldCI6Y2FzZSJzdWJtaXQiOnEucHVzaChmb3JtLmVsZW1lbnRzW2ldLm5hbWUrIj0iK2VuY29kZVVSSUNvbXBvbmVudChmb3JtLmVsZW1lbnRzW2ldLnZhbHVlKSk7YnJlYWs7Y2FzZSJjaGVja2JveCI6Y2FzZSJyYWRpbyI6aWYoZm9ybS5lbGVtZW50c1tpXS5jaGVja2VkKXtxLnB1c2goZm9ybS5lbGVtZW50c1tpXS5uYW1lKyI9IitlbmNvZGVVUklDb21wb25lbnQoZm9ybS5lbGVtZW50c1tpXS52YWx1ZSkpfWJyZWFrO2Nhc2UiZmlsZSI6YnJlYWt9YnJlYWs7Y2FzZSJURVhUQVJFQSI6cS5wdXNoKGZvcm0uZWxlbWVudHNbaV0ubmFtZSsiPSIrZW5jb2RlVVJJQ29tcG9uZW50KGZvcm0uZWxlbWVudHNbaV0udmFsdWUpKTticmVhaztjYXNlIlNFTEVDVCI6c3dpdGNoKGZvcm0uZWxlbWVudHNbaV0udHlwZSl7Y2FzZSJzZWxlY3Qtb25lIjpxLnB1c2goZm9ybS5lbGVtZW50c1tpXS5uYW1lKyI9IitlbmNvZGVVUklDb21wb25lbnQoZm9ybS5lbGVtZW50c1tpXS52YWx1ZSkpO2JyZWFrO2Nhc2Uic2VsZWN0LW11bHRpcGxlIjpmb3Ioaj0wO2o8Zm9ybS5lbGVtZW50c1tpXS5vcHRpb25zLmxlbmd0aDtqKyspe2lmKGZvcm0uZWxlbWVudHNbaV0ub3B0aW9uc1tqXS5zZWxlY3RlZCl7cS5wdXNoKGZvcm0uZWxlbWVudHNbaV0ubmFtZSsiPSIrZW5jb2RlVVJJQ29tcG9uZW50KGZvcm0uZWxlbWVudHNbaV0ub3B0aW9uc1tqXS52YWx1ZSkpfX1icmVha31icmVhaztjYXNlIkJVVFRPTiI6c3dpdGNoKGZvcm0uZWxlbWVudHNbaV0udHlwZSl7Y2FzZSJyZXNldCI6Y2FzZSJzdWJtaXQiOmNhc2UiYnV0dG9uIjpxLnB1c2goZm9ybS5lbGVtZW50c1tpXS5uYW1lKyI9IitlbmNvZGVVUklDb21wb25lbnQoZm9ybS5lbGVtZW50c1tpXS52YWx1ZSkpO2JyZWFrfWJyZWFrfX1yZXR1cm4gcS5qb2luKCImIil9OwogICAgdmFyIGZvcm1fc3VibWl0ID0gZnVuY3Rpb24oZSkgewogICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgIGlmICh2YWxpZGF0ZV9mb3JtKCkpIHsKICAgICAgICAvLyB1c2UgdGhpcyB0cmljayB0byBnZXQgdGhlIHN1Ym1pdCBidXR0b24gJiBkaXNhYmxlIGl0IHVzaW5nIHBsYWluIGphdmFzY3JpcHQKICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjX2Zvcm1fMjNfc3VibWl0JykuZGlzYWJsZWQgPSB0cnVlOwogICAgICAgIHZhciBzZXJpYWxpemVkID0gX2Zvcm1fc2VyaWFsaXplKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdfZm9ybV8yM18nKSkucmVwbGFjZSgvJTBBL2csICdcXG4nKTsKICAgICAgICB2YXIgZXJyID0gZm9ybV90b19zdWJtaXQucXVlcnlTZWxlY3RvcignLl9mb3JtX2Vycm9yJyk7CiAgICAgICAgZXJyID8gZXJyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZXJyKSA6IGZhbHNlOwogICAgICAgIF9sb2FkX3NjcmlwdCgnaHR0cHM6Ly9pc28yNzIuYWN0aXZlaG9zdGVkLmNvbS9wcm9jLnBocD8nICsgc2VyaWFsaXplZCArICcmanNvbnA9dHJ1ZScpOwogICAgICB9CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH07CiAgICBhZGRFdmVudChmb3JtX3RvX3N1Ym1pdCwgJ3N1Ym1pdCcsIGZvcm1fc3VibWl0KTsKICB9KSgpOwoKPC9zY3JpcHQ+PHAgY2xhc3M9InRleHQteHMiPlRvIGxlYXJuIGhvdyB5b3VyIGRhdGEgd2lsbCBiZSB1c2VkLCBwbGVhc2Ugc2VlIG91ciA8YSBocmVmPSIvcHJpdmFjeS5odG1sIiB0aXRsZT0icHJpdmFjeS1hbmQtY29weXJpZ2h0Ij5wcml2YWN5IG5vdGljZTwvYT4uPC9wPjwvZGl2PjwvZGl2PjwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlci1zb2NpYWwgY2xlYXJmaXgiPgogICAgICAgICAgPHVsIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL09yZ2FuaXphdGlvbiI+CiAgICAgICAgICAgIDxsaW5rIGl0ZW1wcm9wPSJ1cmwiIGhyZWY9Imh0dHBzOi8vd3d3Lmlzby5vcmcvIj4KICAgICAgICAgICAgPGxpPjxhIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiBocmVmPSJodHRwczovL3d3dy5saW5rZWRpbi5jb20vY29tcGFueS9pc29zdGFuZGFyZHMiIHRpdGxlPSJMaW5rZWRpbiI+PGkgY2xhc3M9ImJpLWxpbmtlZGluIj48L2k+PC9hPjwvbGk+CiAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgaHJlZj0iaHR0cHM6Ly90d2l0dGVyLmNvbS9pc29zdGFuZGFyZHMiIHRpdGxlPSJUd2l0dGVyIj48aSBjbGFzcz0iYmktdHdpdHRlciI+PC9pPjwvYT48L2xpPgogICAgICAgICAgICA8bGk+PGEgaXRlbXByb3A9InNhbWVBcyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIGhyZWY9Imh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9pc29zdGFuZGFyZHMiIHRpdGxlPSJGYWNlYm9vayI+PGkgY2xhc3M9ImJpLWZhY2Vib29rIj48L2k+PC9hPjwvbGk+CiAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgaHJlZj0iaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9pc29zdGFuZGFyZHMiIHRpdGxlPSJJbnN0YWdyYW0iPjxpIGNsYXNzPSJiaS1pbnN0YWdyYW0iPjwvaT48L2E+PC9saT4KICAgICAgICAgICAgPGxpPjxhIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS9JU08iIHRpdGxlPSJZb3VUdWJlIj48aSBjbGFzcz0iYmkteW91dHViZSI+PC9pPjwvYT48L2xpPgogICAgICAgICAgICA8bGk+PGEgaXRlbXByb3A9InNhbWVBcyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIGhyZWY9Imh0dHBzOi8vd3d3LmZsaWNrci5jb20vcGhvdG9zL2lzb3N0YW5kYXJkcyIgdGl0bGU9IkZsaWNrciI+PGkgY2xhc3M9ImJpLWZsaWNrciI+PC9pPjwvYT48L2xpPgogICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgICAgICA8cCBjbGFzcz0iZGlzcGxheS01IG9wYWNpdHktMTAwIj5NYWtpbmcgbGl2ZXMgPHN0cm9uZz48ZW0+ZWFzaWVyPC9lbT48L3N0cm9uZz4sIDxzdHJvbmc+PGVtPnNhZmVyPC9lbT48L3N0cm9uZz4gYW5kIDxzdHJvbmc+PGVtPmJldHRlcjwvZW0+PC9zdHJvbmc+LjwvcD4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTggY29sLW1kLW9mZnNldC0yIHB1bGwtbGVmdCI+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LXhzIj5XZSBhcmUgY29tbWl0dGVkIHRvIGVuc3VyaW5nIHRoYXQgb3VyIHdlYnNpdGUgaXMgYWNjZXNzaWJsZSB0byBldmVyeW9uZS4gSWYgeW91IGhhdmUgYW55IHF1ZXN0aW9ucyBvciBzdWdnZXN0aW9ucyByZWdhcmRpbmcgdGhlIGFjY2Vzc2liaWxpdHkgb2YgdGhpcyBzaXRlLCBwbGVhc2UgPGEgaHJlZj0ibWFpbHRvOndlYm1hc3RlckBpc28ub3JnP3N1YmplY3Q9QWNjZXNzaWJpbGl0eSIgc3R5bGU9IndoaXRlLXNwYWNlOiBub3dyYXAiPmNvbnRhY3QgdXM8L2E+LjwvcD4KICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtc20iPjxhIGhyZWY9IiNjb3B5cmlnaHQiIHRhcmdldD0iX3NlbGYiIGRhdGEtYnMtdG9nZ2xlPSJjb2xsYXBzZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtY29udHJvbHM9ImNvcHlyaWdodCI+wqkgQWxsIFJpZ2h0cyBSZXNlcnZlZDwvYT4gPHNwYW4gaWQ9ImNvcHlyaWdodCIgY2xhc3M9ImNvbGxhcHNlIj5BbGwgSVNPIHB1YmxpY2F0aW9ucyBhbmQgbWF0ZXJpYWxzIGFyZSBwcm90ZWN0ZWQgYnkgY29weXJpZ2h0IGFuZCBhcmUgc3ViamVjdCB0byB0aGUgdXNlcuKAmXMgYWNjZXB0YW5jZSBvZiBJU0/igJlzIGNvbmRpdGlvbnMgb2YgY29weXJpZ2h0LiBBbnkgdXNlLCBpbmNsdWRpbmcgcmVwcm9kdWN0aW9uIHJlcXVpcmVzIG91ciB3cml0dGVuIHBlcm1pc3Npb24uIEFsbCBjb3B5cmlnaHQgcmVxdWVzdHMgc2hvdWxkIGJlIGFkZHJlc3NlZCB0byA8YSBocmVmPSJtYWlsdG86Y29weXJpZ2h0QGlzby5vcmciPmNvcHlyaWdodEBpc28ub3JnPC9hPi48L3NwYW4+PC9wPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJ0b3BiYXIiPgogICAgICAgIDxkaXYgY2xhc3M9InRvcGJhci1jb250ZW50Ij4KICAgICAgICAgIDxhIGNsYXNzPSJsb2dvIGlzb2xvZ28gbG9nby14cyB0aGVtZS1yZWQgcG93ZXJlZGJ5IHBhZ2Utc2Nyb2xsIGxvZ28tc2Nyb2xsVG9wIiBocmVmPSIjcGFnZS10b3AiIHRpdGxlPSJTY3JvbGwgdG8gdG9wIj48L2E+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3dlcmVkYnktdHh0Ij5Qb3dlcmVkIGJ5PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9mb290ZXI+CiAgICA8L2JvZHk+CjwvaHRtbD4=
  recorded_at: Thu, 19 Oct 2023 12:33:11 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/23281.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=950C774A2ED2AB74B060FA1A9C25168B; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Thu, 19 Oct 2023 12:33:10 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 19 Oct 2023 12:33:11 GMT
- request:
    method: get
    uri: https://www.iso.org/fr/standard/23281.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=1643497DA404066C237BCB66CEDFDB63; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Thu, 19 Oct 2023 12:33:12 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImZyIj4KICA8aGVhZD48bGluayByZWw9ImNhbm9uaWNhbCIgaHJlZj0iaHR0cHM6Ly93d3cuaXNvLm9yZy9mci9zdGFuZGFyZC8yMzI4MS5odG1sIiAvPgo8bGluayByZWw9ImFsdGVybmF0ZSIgaHJlZmxhbmc9ImVuIiBocmVmPSJodHRwczovL3d3dy5pc28ub3JnL3N0YW5kYXJkLzIzMjgxLmh0bWwiIC8+CiAgICA8c2NyaXB0PgogICAgICBkYXRhTGF5ZXIgPSBbewogICAgICAgICdwYWdlVHlwZSc6ICdpdHM6c3RhbmRhcmQnLAogICAgICAgICdwYWdlTGFuZ3VhZ2UnOiAnZnInCiAgICAgIH1dOwogICAgPC9zY3JpcHQ+CgogICAgPHN0eWxlPgovKiBFYXJseSBydWxlcyB0byBtaXRpZ2F0ZSBDTFMgKi8KLm5hdi11dGlsaXR5IHsgcGFkZGluZzogNXB4OyB6LWluZGV4OiAxMDI0OyBwb3NpdGlvbjogcmVsYXRpdmU7IH0KLnRleHQtc20geyBmb250LXNpemU6IC44NzVlbTsgfQoubmF2LXV0aWxpdHkgbGkubmF2LWl0ZW0gYS5uYXYtbGluayB7IHBhZGRpbmc6IDA7IHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfQouZHJvcGRvd24tdG9nZ2xlOjphZnRlciB7IGZvbnQtc2l6ZTogLjc1ZW07IHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTsgfQoubG9nby5pc29sb2dvLmxvZ28tc20geyBoZWlnaHQ6IDUwcHg7IHdpZHRoOiA1MHB4OyB9Ci5uYXYtaXNvIC5uYXZiYXItdG9nZ2xlciB7IG1hcmdpbi1sZWZ0OiAwLjVyZW07IG9yZGVyOiA0OyB9Ci5uYXZiYXItdG9nZ2xlci1pY29uLWFuaW1hdGVkIHsgd2lkdGg6IDIwcHg7IGhlaWdodDogMTVweDsgcG9zaXRpb246IHJlbGF0aXZlOyBtYXJnaW46IDA7IHRyYW5zZm9ybTogcm90YXRlKDApOyBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH0KLm5hdi1pc28gLm5hdmJhci1mb3JtIHsgb3JkZXI6IDI7IGZsZXg6IDE7IH0KLm5hdmJhci1mb3JtIHsgbWFyZ2luLWxlZnQ6IDAuNXJlbTsgfQouaGVpZ2h0LTMwMCB7IGhlaWdodDogMzAwcHg7IH0Kc2VjdGlvbi5zZWN0aW9uLW1kIHsgcGFkZGluZy10b3A6IDMuNzVyZW07IHBhZGRpbmctYm90dG9tOiAzLjc1cmVtOyB9Ci5uYXYtcmVsYXRpdmVzIC5uYXYtY2hpbGRyZW4sIC5uYXYtcmVsYXRpdmVzIC5zZWN0aW9uLWhlYWQgeyBmb250LXNpemU6IGNhbGMoMS4yNTVyZW0gKyAuMDZ2dyk7IH0KLnByZXZpb3VzIGE6OmJlZm9yZSwgLnNlY3Rpb24tYmFjayBhOjpiZWZvcmUgeyB2ZXJ0aWNhbC1hbGlnbjogYm90dG9tOyBwYWRkaW5nLXJpZ2h0OiAuM2VtOyB0cmFuc2l0aW9uOiBhbGwgMDsgfQpAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjUwMHB4KSB7IC5zZWN0aW9uLWJhY2sgeyBmbGV4LXdyYXA6IG5vd3JhcDsgb3ZlcmZsb3cteDogaGlkZGVuOyB9IC5zZWN0aW9uLWJhY2sgPiBhOm5vdCg6Zmlyc3Qtb2YtdHlwZSk6bm90KDpsYXN0LW9mLXR5cGUpIHsgZGlzcGxheTogbm9uZTsgfSAuaGVhZGluZy1jb25kZW5zZWQgPiBoMSB7IGZvbnQtc2l6ZTogMzEuNjU4OHB4OyBsaW5lLWhlaWdodDogMzkuNTczNXB4OyB9IC5oZWFkaW5nLWNvbmRlbnNlZCA+IGgyIHsgZm9udC1zaXplOiAyNi4xNzEzcHg7IGxpbmUtaGVpZ2h0OiAzMi43MTQxcHg7IH0gfQpAbWVkaWEgKG1heC13aWR0aDogMTE5OS45OHB4KSB7IHNlY3Rpb24uc2VjdGlvbi1uYXZpZ2F0aW9uIHsgcGFkZGluZy10b3A6IDEuODc1cmVtOyB9IH0KPC9zdHlsZT4KPCEtLSBPbmVUcnVzdCBDb29raWVzIENvbnNlbnQgTm90aWNlIHN0YXJ0IGZvciB3d3cuaXNvLm9yZyAtLT4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly9jZG4uY29va2llbGF3Lm9yZy9jb25zZW50LzAyMTdiYTlhLTg5MzUtNDRkNi04NzJkLTFmMjIzMzA0ZTExNy9PdEF1dG9CbG9jay5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG4uY29va2llbGF3Lm9yZy9zY3JpcHR0ZW1wbGF0ZXMvb3RTREtTdHViLmpzIiBkYXRhLWRvY3VtZW50LWxhbmd1YWdlPSJ0cnVlIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGNoYXJzZXQ9IlVURi04IiBkYXRhLWRvbWFpbi1zY3JpcHQ9IjAyMTdiYTlhLTg5MzUtNDRkNi04NzJkLTFmMjIzMzA0ZTExNyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+Ci8vIGZ1bmN0aW9uIHRvIHB1bGwgY29va2llIHZhbHVlCmZ1bmN0aW9uIGdldENvb2tpZShuYW1lKSB7CiAgICB2YXIgdmFsdWUgPSAiOyAiICsgZG9jdW1lbnQuY29va2llOwogICAgdmFyIHBhcnRzID0gdmFsdWUuc3BsaXQoIjsgIiArIG5hbWUgKyAiPSIpOwogICAgaWYgKHBhcnRzLmxlbmd0aCA9PSAyKSByZXR1cm4gcGFydHMucG9wKCkuc3BsaXQoIjsiKS5zaGlmdCgpOwp9CmZ1bmN0aW9uIE9wdGFub25XcmFwcGVyKCkgewogICAgY29uc29sZS5sb2coIk9wdGFub25XcmFwcGVyIGNhbGxlZCIpOwogICAgdmFyIE9BQkNjb29raWVOYW1lID0gIk9wdGFub25BbGVydEJveENsb3NlZCI7CiAgICB2YXIgYmFubmVyQWNjZXB0QnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm9uZXRydXN0LWFjY2VwdC1idG4taGFuZGxlciIpOwogICAgdmFyIHBjQWxsb3dBbGxCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYWNjZXB0LXJlY29tbWVuZGVkLWJ0bi1oYW5kbGVyIik7CiAgICB2YXIgcGNTYXZlQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgic2F2ZS1wcmVmZXJlbmNlLWJ0bi1oYW5kbGVyIG9uZXRydXN0LWNsb3NlLWJ0bi1oYW5kbGVyIilbMF07CiAgICB2YXIgT0FCQ2Nvb2tpZSA9IGdldENvb2tpZShPQUJDY29va2llTmFtZSk7CiAgIAogICAgLy8gSUYgbG9naWMgbmVlZGVkIGhlcmUgYmVjYXVzZSBvdC1iYW5uZXItc2RrIERJViBpcyBub3QgaW5qZWN0ZWQgb24gcGFnZSBsb2FkcyBpZiBiYW5uZXIgaXMgbm90IGV4cG9zZWQKICAgIGlmICghT0FCQ2Nvb2tpZSAmJiBiYW5uZXJBY2NlcHRCdG4pIHsKICAgICAgICBiYW5uZXJBY2NlcHRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coIkFsbG93ZWQgYWxsIHZpYSBCYW5uZXIiKTsKICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7CiAgICAgICAgfSk7CiAgICB9CiAgICBpZiAocGNBbGxvd0FsbEJ0bikgewogICAgICAgIHBjQWxsb3dBbGxCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coIkFsbG93ZWQgYWxsIHZpYSBQcmVmZXJlbmNlIENlbnRlciIpOwogICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTsKICAgICAgICB9KTsKICAgIH0KICAgIGlmKHBjU2F2ZUJ0bil7CiAgICAgICAgcGNTYXZlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9PiB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJTZXQgY3VzdG9tIHNldHRpbmdzIHZpYSBQcmVmZXJlbmNlIENlbnRlciIpOwogICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTsKICAgICAgICB9LCAxMDAwKSAvL3F1aWNrIHRpbWVvdXQgc28gdGhhdCB0aGUgY29uc2VudCByZWNlaXB0IGNhbiBiZSBzZW50IGFuZCB0aGUgY29va2llIGNhbiBiZSB1cGRhdGVkCiAgICAgICAgfSk7CiAgICB9Cn0KPC9zY3JpcHQ+CjwhLS0gT25lVHJ1c3QgQ29va2llcyBDb25zZW50IE5vdGljZSBlbmQgZm9yIHd3dy5pc28ub3JnIC0tPgo8bWV0YSBuYW1lPSJnb29nbGUtc2l0ZS12ZXJpZmljYXRpb24iIGNvbnRlbnQ9Im1RdXFXUGJXcnVaZFFnWlI4UXdieE9XbmpqeGtjRml5SkxIV1ktY09PSGsiIC8+Cgo8IS0tIE1hdG9tbyBUYWcgTWFuYWdlciAtLT4KPHNjcmlwdCAgdHlwZT0idGV4dC9wbGFpbiIgY2xhc3M9Im9wdGFub24tY2F0ZWdvcnktQzAwMDIiPgp2YXIgX210bSA9IHdpbmRvdy5fbXRtID0gd2luZG93Ll9tdG0gfHwgW107Cl9tdG0ucHVzaCh7J210bS5zdGFydFRpbWUnOiAobmV3IERhdGUoKS5nZXRUaW1lKCkpLCAnZXZlbnQnOiAnbXRtLlN0YXJ0J30pOwp2YXIgZD1kb2N1bWVudCwgZz1kLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpLCBzPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdOwpnLmFzeW5jPXRydWU7IGcuc3JjPSdodHRwczovL2Nkbi5tYXRvbW8uY2xvdWQvaXNvLm1hdG9tby5jbG91ZC9jb250YWluZXJfZElOd1lLZXguanMnOyBzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGcscyk7Cjwvc2NyaXB0Pgo8IS0tIEVuZCBNYXRvbW8gVGFnIE1hbmFnZXIgLS0+CjxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSI+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiPgoKICAgIDx0aXRsZT4gSVNPIDEyMzoyMDAxIC0gTGF0ZXggZGUgY2FvdXRjaG91YyDigJQgw4ljaGFudGlsbG9ubmFnZTwvdGl0bGU+CgogICAgPGxpbmsgcmVsPSJwcmVsb2FkIiBhcz0iZm9udCIgdHlwZT0iZm9udC93b2ZmMiIgaHJlZj0iL21vZHVsZXMvaXNvb3JnLXRlbXBsYXRlL2ZvbnRzL2ludGVyL0ludGVyLnZhci53b2ZmMj92PTMuMTkiIGNyb3Nzb3JpZ2luLz4KCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9tb2R1bGVzL2lzb29yZy10ZW1wbGF0ZS9jc3Mvd29vZC5ib290c3RyYXAubWluLmNzcyIgbWVkaWE9InNjcmVlbixwcmludCxoYW5kaGVsZCIgdHlwZT0idGV4dC9jc3MiLz4KICAgIDxsaW5rIHJlbD0icHJlbG9hZCIgaHJlZj0iL21vZHVsZXMvaXNvb3JnLXRlbXBsYXRlL2Nzcy93b29kLmlzby5taW4uY3NzIiBhcz0ic3R5bGUiIG9ubG9hZD0idGhpcy5vbmxvYWQ9bnVsbDt0aGlzLnJlbD0nc3R5bGVzaGVldCciPgoKICAgIAoKPCEtLSBzdGFydCBmYXZpY29ucyAtLT4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbi1wcmVjb21wb3NlZCIgaHJlZj0iL21vZHVsZXMvaXNvb3JnLXRlbXBsYXRlL2ltZy9pc28vZmF2aWNvbi9yZWQvYXBwbGUtdG91Y2gtaWNvbi0xNTJ4MTUyLXByZWNvbXBvc2VkLnBuZyI+CiAgICA8bGluayByZWw9InNob3J0Y3V0IGljb24iIGhyZWY9Ii9tb2R1bGVzL2lzb29yZy10ZW1wbGF0ZS9pbWcvaXNvL2Zhdmljb24vcmVkL2Zhdmljb24uaWNvIj4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tVGlsZUNvbG9yIiBjb250ZW50PSIjZWVlIj4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tVGlsZUltYWdlIiBjb250ZW50PSIvbW9kdWxlcy9pc29vcmctdGVtcGxhdGUvaW1nL2lzby9mYXZpY29uL3JlZC9tc3RpbGUtMTQ0eDE0NC5wbmciPgogICAgPCEtLSBlbmQgZmF2aWNvbnMgLS0+CgogICAgPG1ldGEgbmFtZT0idGhlbWUtY29sb3IiIGNvbnRlbnQ9IiMzMzMiPgoKICAKPHNjcmlwdCB0eXBlPSJhcHBsaWNhdGlvbi9qc29uIiBpZD0iamFoaWEtZGF0YS1jdHgiPnsiY29udGV4dFBhdGgiOiIiLCJsYW5nIjoiZnIiLCJ1aWxhbmciOiJmciIsInNpdGVVdWlkIjoiNDM5MTQ2ZjgtNjc3ZS00ZGRlLWI2YzYtYjY5MmI3NTM0ZjUyIiwid2NhZyI6ZmFsc2UsImNrZUNmZyI6IiJ9PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0iYXBwbGljYXRpb24vanNvbiIgaWQ9ImphaGlhLWRhdGEtY2siPnsicGF0aCI6Ii9tb2R1bGVzL2NrZWRpdG9yL2phdmFzY3JpcHQvIiwibG5nIjoiZnJfRlIifTwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iL2phdmFzY3JpcHQvaW5pdEphaGlhQ29udGV4dC5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgaWQ9InN0YXRpY0Fzc2V0SmF2YXNjcmlwdDAiIHNyYz0iL21vZHVsZXMvaXNvb3JnLXRlbXBsYXRlL2phdmFzY3JpcHQvd29vZC5mdWxsLm1pbi5qcz8xNjk3NTI0Nzg5MzIxIiAgZGVmZXI+PC9zY3JpcHQ+CjxzY3JpcHQgaWQ9InN0YXRpY0Fzc2V0SmF2YXNjcmlwdDEiIHNyYz0iL21vZHVsZXMvaXNvb3JnLXRlbXBsYXRlL2phdmFzY3JpcHQvY3VzdG9tLmpzPzE2OTc1MjQ3ODkzMjEiICBkZWZlcj48L3NjcmlwdD4KPHN0eWxlPgogICAgICAgIG5hdltyb2xlPSJuYXZpZ2F0aW9uIl06aGFzKC50aWNrZXItLWxpdmUpIHsgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYnMtYnJhbmQpIWltcG9ydGFudDsgfQpuYXZbcm9sZT0ibmF2aWdhdGlvbiJdOmhhcygudGlja2VyLS1saXZlKSAgPiAuY29udGFpbmVyIHsgZ2FwOiAxcmVtOyB9Cm5hdltyb2xlPSJuYXZpZ2F0aW9uIl06aGFzKC50aWNrZXItLWxpdmUpICN1dGlsaXRpZXMgPiBsaTpub3QoI2xhbmctc3dpdGNoZXIpIHsgZGlzcGxheTogbm9uZSFpbXBvcnRhbnQ7IH0KLmNhcmQtZm9vdGVyOmhhcygudGlja2VyLS1saXZlKSB7IGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJzLWRhcmspIWltcG9ydGFudDsgY29sb3I6IHdoaXRlOyB9Ci5jYXJkLWZvb3RlcjpoYXMoLnRpY2tlci0tbGl2ZSkgYSB7IGNvbG9yOiB3aGl0ZTsgfQoudGlja2VyOmhhcygudGlja2VyLS1saXZlKSB7IHdoaXRlLXNwYWNlOiBub3JtYWw7IH0KLnRpY2tlci0tbGl2ZSAudGlja2VyX19pY29uIHsgYW5pbWF0aW9uOiBsaXZlIDFzIGluZmluaXRlOyB9CkBrZXlmcmFtZXMgbGl2ZSB7IDAlIHsgY29sb3I6IHRyYW5zcGFyZW50OyB9IDUwJSB7IGNvbG9yOiB3aGl0ZTsgfSAxMDAlIHsgY29sb3I6IHRyYW5zcGFyZW50OyB9IH0KPC9zdHlsZT4KICAgIAo8c2NyaXB0IHNyYz0iL21vZHVsZXMvaXNvLWphaGlhLXNlcnZpY2UtbW9kdWxlL2phdmFzY3JpcHQvY2F0YWxvZ3VlLmpzIiBkZWZlciA+PC9zY3JpcHQ+Cgo8bWV0YSBuYW1lPSJjYXRlZ29yeSIgY29udGVudD0icCIgLz4KICA8bWV0YSBuYW1lPSJwdWJkYXRlIiBjb250ZW50PSIyMDIxMDYwNyIgLz4KICAKPCEtLSBUd2l0dGVyIENhcmQgZGF0YSAtLT4KICA8bWV0YSBuYW1lPSJ0d2l0dGVyOnNpdGUiIGNvbnRlbnQ9IkBpc29zdGFuZGFyZHMiIC8+CgogIDwhLS0gT3BlbiBHcmFwaCBkYXRhIC0tPgogIDxtZXRhIHByb3BlcnR5PSJvZzpzaXRlX25hbWUiIGNvbnRlbnQ9IklTTyIgLz4KICA8bWV0YSBwcm9wZXJ0eT0ib2c6dXJsIiBjb250ZW50PSJodHRwczovL3d3dy5pc28ub3JnL2ZyL3N0YW5kYXJkLzIzMjgxLmh0bWwiIC8+CiAgPG1ldGEgcHJvcGVydHk9Im9nOnR5cGUiIGNvbnRlbnQ9IndlYnNpdGUiIC8+CiAgPCEtLSBUaHVtYm5haWwgaW1hZ2UgKGZvciB0d2l0dGVyIGFuZCBPcGVuIEdyYXBoKSAtLT4KICAgIDxtZXRhIG5hbWU9InRodW1ibmFpbCIgY29udGVudD0iL21vZHVsZXMvaXNvLWphaGlhLXNlcnZpY2UtbW9kdWxlL2ltZy9pc28vaXNvLWxvZ28tcHJpbnQuZ2lmIiAvPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjpjYXJkIiBjb250ZW50PSJzdW1tYXJ5IiAvPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjppbWFnZSIgY29udGVudD0iL21vZHVsZXMvaXNvLWphaGlhLXNlcnZpY2UtbW9kdWxlL2ltZy9pc28vaXNvLWxvZ28tcHJpbnQuZ2lmIiAvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlIiBjb250ZW50PSIvbW9kdWxlcy9pc28tamFoaWEtc2VydmljZS1tb2R1bGUvaW1nL2lzby9pc28tbG9nby1wcmludC5naWYiIC8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2U6YWx0IiBjb250ZW50PSJJU08gbG9nbyIgLz4KICA8IS0tIFRpdGxlIChmb3IgdHdpdHRlciBhbmQgT3BlbiBHcmFwaCkgLS0+CiAgICA8bWV0YSBuYW1lPSJ0d2l0dGVyOnRpdGxlIiBjb250ZW50PSJJU08gMTIzOjIwMDEiIC8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dGl0bGUiIGNvbnRlbnQ9IklTTyAxMjM6MjAwMSIgLz4KICA8IS0tIERlc2NyaXB0aW9uIChmb3IgZ29vZ2xlLCB0d2l0dGVyIGFuZCBPcGVuIEdyYXBoKSAtLT4KICAgIDxtZXRhIG5hbWU9InR3aXR0ZXI6ZGVzY3JpcHRpb24iIGNvbnRlbnQ9IkxhdGV4IGRlIGNhb3V0Y2hvdWMg4oCUIMOJY2hhbnRpbGxvbm5hZ2UiIC8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6ZGVzY3JpcHRpb24iIGNvbnRlbnQ9IkxhdGV4IGRlIGNhb3V0Y2hvdWMg4oCUIMOJY2hhbnRpbGxvbm5hZ2UiIC8+CiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iTGF0ZXggZGUgY2FvdXRjaG91YyDigJQgw4ljaGFudGlsbG9ubmFnZSIgLz4KICA8IS0tIEZhY2Vib29rIGFkbWlucyA6IExpb25lbCxNYXJpYSAtLT4KICA8bWV0YSBwcm9wZXJ0eT0iZmI6YWRtaW5zIiBjb250ZW50PSIxMDAwMDExMTYwNzk2NzYsMTAwMDAxNDQwMDAzMzA1IiAvPgoKICAKCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9tb2R1bGVzL0NzcmZTZXJ2bGV0Ij48L3NjcmlwdD4KPC9oZWFkPgoKICA8IS0tIFRvcGJhciB1dGlsaXR5IC0tPgogIDxib2R5IGNsYXNzPSJ0aGVtZS1yZWQgbGFuZy1mciBpdHMtc3RhbmRhcmQgaXMtcHJvZCBpcy1saXZlIiBpZD0icGFnZS10b3AiPgogICAgPGEgY2xhc3M9InNraXAtbmF2aWdhdGlvbiBidG4gYnRuLWluZm8gdmlzdWFsbHktaGlkZGVuIHZpc3VhbGx5LWhpZGRlbi1mb2N1c2FibGUiIGhyZWY9IiNjb250ZW50Ij5QYXNzZXIgYXUgY29udGVudSBwcmluY2lwYWw8L2E+CiAgICA8bmF2IHJvbGU9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9IlV0aWxpdHkgTmF2aWdhdGlvbiIgY2xhc3M9Im5hdi11dGlsaXR5IG5hdmJhci1leHBhbmQtbGcgdGV4dC1zbSBuYXZiYXItZGFyayBiZy1kYXJrZXJncmF5IHRleHQtbGlnaHQiPgogICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIj4KICAgICAgICA8ZGl2IGNsYXNzPSJ0aWNrZXIgdGV4dC10cnVuY2F0ZSBmbG9hdC1zdGFydCI+PC9kaXY+CiAgICAgICAgPHVsIGNsYXNzPSJuYXYgZC1mbGV4IGp1c3RpZnktY29udGVudC1lbmQganVzdGlmeS1jb250ZW50LXNtLWFyb3VuZCBqdXN0aWZ5LWNvbnRlbnQtbWQtZW5kIiBpZD0idXRpbGl0aWVzIj4KICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0gZC1ub25lIGQtc20tYmxvY2siPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2xvZ2luLmlzby5vcmciIGNsYXNzPSJuYXYtbGluayBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIiB0aXRsZT0iUG9ydGFpbCBkZXMgYXBwbGljYXRpb25zIGRlIGwnSVNPIj48aSBjbGFzcz0iYmktZ3JpZC0zeDMtZ2FwLWZpbGwiPjwvaT4mbmJzcDtBcHBsaWNhdGlvbnM8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBkLW5vbmUgZC1zbS1ibG9jayI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmlzby5vcmcvb2JwL3VpL2ZyLyIgY2xhc3M9Im5hdi1saW5rIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiIHRpdGxlPSJQbGF0ZWZvcm1lIGRlIGNvbnN1bHRhdGlvbiBlbiBsaWduZSI+PGkgY2xhc3M9ImJpLWpvdXJuYWwtdGV4dCI+PC9pPiZuYnNwO09CUDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIGRyb3Bkb3duIiBpZD0ibGFuZy1zd2l0Y2hlciI+CiAgPGEgaWQ9ImxhbmctZHJvcGRvd24iIGNsYXNzPSJuYXYtbGluayBkcm9wZG93bi10b2dnbGUiIGRhdGEtYnMtdG9nZ2xlPSJkcm9wZG93biIgaHJlZj0iIyIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPmZyYW7Dp2FpczwvYT4KICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1lbmQiIHJvbGU9Im1lbnUiIGFyaWEtbGFiZWxsZWRieT0ibGFuZy1kcm9wZG93biI+CiAgICA8bGkgY2xhc3M9ImxhbmctZW4gIj48YSBjbGFzcz0iZHJvcGRvd24taXRlbSAiIGhyZWY9Ii9zdGFuZGFyZC8yMzI4MS5odG1sIj5FbmdsaXNoPC9hPjwvbGk+PGxpIGNsYXNzPSJsYW5nLXJ1ICI+PGEgY2xhc3M9ImRyb3Bkb3duLWl0ZW0gIiBocmVmPSIvcnUvc3RhbmRhcmQvMjMyODEuaHRtbCI+0YDRg9GB0YHQutC40Lk8L2E+PC9saT48L3VsPgo8L2xpPjwvdWw+CiAgICAgIDwvZGl2PgogICAgPC9uYXY+CgogICAgPCEtLSBIZWFkZXIgSVNPLk9SRyAtLT4KICAgIDxoZWFkZXIgY2xhc3M9ImhlYWRlci1ib290c3RyYXAgc3RpY2t5LXRvcCI+CiAgICAgIDwhLS0gTWFpbiBuYXZpZ2F0aW9uIC0tPgogICAgICA8bmF2IGNsYXNzPSJuYXZiYXIgbmF2LWlzbyBuYXZiYXItZXhwYW5kLW1kIG5hdmJhci1saWdodCBzaGFkb3ctbWQgYmctd2hpdGUgdGV4dC1kYXJrIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgPGEgY2xhc3M9ImxvZ28gbG9nby1zcXVhcmUgaXNvbG9nbyBsb2dvLXNtIiBocmVmPSIvZnIvaG9tZS5odG1sIiB0aXRsZT0iT3JnYW5pc2F0aW9uIGludGVybmF0aW9uYWxlIGRlIG5vcm1hbGlzYXRpb24iIGFsdD0iTG9nbyBJU08iPjwvYT4KICAgICAgICAgIDxkaXYgY2xhc3M9Imlzb2xvZ28tcHJpbnQiPjxpbWcgbG9hZGluZz0ibGF6eSIgZmV0Y2hwcmlvcml0eT0ibG93IiBzcmM9Ii9tb2R1bGVzL2lzb29yZy10ZW1wbGF0ZS9pbWcvaXNvL2lzby1sb2dvLXByaW50LmdpZiIgYWx0PSJMb2dvIElTTyBwb3VyIGltcHJlc3Npb24iLz48L2Rpdj4KICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tbGlnaHQgbmF2YmFyLXRvZ2dsZXIiIHR5cGU9ImJ1dHRvbiIgZGF0YS1icy10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLWJzLXRhcmdldD0iI21haW5OYXYiIGFyaWEtY29udHJvbHM9Im1haW5OYXYiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWxhYmVsPSJUb2dnbGUgbmF2aWdhdGlvbiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci10b2dnbGVyLWljb24tYW5pbWF0ZWQiPjxzcGFuPjwvc3Bhbj48c3Bhbj48L3NwYW4+PHNwYW4+PC9zcGFuPjxzcGFuPjwvc3Bhbj48L2Rpdj48c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuLXhzIj4mbmJzcDtNZW51PC9zcGFuPgogICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICA8IS0tIFRPUCBMRVZFTDEgTkFWSUdBVElPTiAtLT4KICAgICAgICAgIDxuYXYgcm9sZT0ibmF2aWdhdGlvbiIgYXJpYS1sYWJlbD0iTWFpbiBOYXZpZ2F0aW9uIiBjbGFzcz0ibmF2LW1lZ2FtZW51IGNvbGxhcHNlIG5hdmJhci1jb2xsYXBzZSIgaWQ9Im1haW5OYXYiPjx1bCByb2xlPSdtZW51YmFyJyBjbGFzcz0nbmF2YmFyLW5hdiBtZS1hdXRvIG1iLWxnLTAgcHMtMiBwZS0yIG5hdi1sZXZlbDEnID48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPSduYXYtaXRlbSBkcm9wZG93biBwb3NpdGlvbi1zdGF0aWMgbm9DaGlsZHJlbiBmaXJzdEluTGV2ZWwnID48YSBjbGFzcz0nbmF2LWxpbmsgZHJvcGRvd24tdG9nZ2xlIG1lZ2FtZW51LXRvZ2dsZSAgJyAgIHRpdGxlPSJQYXJjZSBxdeKAmWVsbGVzIGNvdXZyZW50IHByYXRpcXVlbWVudCB0b3VzIGxlcyBwcm9kdWl0cywgcHJvY2Vzc3VzIGV0IHNlcnZpY2VzIHBvc3NpYmxlcyBldCBpbWFnaW5hYmxlcywgbGVzIG5vcm1lcyBJU08gcGV1dmVudCDDqnRyZSB1dGlsaXPDqWVzIHBhcnRvdXQuIiAgaHJlZj0nL2ZyL3N0YW5kYXJkcy5odG1sJz5Ob3JtZXM8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9J25hdi1pdGVtIGRyb3Bkb3duIHBvc2l0aW9uLXN0YXRpYyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rIGRyb3Bkb3duLXRvZ2dsZSBtZWdhbWVudS10b2dnbGUgICcgICB0aXRsZT0iTOKAmUlTTyByw6l1bml0IGRlcyBleHBlcnRzIGR1IG1vbmRlIGVudGllciBwb3VyIMOpbGFib3JlciBkZXMgTm9ybWVzIGludGVybmF0aW9uYWxlcyBxdWkgYWlkZW50IMOgIHLDqXNvdWRyZSBsZXMgcHJvYmzDqG1lcyBldCBlbmNvdXJhZ2VudCBs4oCZaW5ub3ZhdGlvbi4iICBocmVmPScvZnIvYWJvdXQtdXMuaHRtbCc+w4AgcHJvcG9zIGRlIGzigJlJU088L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9J25hdi1pdGVtIGRyb3Bkb3duIHBvc2l0aW9uLXN0YXRpYyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rIGRyb3Bkb3duLXRvZ2dsZSBtZWdhbWVudS10b2dnbGUgICcgICB0aXRsZT0iUmVzdGV6IGluZm9ybcOpIGRlcyBkZXJuacOocmVzIG5vdXZlYXV0w6lzIGVuIG1hdGnDqHJlIGRlIG5vcm1hbGlzYXRpb24gb3UgcGFyY291cmV6IG5vcyByaWNoZXMgYXJjaGl2ZXMiICBocmVmPScvZnIvbmV3cy5odG1sJz5BY3R1YWxpdMOpczwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nbmF2LWl0ZW0gZHJvcGRvd24gcG9zaXRpb24tc3RhdGljIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgZHJvcGRvd24tdG9nZ2xlIG1lZ2FtZW51LXRvZ2dsZSAgJyAgIHRpdGxlPSJEw6ljb3V2cmV6IGNvbW1lbnQgbGUgcHJvY2Vzc3VzIGRlIGzigJlJU08gcsOpdW5pIGRlcyBleHBlcnRzIGR1IG1vbmRlIGVudGllciBwb3VyIGNyw6llciBkZXMgbm9ybWVzIGFkb3B0w6llcyBwYXJ0b3V0IGRhbnMgbGUgbW9uZGUuIiAgaHJlZj0nL2ZyL2RldmVsb3Bpbmctc3RhbmRhcmRzLmh0bWwnPlBhcnRpY2lwZXI8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9J25hdi1pdGVtIGRyb3Bkb3duIHBvc2l0aW9uLXN0YXRpYyBub0NoaWxkcmVuIGluUGF0aCAgbGFzdEluTGV2ZWwnID48YSBjbGFzcz0nbmF2LWxpbmsgZHJvcGRvd24tdG9nZ2xlIG1lZ2FtZW51LXRvZ2dsZSAgJyAgIHRpdGxlPSJWb3VzIHZvdWxleiBhY2hldGVyIGRlcyBOb3JtZXMgaW50ZXJuYXRpb25hbGVzLCBkZXMgbGlnbmVzIGRpcmVjdHJpY2VzLCBkZXMgY29sbGVjdGlvbnMgb3UgZGVzIGxpc3RlcyBkZSBjb250csO0bGU/IEVsbGVzIHNvbnQgdG91dGVzIHN1ciBs4oCZSVNPIFN0b3JlLiIgIGhyZWY9Jy9mci9zdG9yZS5odG1sJz5TdG9yZTwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PC91bD48IS0tIGNsb3NlIG9mIGNvbnRhaW5lciBsZXZlbCAxIC0tPjwvbmF2Pjxmb3JtIGNsYXNzPSJuYXZiYXItZm9ybSBkLWZsZXggaXNvc2VhcmNoIG1zLXNtLTIiIHJvbGU9InNlYXJjaCIgaWQ9InNpdGVTZWFyY2giPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iaGlkZGVuIiBkYXRhLXNlYXJjaHBhZ2V1cmw9Ii9mci9zZWFyY2guaHRtbCI+PC9zcGFuPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+CiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InNlYXJjaCIgY2xhc3M9ImZvcm0tY29udHJvbCIgcGxhY2Vob2xkZXI9IlJlY2hlcmNoZSIgYXJpYS1sYWJlbGxlZGJ5PSJpbnB1dC1zZWFyY2giPgogICAgICAgICAgICAgIDxidXR0b24gaWQ9ImlucHV0LXNlYXJjaCIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgdHlwZT0ic3VibWl0Ij48aSBjbGFzcz0iYmktc2VhcmNoIHRleHQtbXV0ZWQiPjwvaT48c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5SZWNoZXJjaGU8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9mb3JtPgogICAgICAgICAgPGEgcm9sZT0iYnV0dG9uIiBpZD0ic2hvcHBpbmdDYXJ0IiBjbGFzcz0iYnRuIGJ0bi1saWdodCBzaG9wcGluZy1jYXJ0LWxpbmsgYmctd2hpdGUgYm9yZGVyLTAgdGV4dC1tdXRlZCBkLW5vbmUgZC1sZy1ibG9jayIgaHJlZj0iL3dlYnN0b3JlL3Nob3BwaW5nYmFza2V0P21lbWJlcklkPUlTTyZndWlsYW5nPWZyIiB0aXRsZT0iUGFuaWVyIGQnYWNoYXQiIGFyaWEtbGFiZWw9IlBhbmllciBkJ2FjaGF0IiBzdHlsZS09ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICA8aSBjbGFzcz0iYmktY2FydCI+PC9pPjxzcGFuIGlkPSJjYXJ0VGV4dCIgY2xhc3M9InZpc3VhbGx5LWhpZGRlbi14cyBtcy0xIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPiBQYW5pZXI8L3NwYW4+CiAgICAgICAgICA8L2E+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbmF2PgoKICAgIDwvaGVhZGVyPgoKICAgIDwhLS0gTUFJTiBDT05URU5UIC0tPgogICAgPG1haW4gcm9sZT0ibWFpbiIgaWQ9ImNvbnRlbnQiIGNsYXNzPSJhY2VyIiBhcmlhLWxhYmVsPSJDb250ZW50IiB0YWJpbmRleD0iLTEiPgogICAgICAKCgo8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIiBpZD0iaW5kZXhSZWZlcmVuY2UiIGRhdGEtaW5kZXg9IjIzMjgxIC0gSVNPIDEyMzoyMDAxIC0gTGF0ZXggZGUgY2FvdXRjaG91YyDigJQgw4ljaGFudGlsbG9ubmFnZSI+PC9zcGFuPgo8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIiBpZD0iaXRlbVJlZmVyZW5jZSI+SVNPIDEyMzoyMDAxPC9zcGFuPgo8ZGl2IGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL1Byb2R1Y3QiIGNsYXNzPSJpdHMtc3RhbmRhcmQtY29udGFpbmVyIiBpZD0iaXRzLXN0YW5kYXJkLTIzMjgxIj4KICA8bGluayBpdGVtcHJvcD0iaW1hZ2UiIGhyZWY9Ii9tb2R1bGVzL2lzb29yZy10ZW1wbGF0ZS9pbWcvaXNvL2lzby1sb2dvLXByaW50LmdpZiIgLz48c2VjdGlvbiBjbGFzcz0ic2VjdGlvbi1uYXZpZ2F0aW9uIGJnLWxpZ2h0Z3JheSI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC03Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9InZpc3VhbGx5LWhpZGRlbiIgaXRlbXByb3A9ImNhdGVnb3J5Ij5wPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iIGl0ZW1wcm9wPSJuYW1lIiBpZD0iZG9jUmVmIj5JU08gMTIzOjIwMDE8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9InZpc3VhbGx5LWhpZGRlbiIgaXRlbXByb3A9InByb2R1Y3RJRCIgaWQ9ImNzTnVtYmVyIj4yMzI4MTwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9InZpc3VhbGx5LWhpZGRlbiIgaXRlbXByb3A9ImJyYW5kIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9CcmFuZCI+CiAgICAgICAgICAgIDxkaXYgaXRlbXByb3A9ImxvZ28iIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL0ltYWdlT2JqZWN0Ij4KICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0idXJsIiBjb250ZW50PSIvbW9kdWxlcy9pc29vcmctdGVtcGxhdGUvaW1nL2lzby9pc28tbG9nby1wcmludC5naWYiLz4KICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0id2lkdGgiIGNvbnRlbnQ9IjI4MyI+CiAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9ImhlaWdodCIgY29udGVudD0iMjYxIj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJuYW1lIiBjb250ZW50PSJPcmdhbmlzYXRpb24gaW50ZXJuYXRpb25hbGUgZGUgbm9ybWFsaXNhdGlvbiI+CiAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICA8bmF2IHJvbGU9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9IkNoaWxkcmVuIE5hdmlnYXRpb24iIGNsYXNzPSJoZWFkaW5nLWNvbmRlbnNlZCBuYXYtcmVsYXRpdmVzIj4KCiAgPGRpdiBjbGFzcz0ic2VjdGlvbi1oZWFkIHNlY3Rpb24tYmFjayI+PC9kaXY+CiAgPGgxPklTTyAxMjM6MjAwMTwvaDE+CiAgPGgyIGNsYXNzPSJtdC0wICI+TGF0ZXggZGUgY2FvdXRjaG91YzwvaDI+PGgzPsOJY2hhbnRpbGxvbm5hZ2U8L2gzPjwvbmF2PjxkaXYgY2xhc3M9ImQtaW5saW5lLWJsb2NrIG10LTQgY2FsbG91dCBjYWxsb3V0LXN1Y2Nlc3MiPgogICAgICAgICAgICAgIMOJdGF0IGFjdHVlbCZuYnNwOzombmJzcDs8c3Ryb25nIGNsYXNzPSJ0ZXh0LXN1Y2Nlc3MiPlB1Ymxpw6llPC9zdHJvbmc+CgogICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIChFbiBjb3VycyBkJ2V4YW1lbikKICAgICAgICAgICAgICAgICAgPGRpdiByb2xlPSJhbGVydCI+PGkgY2xhc3M9ImJpIGJpLWNoZWNrLWNpcmNsZS1maWxsIHRleHQtc3VjY2VzcyI+PC9pPgogICAgICAgICAgICAgICAgICAgIExlIGRlcm5pZXIgZXhhbWVuIGRlIGNldHRlIG5vcm1lIGRhdGUgZGUmbmJzcDsyMDIxLgogICAgICAgICAgICAgICAgICAgIENldHRlIMOpZGl0aW9uIHJlc3RlIGRvbmMgZOKAmWFjdHVhbGl0w6kuPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCBjb2wtbWQtb2Zmc2V0LTEiPgogICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBzdG9yZS1ib3ggcHJvZHVjdC1ib3ggc2hhZG93IG1iLTAiIGlkPSJzdG9yZS1ib3giPgogICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KPGRpdiBjbGFzcz0iZml0LXRvLWJveCI+CiAgICAgICAgPHNwYW4gY2xhc3M9Imxhbmd1YWdlLXBhdGggdmlzdWFsbHktaGlkZGVuIj5mcjwvc3Bhbj4KICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIG9yZGVyUHJvZHVjdCBhbGlnbi1taWRkbGUiPgogICAgICAgICAgPHRoZWFkPgogICAgICAgICAgPHRyPgogICAgICAgICAgICA8dGg+PC90aD4KICAgICAgICAgICAgPHRoPkZvcm1hdDwvdGg+CiAgICAgICAgICAgIDx0aCBpZD0ibGFuZ3VhZ2UiPkxhbmd1ZTwvdGg+CiAgICAgICAgICA8L3RyPgogICAgICAgICAgPC90aGVhZD4KICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgIDx0ciBjbGFzcz0iYWN0aXZlIj4KICAgICAgICAgICAgICA8dGQgY2xhc3M9InNlbGVjdGlvbiI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idHlwZSB2aXN1YWxseS1oaWRkZW4iPnN0ZDwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb3VudGVyIHZpc3VhbGx5LWhpZGRlbiI+MTwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwcmljZSB2aXN1YWxseS1oaWRkZW4iPjYxPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNob29zZUZvcm1hdCBhY3RpdmUiPjxpIGNsYXNzPSJiaSBiaS1jaGVjay1sZyI+PC9pPjwvc3Bhbj4KICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgIDx0ZCBpZD0iYmtpZm10XzEiPgogICAgICAgICAgICAgICAgUERGPC90ZD4KICAgICAgICAgICAgICA8dGQgY2xhc3M9Im9yZGVyTGFuZ3VhZ2UiIHN0eWxlPSJtaW4td2lkdGg6IDE0MHB4OyI+CiAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJia2lfMSIgYXJpYS1sYWJlbGxlZGJ5PSJsYW5ndWFnZSIgY2xhc3M9ImZvcm0tc2VsZWN0Ij4KICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMDF1YjAwMDAwMDI4SGlpQUFFfmEwNWIwMDAwMDA1V1YyUkFBV35hMGZiMDAwMDAwMGViRnJBQUl+YTBjYjAwMDAwMDFRZlVrQUFLIiBsYW5nPSJlbiI+CiAgICAgICAgICAgICAgICAgICAgICBBbmdsYWlzPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjAxdWIwMDAwMDAyOEhpaUFBRX5hMDViMDAwMDAwNVdWMlJBQVd+YTBmYjAwMDAwMDBlYlB5QUFJfmEwY2IwMDAwMDAxUWZWSEFBMCIgbGFuZz0iZnIiIHNlbGVjdGVkPgogICAgICAgICAgICAgICAgICAgICAgRnJhbsOnYWlzPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICA8dHIgY2xhc3M9IiI+CiAgICAgICAgICAgICAgPHRkIGNsYXNzPSJzZWxlY3Rpb24iPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InR5cGUgdmlzdWFsbHktaGlkZGVuIj5zdGQ8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY291bnRlciB2aXN1YWxseS1oaWRkZW4iPjI8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHJpY2UgdmlzdWFsbHktaGlkZGVuIj42MTwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaG9vc2VGb3JtYXQiPjxpIGNsYXNzPSJiaSBiaS1jaGVjay1sZyB2aXN1YWxseS1oaWRkZW4iPjwvaT48L3NwYW4+CiAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICA8dGQgaWQ9ImJraWZtdF8yIj4KICAgICAgICAgICAgICAgIFBhcGllcjwvdGQ+CiAgICAgICAgICAgICAgPHRkIGNsYXNzPSJvcmRlckxhbmd1YWdlIiBzdHlsZT0ibWluLXdpZHRoOiAxNDBweDsiPgogICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0iYmtpXzIiIGRpc2FibGVkIGFyaWEtbGFiZWxsZWRieT0ibGFuZ3VhZ2UiIGNsYXNzPSJmb3JtLXNlbGVjdCI+CiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjAxdWIwMDAwMDAyOEhpaUFBRX5hMDViMDAwMDAwNVdWMldBQVd+YTBmYjAwMDAwMDBlYlBvQUFJfmEwY2IwMDAwMDAxUWZXcUFBSyIgbGFuZz0iZW4iPgogICAgICAgICAgICAgICAgICAgICAgQW5nbGFpczwvb3B0aW9uPgogICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIwMXViMDAwMDAwMjhIaWlBQUV+YTA1YjAwMDAwMDVXVjJXQUFXfmEwZmIwMDAwMDAwZWJQdEFBSX5hMGNiMDAwMDAwMVFmU0xBQTAiIGxhbmc9ImZyIiBzZWxlY3RlZD4KICAgICAgICAgICAgICAgICAgICAgIEZyYW7Dp2Fpczwvb3B0aW9uPgogICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgICAgPC90Ym9keT4KICAgICAgICA8L3RhYmxlPgogICAgICA8L2Rpdj4KCiAgICAgIDxkaXYgY2xhc3M9ImNsZWFyZml4IiBpdGVtcHJvcD0ib2ZmZXJzIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9PZmZlciI+CiAgICAgICAgPGxpbmsgaXRlbXByb3A9InVybCIgaHJlZj0iaHR0cHM6Ly93d3cuaXNvLm9yZy9mci9zdGFuZGFyZC8yMzI4MS5odG1sIiAvPgogICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJhdmFpbGFiaWxpdHkiIGNvbnRlbnQ9Imh0dHBzOi8vc2NoZW1hLm9yZy9JblN0b2NrIiAvPgogICAgICAgIDx1bCBjbGFzcz0ibGlzdC1pbmxpbmUgb3JkZXJCYXNrZXQiIGlkPSJia2lhbmNob3JfMSI+CiAgICAgICAgICA8bGkgY2xhc3M9InByaWNlIG9yZGVyIj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImN1cnJlbmN5IiBpdGVtcHJvcD0icHJpY2VDdXJyZW5jeSI+Q0hGPC9zcGFuPjxzcGFuIGNsYXNzPSJhbW91bnQiIGlkPSJwcm9kdWN0UHJpY2UiIGl0ZW1wcm9wPSJwcmljZSI+NjE8L3NwYW4+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpPgogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYnRuLWxnIiBpZD0ic3RhbmRhcmQtYnV5IiBkYXRhLWJzLXRvZ2dsZT0ibW9kYWwiIGRhdGEtYnMtdGFyZ2V0PSIjaXNvLW9wdG91dCIgb25jbGljaz0iamF2YXNjcmlwdDphZGRUb0Jhc2tldCgnMScsICdmcicsICdzdGQnKSI+CiAgICAgICAgICAgICAgPGkgY2xhc3M9ImJpLWNhcnQiPjwvaT4mbmJzcDtBY2hldGVyPC9idXR0b24+CiAgICAgICAgICA8L2xpPgogICAgICAgIDwvdWw+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LXhzIHRleHQtbXV0ZWQgdGV4dC1jZW50ZXIiPkNvbnZlcnRpciBsZXMgZnJhbmNzIHN1aXNzZXMgKENIRikgZGFucyA8YSBpZD0iY29udmVydFByaWNlIiB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cueGUuY29tL2ZyL2N1cnJlbmN5Y29udmVydGVyL2NvbnZlcnQvP0Ftb3VudD02MSZGcm9tPUNIRiZUbz1FVVIiPnVuZSBhdXRyZSBkZXZpc2U8L2E+PC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9zZWN0aW9uPgogIDxzdmcgY2xhc3M9IndhdmUiIHByZXNlcnZlQXNwZWN0UmF0aW89Im5vbmUiIHZpZXdCb3g9IjAgMCAxNDQwIDk2IiBmaWxsPSJub25lIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciPjxwYXRoIGQ9Im0wIDk2IDgwLTUuM0MxNjAgODUgMzIwIDc1IDQ4MCA2NHMzMjAtMjEgNDgwLTIxLjNjMTYwIC4zIDMyMCAxMC4zIDQwMCAxNmw4MCA1LjNWMEgwdjk2WiI+PC9wYXRoPjwvc3ZnPgoKPHNlY3Rpb24gaWQ9InByb2R1Y3QtZGV0YWlscyI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC03Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiBhbGlnbi1pdGVtcy1jZW50ZXIiPjxoMj5Sw6lzdW3DqTwvaDI+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgaXRlbXByb3A9ImRlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICA8cD48cD5MYSBwcsOpc2VudGUgTm9ybWUgaW50ZXJuYXRpb25hbGUgc3DDqWNpZmllIGRlcyBtw6l0aG9kZXMgZCfDqWNoYW50aWxsb25uYWdlIHBvdXIgZGVzIGNvbmNlbnRyw6lzIGRlIGxhdGV4IGRlIGNhb3V0Y2hvdWM8L3A+CjxwPm5hdHVyZWwgZXQgcG91ciDDqWNoYW50aWxsb25uZXIgZGVzIGxhdGV4IGRlIGNhb3V0Y2hvdWMgc3ludGjDqXRpcXVlIGV0IGRlcyBsYXRleCBhcnRpZmljaWVscy4gRWxsZSBzJ2FwcGxpcXVlIMOpZ2FsZW1lbnQ8L3A+CjxwPsOgIGwnw6ljaGFudGlsbG9ubmFnZSBkZSBsYXRleCBkZSBjYW91dGNob3VjIGNvbnRlbnVzIGRhbnMgZGVzIGbDu3RzLCBjaXRlcm5lcyByb3V0acOocmVzIG91IGRlIHN0b2NrYWdlLiBMZTwvcD4KPHA+bW9kZSBvcMOpcmF0b2lyZSBwZXV0IGF1c3NpIMOqdHJlIHV0aWxpc8OpIHBvdXIgbCfDqWNoYW50aWxsb25uYWdlIGRlIGRpc3BlcnNpb25zIGRlIHBsYXN0aXF1ZXMuPC9wPjwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgY29sLW1kLW9mZnNldC0xIj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiBhbGlnbi1pdGVtcy1jZW50ZXIiPgogIDxoMz5JbmZvcm1hdGlvbnMgZ8OpbsOpcmFsZXM8L2gzPgo8L2Rpdj4KPHVsIGNsYXNzPSJyZWZpbmUiPgogIDxsaT4KICAgIDxkaXYgY2xhc3M9IiIgaWQ9InB1YmxpY2F0aW9uU3RhdHVzIj4KICAgICAgPGRpdiBjbGFzcz0iZW50cnktbGFiZWwiPsOJdGF0IGFjdHVlbDwvZGl2PiZuYnNwOzombmJzcDs8c3Bhbj5QdWJsacOpZTwvc3Bhbj4KICAgICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSIiIGlkPSJwdWJsaWNhdGlvbkRhdGUiPgogICAgICA8ZGl2IGNsYXNzPSJlbnRyeS1sYWJlbCI+RGF0ZSBkZSBwdWJsaWNhdGlvbjwvZGl2PiZuYnNwOzombmJzcDs8c3BhbiBpdGVtcHJvcD0icmVsZWFzZURhdGUiPjIwMDEtMDU8L3NwYW4+CiAgICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9IiIgaWQ9InN0YWdlSWQiPgogICAgICA8ZGl2IGNsYXNzPSJlbnRyeS1sYWJlbCI+U3RhZGU8L2Rpdj4gOiBOb3JtZSBpbnRlcm5hdGlvbmFsZSBjb25maXJtw6llIFs8YSBjbGFzcz0icGFnZS1zY3JvbGwiIGhyZWY9IiNsaWZlY3ljbGUiPjkwLjkzPC9hPl0KICAgIDwvZGl2PgoKICA8L2xpPgogIDxsaT4KICAgIDxkaXYgY2xhc3M9IiI+CiAgICAgIDxkaXYgY2xhc3M9ImVudHJ5LWxhYmVsIj5FZGl0aW9uPC9kaXY+Jm5ic3A7OiZuYnNwOzM8L2Rpdj4KICAgIDxkaXYgY2xhc3M9IiI+CiAgICAgIDxkaXYgY2xhc3M9ImVudHJ5LWxhYmVsIj5Ob21icmUgZGUgcGFnZXM8L2Rpdj4mbmJzcDs6Jm5ic3A7ODwvZGl2PgogIDwvbGk+CgogIDxsaT4KICAgIDxkaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZW50cnktbGFiZWwiPkNvbWl0w6kgdGVjaG5pcXVlJm5ic3A7OjwvZGl2PgogICAgICAgIDxzcGFuIGNsYXNzPSJlbnRyeS1uYW1lIGVudHJ5LWJsb2NrIj4KICAgICAgICAgIDxhIHRpdGxlPSJNYXRpw6hyZXMgcHJlbWnDqHJlcyAoeSBjb21wcmlzIGxlIGxhdGV4KSDDoCBsJ3VzYWdlIGRlIGwnaW5kdXN0cmllIGRlcyDDqWxhc3RvbcOocmVzIiBocmVmPSIvZnIvY29tbWl0dGVlLzQ4NzE2Lmh0bWwiPklTTy9UQyA0NS9TQyAzPC9hPjwvc3Bhbj4KICAgICAgPC9kaXY+CiAgICA8ZGl2PgogICAgICA8ZGl2IGNsYXNzPSJlbnRyeS1sYWJlbCI+PGFiYnIgdGl0bGU9IkNsYXNzaWZpY2F0aW9uIGludGVybmF0aW9uYWxlIHBvdXIgbGVzIG5vcm1lcyI+SUNTPC9hYmJyPiZuYnNwOzo8L2Rpdj4KICAgICAgICA8c3BhbiBjbGFzcz0iZW50cnktbmFtZSBlbnRyeS1ibG9jayI+CiAgICAgICAgICAgIDxhIHRpdGxlPSJMYXRleCBldCBjYW91dGNob3VjIGJydXQiIGhyZWY9Ii9mci9pY3MvODMuMDQwLjEwLmh0bWwiPgogICAgICAgICAgICAgICAgODMuMDQwLjEwPC9hPiZuYnNwOwogICAgICAgICAgPC9zcGFuPgogICAgICAgIDwvZGl2PgogIDwvbGk+CiAgPGxpIGNsYXNzPSJ0ZXh0LXhzIj4KICAgIDxpIGNsYXNzPSJiaS1yc3MtZmlsbCBtZS0xIGFsaWduLWJhc2VsaW5lIHRleHQtc20iIHN0eWxlPSJjb2xvcjogI0Y5OTAwMDsiPjwvaT48YSBocmVmPSIvZnIvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMi8zMi8yMzI4MS5kZXRhaWwucnNzIj5SU1M8L2E+Jm5ic3A7bWlzZXMgw6Agam91cjwvbGk+CjwvdWw+CjxkaXYgY2xhc3M9Im1lZGlhIGNsZWFyZml4IG10LTUiPgogIDxkaXYgY2xhc3M9Im1lZGlhLWxlZnQiPgogICAgPGZpZ3VyZSBjbGFzcz0icm91bmRlZC0wIHNoYWRvdy1zbSBob3Zlci16b29tIj4KICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuaXNvLm9yZy9vYnAvdWkvZnIvIyFpc286c3RkOjIzMjgxOmZyIj4KICAgICAgICA8aW1nIGFsdD0iU3RhbmRhcmQgZmlyc3QgcGFnZSIgc3JjPSIvbW9kdWxlcy9pc28tamFoaWEtc2VydmljZS1tb2R1bGUvaW1nL2lzby1zdGFuZGFyZC1jb3Zlci10aHVtYm5haWwud2VicCIgY2xhc3M9Im1lZGlhLW9iamVjdCB3aWR0aC0xMDAgcm91bmRlZC0wIiAvPgogICAgICA8L2E+CiAgICA8L2ZpZ3VyZT4KICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5Ij4KICAgIDxoNCBjbGFzcz0iaDUgZW50cnktdGl0bGUgZW50cnktbmFtZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cuaXNvLm9yZy9vYnAvdWkvZnIvIyFpc286c3RkOjIzMjgxOmZyIj5QcsOpdmlzdWFsaXNlciZuYnNwOzxpIGNsYXNzPSJiaS1ib3gtYXJyb3ctdXAtcmlnaHQgc21hbGwgYWxpZ24tYmFzZWxpbmUiPjwvaT48L2E+PC9oND4KICAgIDxkaXYgY2xhc3M9ImVudHJ5LXN1bW1hcnkiPlByw6l2aXN1YWxpc2VyIGNldHRlIG5vcm1lIHN1ciBub3RyZSBQbGF0ZWZvcm1lIGRlIGNvbnN1bHRhdGlvbiBlbiBsaWduZSAoT0JQKTwvZGl2PgogIDwvZGl2Pgo8L2Rpdj4KPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9zZWN0aW9uPgoKICA8IS0tIFNUQVJUIE9GIE1PREFMIChCdXkgSVNPLk9SRyB3aXRoIE9QVE9VVCkgLS0+CiAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGlkPSJpc28tb3B0b3V0IiBhcmlhLWhpZGRlbj0idHJ1ZSIgYXJpYS1sYWJlbGxlZGJ5PSJtb2RhbExhYmVsIj4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQiPgogICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgPGg0IGNsYXNzPSJtb2RhbC10aXRsZSIgaWQ9Im1vZGFsTGFiZWwiPkFjaGV0ZXImbmJzcDtjZXR0ZSBub3JtZTwvaDQ+CiAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0bi1jbG9zZSIgZGF0YS1icy1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSBjbGVhcmZpeCI+CiAgICAgICAgICAgIDxkaXYgaWQ9Im1vZGFsT3B0T3V0Ij48L2Rpdj4KICAgICAgICAgICAgPGRpdiBpZD0ibW9kYWxOb09wdE91dCI+PC9kaXY+CiAgICAgICAgICAgIDxzcGFuIGlkPSJwcm9jZWVkVG9DaGVja291dCIgY2xhc3M9InZpc3VhbGx5LWhpZGRlbiIgZGF0YS1sYWJlbD0iUGFuaWVyIj48L3NwYW4+CiAgICAgICAgICAgIDxzcGFuIGlkPSJjb250aW51ZVNob3BwaW5nIiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIiBkYXRhLWxhYmVsPSJDb250aW51ZXIgbWVzIGFjaGF0cyI+PC9zcGFuPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CiAgPCEtLSBFTkQgT0YgTU9EQUwgLS0+Cgo8L2Rpdj4gPHNlY3Rpb24gaWQ9ImxpZmVjeWNsZSI+CiAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+CiAgICAgICAgPGgzPkN5Y2xlIGRlIHZpZTwvaDM+CiAgICAgICAgPGRpdiBjbGFzcz0ibGlmZWN5Y2xlIj4KICAgICAgICAgIDx1bCBjbGFzcz0ic3RlcHMiPgogICAgICAgICAgICA8bGkgY2xhc3M9InRpbWUtc3RlcCI+CiAgICAgICAgICAgICAgICA8aDQgY2xhc3M9Im1zLXNtLTMgdGV4dC1tdXRlZCI+UHLDqWPDqWRlbW1lbnQ8L2g0PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RlcCBzdGVwLWRhcmsiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGVwLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24taGVhZCI+QW5udWzDqWU8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8aDU+PGEgaHJlZj0iL2ZyL3N0YW5kYXJkLzM5MjYuaHRtbCI+SVNPIDEyMzoxOTg1PC9hPjwvaDU+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJ0aW1lLXN0ZXAiPgogICAgICAgICAgICAgIDxoNCBjbGFzcz0ibXMtc20tMyB0ZXh0LW11dGVkIj5BY3R1ZWxsZW1lbnQ8L2g0PgoKICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGVwIHN0ZXAtc3VjY2VzcyBhY3RpdmUiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24taGVhZCI+UHVibGnDqWU8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8aDU+SVNPIDEyMzoyMDAxPC9oNT4KICAgICAgICAgICAgICAgICAgPGJyLz5MZXMgbm9ybWVzIElTTyBzb250IHLDqWV4YW1pbsOpZXMgdG91cyBsZXMgY2lucSBhbnM8YnIvPjxhIGRhdGEtYnMtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgaHJlZj0iI3N0YWdlcyIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSBjdXJyZW50LXN0YWdlIHRleHQtc20gY29sbGFwc2VkIj5TdGFkZTogPHN0cm9uZz45MC45Mzwvc3Ryb25nPiAoQ29uZmlybcOpZSk8L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDx1bCBjbGFzcz0ic3RhZ2VzIGNvbGxhcHNlIiBpZD0ic3RhZ2VzIj4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gYWxlcnQtaW5mbyI+CgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiAgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj4wMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPlByw6lsaW1pbmFpcmU8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIGFsZXJ0LWluZm8iPgoKICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MTA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5Qcm9wb3NpdGlvbjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gYWxlcnQtaW5mbyI+CgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLWJzLWRpc3BsYXk9InN0YXRpYyIgZGF0YS1icy10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+UHLDqXBhcmF0aW9uPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCMyMF8wMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj4yMC4wMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjE5OTMtMDgtMTU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3V2ZWF1IHByb2pldCBlbnJlZ2lzdHLDqSBhdSBwcm9ncmFtbWUgZGUgdHJhdmFpbCBkdSBUQy9TQzwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzIwXzIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjIwLjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MTk5My0xMS0xOTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1pc2Ugw6AgbCfDqXR1ZGUgZHUgcHJvamV0IGRlIHRyYXZhaWwgKFdEKTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzIwXzk5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjIwLjk5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MTk5NS0xMi0xNTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdEIGFwcHJvdXbDqSBwb3VyIGVucmVnaXN0cmVtZW50IGNvbW1lIENEPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBhbGVydC1pbmZvIj4KCiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtYnMtZGlzcGxheT0ic3RhdGljIiBkYXRhLWJzLXRvZ2dsZT0iZHJvcGRvd24iIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MzA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5Db21pdMOpPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCMzMF8wMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj4zMC4wMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjE5OTYtMDctMjY8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9qZXQgZGUgY29taXTDqSAoQ0QpIGVucmVnaXN0csOpPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjMzBfMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MzAuMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4xOTk2LTA3LTI2PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWlzZSDDoCBsJ8OpdHVkZSBkdSBDRDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzMwXzk5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjMwLjk5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MTk5Ni0xMC0yODwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENEIGFwcHJvdXbDqSBwb3VyIGVucmVnaXN0cmVtZW50IGNvbW1lIERJUzwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gYWxlcnQtaW5mbyI+CgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLWJzLWRpc3BsYXk9InN0YXRpYyIgZGF0YS1icy10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjQwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+RW5xdcOqdGU8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzQwXzAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjQwLjAwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MTk5Ny0wOS0yMjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERJUyBlbnJlZ2lzdHLDqTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzQwXzIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjQwLjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MTk5Ny0xMC0zMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1pc2UgYXUgdm90ZSBkdSBESVM6ICAxMiBzZW1haW5lczwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzQwXzYwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjQwLjYwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MTk5OC0wNC0yMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsw7R0dXJlIGR1IHZvdGU8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCM0MF85OSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj40MC45OTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMDAtMDYtMjk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSYXBwb3J0IGNvbXBsZXQgZGlmZnVzw6k6IERJUyBhcHByb3V2w6kgcG91ciBlbnJlZ2lzdHJlbWVudCBjb21tZSBGRElTPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBhbGVydC1pbmZvIj4KCiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtYnMtZGlzcGxheT0ic3RhdGljIiBkYXRhLWJzLXRvZ2dsZT0iZHJvcGRvd24iIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NTA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5BcHByb2JhdGlvbjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjNTBfMDAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NTAuMDA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDAwLTA4LTI5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGV4dGUgZmluYWwgcmXDp3Ugb3UgRkRJUyBlbnJlZ2lzdHLDqSBwb3VyIGFwcHJvYmF0aW9uIGZvcm1lbGxlPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjNTBfMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NTAuMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDAwLTEyLTA3PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRXByZXV2ZSBlbnZvecOpZSBhdSBzZWNyw6l0YXJpYXQgb3UgbWlzZSBhdSB2b3RlIGR1IEZESVM6IDggc2VtYWluZXM8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCM1MF82MCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj41MC42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMDEtMDItMjg8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbMO0dHVyZSBkdSB2b3RlIEVwcmV1dmUgcmV0b3VybsOpZSBwYXIgbGUgc2VjcsOpdGFyaWF0PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBhbGVydC1zdWNjZXNzIj4KCiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtYnMtZGlzcGxheT0ic3RhdGljIiBkYXRhLWJzLXRvZ2dsZT0iZHJvcGRvd24iIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5QdWJsaWNhdGlvbjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjNjBfMDAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NjAuMDA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDAxLTAzLTA1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm9ybWUgaW50ZXJuYXRpb25hbGUgZW4gY291cnMgZGUgcHVibGljYXRpb248L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCM2MF82MCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj42MC42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMDEtMDUtMzE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3JtZSBpbnRlcm5hdGlvbmFsZSBwdWJsacOpZTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gYmctc3VjY2VzcyBhY3RpdmUiPgoKICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS1icy1kaXNwbGF5PSJzdGF0aWMiIGRhdGEtYnMtdG9nZ2xlPSJkcm9wZG93biIgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPkV4YW1lbjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgIGNsYXNzPSdsaXN0LXNlcGFyYXRpb24nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjOTBfMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTAuMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDA1LTExLTE1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm9ybWUgaW50ZXJuYXRpb25hbGUgZW4gY291cnMgZCdleGFtZW4gc3lzdMOpbWF0aXF1ZTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzkwXzYwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjYwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAwNi0wNy0zMTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsw7R0dXJlIGRlIGwnZXhhbWVuPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjOTBfOTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTAuOTM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDA2LTA3LTMxPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm9ybWUgaW50ZXJuYXRpb25hbGUgY29uZmlybcOpZTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpICBjbGFzcz0nbGlzdC1zZXBhcmF0aW9uJz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzkwXzIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxMS0wMS0xNTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vcm1lIGludGVybmF0aW9uYWxlIGVuIGNvdXJzIGQnZXhhbWVuIHN5c3TDqW1hdGlxdWU8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCM5MF82MCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTEtMDYtMTc8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbMO0dHVyZSBkZSBsJ2V4YW1lbjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzkwXzkzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjkzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxMS0wNi0yMTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vcm1lIGludGVybmF0aW9uYWxlIGNvbmZpcm3DqWU8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSAgY2xhc3M9J2xpc3Qtc2VwYXJhdGlvbic+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCM5MF8yMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC4yMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTYtMDEtMTU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3JtZSBpbnRlcm5hdGlvbmFsZSBlbiBjb3VycyBkJ2V4YW1lbiBzeXN0w6ltYXRpcXVlPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjOTBfNjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTAuNjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE2LTA2LTE3PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2zDtHR1cmUgZGUgbCdleGFtZW48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCM5MF85MyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC45Mzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTYtMDYtMjQ8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3JtZSBpbnRlcm5hdGlvbmFsZSBjb25maXJtw6llPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgIGNsYXNzPSdsaXN0LXNlcGFyYXRpb24nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjOTBfMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTAuMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDIxLTAxLTE1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm9ybWUgaW50ZXJuYXRpb25hbGUgZW4gY291cnMgZCdleGFtZW4gc3lzdMOpbWF0aXF1ZTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzkwXzYwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjYwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAyMS0wNi0wNTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsw7R0dXJlIGRlIGwnZXhhbWVuPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgY2xhc3M9ImFjdGl2ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCM5MF85MyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC45Mzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMjEtMDYtMDc8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3JtZSBpbnRlcm5hdGlvbmFsZSBjb25maXJtw6llPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgIGNsYXNzPSdsaXN0LXNlcGFyYXRpb24nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjOTBfMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTAuMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3JtZSBpbnRlcm5hdGlvbmFsZSBlbiBjb3VycyBkJ2V4YW1lbiBzeXN0w6ltYXRpcXVlPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjOTBfNjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTAuNjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbMO0dHVyZSBkZSBsJ2V4YW1lbjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzkwXzk5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjk5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQW5udWxhdGlvbiBkZSBsYSBOb3JtZSBpbnRlcm5hdGlvbmFsZSBwcm9wb3PDqWUgcGFyIGxlIFRDIG91IFNDPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBhbGVydC1tdXRlZCI+CgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLWJzLWRpc3BsYXk9InN0YXRpYyIgZGF0YS1icy10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjk1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+QW5udWxhdGlvbjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjOTVfOTkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTUuOTk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbm51bGF0aW9uIGRlIGxhIE5vcm1lIGludGVybmF0aW9uYWxlPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPC91bD4KCiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+Cjwvc2VjdGlvbj4KPGRpdiBjbGFzcz0ic2VjdGlvbiB0ZXh0LWNlbnRlciBtdC0wIj4KICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgPGRpdiBjbGFzcz0icm93IHJvdy1jb2xzLTEgcm93LWNvbHMtc20tMiByb3ctY29scy14bC0zIGctNCI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgIDxkaXYgY2xhc3M9ImNhcmQgaC0xMDAgbWItMCI+CiAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgIDxwPgogICAgICAgICAgICA8aW1nIGxvYWRpbmc9ImxhenkiIHNyYz0iL2ZpbGVzL2xpdmUvc2l0ZXMvaXNvb3JnL2ZpbGVzL2RhdGEvc2RnL2ZyL3NkZy1sb2dvLnBuZyIgY2xhc3M9ImltZy1mbHVpZCB3aWR0aC0xMDBwY3Qgcm91bmRlZC0wIG14LWF1dG8gZC1ibG9jayIgc3R5bGU9Im1heC13aWR0aDogMjUwcHg7IiBhbHQ9Ik9iamVjdGlmcyBkZSBkw6l2ZWxvcHBlbWVudCBkdXJhYmxlIiAvPgogICAgICAgICAgPC9wPgogICAgICAgICAgPHA+CiAgICAgICAgICAgIENldHRlIG5vcm1lIGNvbnRyaWJ1ZSBhdXggPGEgaHJlZj0iL2ZyL3NkZ3MuaHRtbCI+T2JqZWN0aWZzIGRlIGTDqXZlbG9wcGVtZW50IGR1cmFibGU8L2E+Jm5ic3A7c3VpdmFudHM8cD4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyZml4IGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3NkZy9TREcxMi5odG1sIiB0aXRsZT0iQ29uc29tbWF0aW9uIGV0IHByb2R1Y3Rpb24gcmVzcG9uc2FibGVzIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZyBzZGctc20gc2RnLTEyIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnLWljb24iPjwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGctbGFiZWwiPjEyPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy10ZXh0Ij5Db25zb21tYXRpb24gZXQgcHJvZHVjdGlvbiByZXNwb25zYWJsZXM8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnLWxvZ28iPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8YSBocmVmPSIvZnIvc2RnL1NERzA5Lmh0bWwiIHRpdGxlPSJJbmR1c3RyaWUsIGlubm92YXRpb24gZXQgaW5mcmFzdHJ1Y3R1cmUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnIHNkZy1zbSBzZGctMDkiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGctaWNvbiI+PC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy1sYWJlbCI+OTwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGctdGV4dCI+SW5kdXN0cmllLCBpbm5vdmF0aW9uIGV0IGluZnJhc3RydWN0dXJlPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy1sb2dvIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CiAgPC9kaXY+CjwvZGl2PgoKPHNlY3Rpb24gY2xhc3M9ImJnLWxpZ2h0Z3JheSIgaWQ9ImNvbnRhY3QiPgogIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCI+CiAgICAgICAgPGg0PlZvdXMgYXZleiB1bmUgcXVlc3Rpb24/PC9oND4KCjxwPkNvbnN1bHRlciBub3RyZSZuYnNwOzxhIGhyZWY9Ii9mci9mcmVxdWVudGx5LWFza2VkLXF1ZXN0aW9ucy1mYXFzLmh0bWwiIHRpdGxlPSJGb2lyZSBBdXggUXVlc3Rpb25zIChGQVFzKSI+RkFRPC9hPjwvcD48L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQiPgogICAgICAgIDxkaXYgY2xhc3M9InZjYXJkIGNvbnRhY3Qgbm8tZmlndXJlIGNsZWFyZml4IiBpdGVtc2NvcGU9IiIgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL1BlcnNvbiI+CjxkaXYgY2xhc3M9ImNvbnRlbnQtYm94IG5vLWltYWdlIj4KPGRpdiBjbGFzcz0iZm4gbiI+PHNwYW4gY2xhc3M9ImdpdmVuLW5hbWUiIGl0ZW1wcm9wPSJnaXZlbk5hbWUiPlNlcnZpY2UgJmFncmF2ZTsgbGEgY2xpZW50JmVncmF2ZTtsZTwvc3Bhbj48L2Rpdj4KCjxkaXYgY2xhc3M9InRlbCIgaXRlbXByb3A9InRlbGVwaG9uZSI+KzQxIDIyIDc0OSAwOCA4ODwvZGl2PgoKPGRpdiBjbGFzcz0iZW1haWwiIGl0ZW1wcm9wPSJlbWFpbCI+PGEgaHJlZj0ibWFpbHRvOmN1c3RvbWVyc2VydmljZUBpc28ub3JnIj5jdXN0b21lcnNlcnZpY2VAaXNvLm9yZzwvYT48L2Rpdj4KCjxociAvPgo8ZGl2IGNsYXNzPSJub3RlIj4KPHAgY2xhc3M9InNtYWxsIj5Ib3JhaXJlcyBkJnJzcXVvO291dmVydHVyZTo8YnIgLz4KRGUgbHVuZGkgJmFncmF2ZTsgdmVuZHJlZGkgLSAwOTowMC0xMjowMCwgMTQ6MDAtMTc6MDAgKFVUQysxKTwvcD4KPC9kaXY+CjwvZGl2Pgo8L2Rpdj48L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQiPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+Cjwvc2VjdGlvbj48ZGl2IGNsYXNzPSJuYXYtYnJlYWRjcnVtYiBwcmludC1mb290ZXIgYmctYmxhY2siPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTAgc21hbGwiPgogICAgICAgICAgICAgIDwhLS0gQlJFQURDUlVNQiAtLT4KICAgICAgICAgICAgICA8b2wgY2xhc3M9ImJyZWFkY3J1bWIiPgogICAgPGxpIGNsYXNzPSJicmVhZGNydW1iLWl0ZW0iPjxhIGhyZWY9Ii9mci9ob21lLmh0bWwiIHRpdGxlPSJQYWdlIGQnYWNjdWVpbCI+PGkgY2xhc3M9ImJpLWhvdXNlIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPjwvYT48L2xpPgogICAgPGxpIGNsYXNzPSJicmVhZGNydW1iLWl0ZW0iPgogICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0b3JlLmh0bWwiPlN0b3JlPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+CiAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhbmRhcmRzLWNhdGFsb2d1ZS9icm93c2UtYnktaWNzLmh0bWwiID5DYXRhbG9ndWUgZGUgbm9ybWVzPC9hPgo8L2xpPgogICAgICA8bGkgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+CiAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhbmRhcmRzLWNhdGFsb2d1ZS9icm93c2UtYnktaWNzLmh0bWwiPklDUzwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJicmVhZGNydW1iLWl0ZW0iPjxhIGhyZWY9Ii9mci9pY3MvODMuaHRtbCI+ODM8L2E+PC9saT4KICAgIDxsaSBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIj48YSBocmVmPSIvZnIvaWNzLzgzLjA0MC5odG1sIj44My4wNDA8L2E+PC9saT4KICAgIDxsaSBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIj48YSBocmVmPSIvZnIvaWNzLzgzLjA0MC4xMC5odG1sIj44My4wNDAuMTA8L2E+PC9saT48bGkgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+SVNPIDEyMzoyMDAxPC9saT48L29sPjwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMiBoaWRkZW4tcHJpbnQgdGV4dC1lbmQgc21hbGwgbXQtMyBtdC1zbS0wIj4KICAgICAgICAgICAgICA8YSByb2xlPSJidXR0b24iIGNsYXNzPSJkcm9wZG93bi10b2dnbGUgdGV4dC13aGl0ZSBjb2xsYXBzZWQiIGRhdGEtYnMtdG9nZ2xlPSJjb2xsYXBzZSIgaHJlZj0iI2NvbGxhcHNlU2l0ZW1hcCIgdGFyZ2V0PSJfc2VsZiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtY29udHJvbHM9ImNvbGxhcHNlU2l0ZW1hcCI+UGxhbiBkdSBzaXRlPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbGxhcHNlIGJvcmRlci10b3AiIGlkPSJjb2xsYXBzZVNpdGVtYXAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgIDwhLS0gU0lURU1BUCAtLT4KICAgICAgICAgICAgICA8bmF2IHJvbGU9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9IlNpdGVtYXAiIGNsYXNzPSJzaXRlbWFwLWZvb3RlciBjbGVhcmZpeCBzbWFsbCIgaWQ9Im5hdi1zaXRlbWFwIj48dWwgcm9sZT0nbWVudWJhcicgY2xhc3M9J2xpc3QtaW5saW5lLTUgY2xlYXJmaXggbmF2LWxldmVsMScgPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBoYXNDaGlsZHJlbiBmaXJzdEluTGV2ZWwnID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgdGl0bGU9IlBhcmNlIHF14oCZZWxsZXMgY291dnJlbnQgcHJhdGlxdWVtZW50IHRvdXMgbGVzIHByb2R1aXRzLCBwcm9jZXNzdXMgZXQgc2VydmljZXMgcG9zc2libGVzIGV0IGltYWdpbmFibGVzLCBsZXMgbm9ybWVzIElTTyBwZXV2ZW50IMOqdHJlIHV0aWxpc8OpZXMgcGFydG91dC4iICBocmVmPScvZnIvc3RhbmRhcmRzLmh0bWwnPk5vcm1lczwvYT48dWwgcm9sZT0nbWVudWJhcicgY2xhc3M9J2xpc3QtdW5zdHlsZWQgbmF2LWxldmVsMicgPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCcgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iVm91cyBkaXJpZ2V6IHVuZSBlbnRyZXByaXNlIG91IHRyYXZhaWxsZXogZGFucyBsZSBzZWN0ZXVyIHByaXbDqSBvdSBwdWJsaWMgPyBWb3VzIMOqdGVzIHVuIGNvbnNvbW1hdGV1ciBzb3VjaWV1eCBkZSBiw6luw6lmaWNpZXIgZGUgcHJvZHVpdHMgZXQgc2VydmljZXMgcsOpcG9uZGFudCDDoCB2b3MgYXR0ZW50ZXMgPyBEw6ljb3V2cmV6IGNlIHF1ZSBsZXMgbm9ybWVzIHBldXZlbnQgdm91cyBhcHBvcnRlci4iICBocmVmPScvZnIvYmVuZWZpdHMtb2Ytc3RhbmRhcmRzLmh0bWwnPkF2YW50YWdlczwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDIgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgdGl0bGU9IlZvdXMgcG91cnJleiBkw6ljb3V2cmlyIGRhbnMgY2V0dGUgc2VjdGlvbiBxdWVscXVlcy11bmVzIGRlIG5vcyBub3JtZXMgbGVzIHBsdXMgY29ubnVlcyBldCBsZSBwbHVzIGxhcmdlbWVudCBhcHBsaXF1w6llcywgYWluc2kgcXVlIGxlcyBub3JtZXMgYWJvcmRhbnQgZGUgbm91dmVhdXggZW5qZXV4IGF1eHF1ZWxzIG5vdXMgc29tbWVzIHRvdXMgY29uZnJvbnTDqXMuCgoiICBocmVmPScvZnIvcG9wdWxhci1zdGFuZGFyZHMuaHRtbCc+TGVzIG5vcm1lcyBsZXMgcGx1cyBjb25udWVzPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iQSBzZXQgb2YgcHJvY2Vzc2VzIHRoYXQgc2hvdyB5b3VyIHByb2R1Y3QsIHNlcnZpY2Ugb3Igc3lzdGVtIG1lZXRzIHRoZSByZXF1aXJlbWVudHMgb2YgYSBzdGFuZGFyZC4iICBocmVmPScvZnIvY29uZm9ybWl0eS1hc3Nlc3NtZW50Lmh0bWwnPsOJdmFsdWF0aW9uIGRlIGxhIGNvbmZvcm1pdMOpPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbiBsYXN0SW5MZXZlbCcgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iTGVzIE5vcm1lcyBpbnRlcm5hdGlvbmFsZXMgZm91cm5pc3NlbnQgZGVzIG91dGlscyBlZmZpY2FjZXMgYXV4IG9yZ2FuaXNhdGlvbnMgZXQgYXV4IGVudHJlcHJpc2VzIGTDqXNpcmV1c2VzIGRlIHJlbGV2ZXIgbGUgZMOpZmkgZGVzIE9ERC4iICBocmVmPScvZnIvc2Rncy5odG1sJz5PREQ8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjwvdWw+PCEtLSBjbG9zZSBvZiBjb250YWluZXIgbGV2ZWwgMiAtLT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIGhhc0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJM4oCZSVNPIHLDqXVuaXQgZGVzIGV4cGVydHMgZHUgbW9uZGUgZW50aWVyIHBvdXIgw6lsYWJvcmVyIGRlcyBOb3JtZXMgaW50ZXJuYXRpb25hbGVzIHF1aSBhaWRlbnQgw6AgcsOpc291ZHJlIGxlcyBwcm9ibMOobWVzIGV0IGVuY291cmFnZW50IGzigJlpbm5vdmF0aW9uLiIgIGhyZWY9Jy9mci9hYm91dC11cy5odG1sJz7DgCBwcm9wb3MgZGUgbOKAmUlTTzwvYT48dWwgcm9sZT0nbWVudWJhcicgY2xhc3M9J2xpc3QtdW5zdHlsZWQgbmF2LWxldmVsMicgPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCcgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iRMOpY291dnJleiBjb21tZW50IG5vdXMgw6lsYWJvcm9ucyBldCBwdWJsaW9ucyBkZXMgTm9ybWVzIGludGVybmF0aW9uYWxlcyBlbiBtb2JpbGlzYW50IHBsdXMgZGUgMTYwIG1lbWJyZXMgZXQgcGx1cyBkZSA0NSAwMDAgZXhwZXJ0cy4iICBocmVmPScvZnIvd2hhdC13ZS1kby5odG1sJz5Ob3MgYWN0aXZpdMOpczwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDIgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgIGhyZWY9Jy9mci9zdHJ1Y3R1cmUuaHRtbCc+U3RydWN0dXJlPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iTOKAmUlTTywgcXVpIHJlcHLDqXNlbnRlIGxlcyBxdWF0cmUgY29pbnMgZGUgbGEgcGxhbsOodGUgZXQgY29tcHJlbmQgdW4gbWVtYnJlIHBhciBwYXlzLCBlc3QgbOKAmU9yZ2FuaXNhdGlvbiBpbnRlcm5hdGlvbmFsZSBkZSBub3JtYWxpc2F0aW9uLiIgIGhyZWY9Jy9mci9tZW1iZXJzLmh0bWwnPk1lbWJyZXM8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuIGxhc3RJbkxldmVsJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJSZW5kcmUgbGEgdmllIHBsdXMgZmFjaWxlLCBwbHVzIHPDu3JlIGV0IG1laWxsZXVyZS4gTGEgU3RyYXTDqWdpZSBkZSBs4oCZSVNPIDIwMzAgcHLDqXNlbnRlIG5vdHJlIHZpc2lvbiBldCBub3RyZSBtaXNzaW9uIHBvdXIgbGVzIGRpeCBwcm9jaGFpbmVzIGFubsOpZXMsIGFpbnNpIHF1J3VuIGVuc2VtYmxlIGQnb2JqZWN0aWZzIGV0IGRlIHByaW9yaXTDqXMgcG91ciBub3VzIGFpZGVyIMOgIHkgcGFydmVuaXIuIiAgaHJlZj0nL2ZyL3N0cmF0ZWd5MjAzMC5odG1sJz5TdHJhdMOpZ2llIDIwMzA8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjwvdWw+PCEtLSBjbG9zZSBvZiBjb250YWluZXIgbGV2ZWwgMiAtLT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIGhhc0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJSZXN0ZXogaW5mb3Jtw6kgZGVzIGRlcm5pw6hyZXMgbm91dmVhdXTDqXMgZW4gbWF0acOocmUgZGUgbm9ybWFsaXNhdGlvbiBvdSBwYXJjb3VyZXogbm9zIHJpY2hlcyBhcmNoaXZlcyIgIGhyZWY9Jy9mci9uZXdzLmh0bWwnPkFjdHVhbGl0w6lzPC9hPjx1bCByb2xlPSdtZW51YmFyJyBjbGFzcz0nbGlzdC11bnN0eWxlZCBuYXYtbGV2ZWwyJyA+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgdGl0bGU9IkNvbnN1bHRleiBjZXR0ZSBzZWN0aW9uIHBvdXIgdG91dCBzYXZvaXIgc3VyIGxlcyBwcm9jaGFpbmVzIG1hbmlmZXN0YXRpb25zIGV0IGxlcyBtYW5pZmVzdGF0aW9ucyByw6ljZW50ZXMuIiAgaHJlZj0nL2ZyL2V2ZW50cy5odG1sJz5NYW5pZmVzdGF0aW9uczwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDIgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgIGhyZWY9Jy9mci9tZWRpYS1raXQuaHRtbCc+RG9zc2llciBtw6lkaWFzPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48L3VsPjwhLS0gY2xvc2Ugb2YgY29udGFpbmVyIGxldmVsIDIgLS0+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBoYXNDaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iRMOpY291dnJleiBjb21tZW50IGxlIHByb2Nlc3N1cyBkZSBs4oCZSVNPIHLDqXVuaSBkZXMgZXhwZXJ0cyBkdSBtb25kZSBlbnRpZXIgcG91ciBjcsOpZXIgZGVzIG5vcm1lcyBhZG9wdMOpZXMgcGFydG91dCBkYW5zIGxlIG1vbmRlLiIgIGhyZWY9Jy9mci9kZXZlbG9waW5nLXN0YW5kYXJkcy5odG1sJz5QYXJ0aWNpcGVyPC9hPjx1bCByb2xlPSdtZW51YmFyJyBjbGFzcz0nbGlzdC11bnN0eWxlZCBuYXYtbGV2ZWwyJyA+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4gZmlyc3RJbkxldmVsJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgICBocmVmPScvZnIvd2hvLWRldmVsb3BzLXN0YW5kYXJkcy5odG1sJz5RdWkgw6lsYWJvcmUgbGVzIG5vcm1lczwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDIgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgdGl0bGU9IkxlcyBkaWZmw6lyZW50cyB0eXBlcyBkZSBwdWJsaWNhdGlvbnMgZGUgbOKAmUlTTy4iICBocmVmPScvZnIvZGVsaXZlcmFibGVzLWFsbC5odG1sJz5MaXZyYWJsZXM8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgICBocmVmPScvZnIvZ2V0LWludm9sdmVkLmh0bWwnPlBvdXJxdW9pIHPigJllbmdhZ2VyID88L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgICBocmVmPScvZnIvQ2xpbWF0ZUFjdGlvbi5odG1sJz5LaXQgZOKAmWFjdGlvbiBwb3VyIGxlIGNsaW1hdDwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDIgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4gbGFzdEluTGV2ZWwnID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgdGl0bGU9IkRlcyByZXNzb3VyY2VzIHV0aWxlcyBwb3VyIGFwcHV5ZXIgbGUgdHJhdmFpbCBkZXMgcGVyc29ubmVzIGVuZ2Fnw6llcyBkYW5zIGwnw6lsYWJvcmF0aW9uIGRlcyBub3JtZXMuIiAgaHJlZj0nL2ZyL3Jlc291cmNlcy5odG1sJz5SZXNzb3VyY2VzPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48L3VsPjwhLS0gY2xvc2Ugb2YgY29udGFpbmVyIGxldmVsIDIgLS0+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBoYXNDaGlsZHJlbiBpblBhdGggIGxhc3RJbkxldmVsJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJWb3VzIHZvdWxleiBhY2hldGVyIGRlcyBOb3JtZXMgaW50ZXJuYXRpb25hbGVzLCBkZXMgbGlnbmVzIGRpcmVjdHJpY2VzLCBkZXMgY29sbGVjdGlvbnMgb3UgZGVzIGxpc3RlcyBkZSBjb250csO0bGU/IEVsbGVzIHNvbnQgdG91dGVzIHN1ciBs4oCZSVNPIFN0b3JlLiIgIGhyZWY9Jy9mci9zdG9yZS5odG1sJz5TdG9yZTwvYT48dWwgcm9sZT0nbWVudWJhcicgY2xhc3M9J2xpc3QtdW5zdHlsZWQgbmF2LWxldmVsMicgPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuIGluUGF0aCAgYWN0aXZlIGZpcnN0SW5MZXZlbCcgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICAgaHJlZj0nL2ZyL3N0YW5kYXJkcy1jYXRhbG9ndWUvYnJvd3NlLWJ5LWljcy5odG1sJz5DYXRhbG9ndWUgZGUgbm9ybWVzPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iTGVzIHB1YmxpY2F0aW9ucyBkZSBs4oCZSVNPIGRvbm5lbnQgZGVzIGluZm9ybWF0aW9ucyBldCBkZXMgb3JpZW50YXRpb25zIHN1ciBkZXMgYXBwbGljYXRpb25zIHNww6ljaWZpcXVlcyBldCBpbGx1c3RyZW50IGxhIHZhbGV1ciBham91dMOpZSBkZXMgbm9ybWVzLiIgIGhyZWY9Jy9mci9wdWJsaWNhdGlvbi1saXN0Lmh0bWwnPlB1YmxpY2F0aW9ucyBldCBwcm9kdWl0czwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDIgLS0+PC91bD48IS0tIGNsb3NlIG9mIGNvbnRhaW5lciBsZXZlbCAyIC0tPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMSAtLT48L3VsPjwhLS0gY2xvc2Ugb2YgY29udGFpbmVyIGxldmVsIDEgLS0+PC9uYXY+PC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L21haW4+CiAgICA8Zm9vdGVyIHJvbGU9ImNvbnRlbnRpbmZvIiBhcmlhLWxhYmVsPSJGb290ZXIiIGNsYXNzPSJmb290ZXItaXNvIGZvb3Rlci1kYXJrIGJnLWRhcmsiPgogICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlci1saW5rcyBjZW50ZXItYmxvY2siPgogICAgICAgICAgPCEtLSBGT09URVIgTElOS1MgLS0+CiAgICAgICAgICA8bmF2IHJvbGU9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9IklubGluZSBOYXZpZ2F0aW9uIiBjbGFzcz0iIiBpZD0iIj48dWwgcm9sZT0nbWVudWJhcicgY2xhc3M9J2xpc3QtaW5saW5lIGNsZWFyZml4IG5hdi1sZXZlbDEnID48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbiBmaXJzdEluTGV2ZWwnID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgIGhyZWY9Jy9mci9pc28tbmFtZS1hbmQtbG9nby5odG1sJz5Ob20gZXQgbG9nbyBkZSBsJ0lTTzwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgIGhyZWY9Jy9mci9jb25maWRlbnRpYWxpdGUnPlByaXZhY3kgTm90aWNlPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMSAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICAgaHJlZj0nL2ZyL2NvcHlyaWdodC5odG1sJz5Ecm9pdCBkJ2F1dGV1cjwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgIGhyZWY9Jy9mci9jb29raWVzLmh0bWwnPlBvbGl0aXF1ZSByZWxhdGl2ZSBhdXggY29va2llczwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgIGhyZWY9Jy9mci93b3JraW5nLXdpdGgtaXNvLmh0bWwnPkVtcGxvaTwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgIGhyZWY9Jy9mci9mcmVxdWVudGx5LWFza2VkLXF1ZXN0aW9ucy1mYXFzLmh0bWwnPkZBUTwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgIGhyZWY9Jy9mci9jb250YWN0LWlzby5odG1sJz5Db250YWN0ZXIgbCdJU088L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjwvdWw+PCEtLSBjbG9zZSBvZiBjb250YWluZXIgbGV2ZWwgMSAtLT48L25hdj48ZGl2IGNsYXNzPSJyb3cgICAgICAgIiA+CjxkaXYgY2xhc3M9ImNvbC1tZC02IG9mZnNldC1tZC0zIGNvbC14bC00IG9mZnNldC14bC00Ij48aDIgY2xhc3M9Img0IHB0LTMgcGItMiI+UmVjZXZvaXIgZGVzIGluZm9ybWF0aW9ucyBwYXIgZS1tYWlsPC9oMj48Zm9ybSBtZXRob2Q9IlBPU1QiIGFjdGlvbj0iaHR0cHM6Ly9pc28yNzIuYWN0aXZlaG9zdGVkLmNvbS9wcm9jLnBocCIgaWQ9Il9mb3JtXzIzXyIgY2xhc3M9Il9mb3JtIF9mb3JtXzIzIF9pbmxpbmUtZm9ybSAgX2RhcmsiIG5vdmFsaWRhdGU+CiAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0idSIgdmFsdWU9IjIzIiAvPgogIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImYiIHZhbHVlPSIyMyIgLz4KICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzIiAvPgogIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImMiIHZhbHVlPSIwIiAvPgogIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im0iIHZhbHVlPSIwIiAvPgogIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFjdCIgdmFsdWU9InN1YiIgLz4KICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJ2IiB2YWx1ZT0iMiIgLz4KICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvciIgdmFsdWU9Ijk0MTdiOWNkNTJmZjZjNzQyZTE3NmEzNzBlZDU0NDJhIiAvPgoKICA8c3R5bGU+CiAgICAgIC5fZXJyb3IgewogICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICBwYWRkaW5nOiAwLjVlbSAxLjI1ZW07CiAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0OwogICAgICB9CiAgPC9zdHlsZT4KCiAgPGRpdiBjbGFzcz0iX2Zvcm0tY29udGVudCI+CiAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCBpbnB1dC1ncm91cC1yb3VuZCBtYi0zIj4KICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJlbWFpbCIgY2xhc3M9ImZvcm0tY29udHJvbCIgbmFtZT0iZW1haWwiIHBsYWNlaG9sZGVyPSJDb3VycmllbCIgYXJpYS1sYWJlbD0iRW1haWwiIGFyaWEtZGVzY3JpYmVkYnk9Il9mb3JtXzIzX3N1Ym1pdCIgcmVxdWlyZWQvPgoKICAgICAgPGJ1dHRvbiBpZD0iX2Zvcm1fMjNfc3VibWl0IiBjbGFzcz0iX3N1Ym1pdCBidG4gYnRuLXByaW1hcnkiIHR5cGU9InN1Ym1pdCI+CiAgICAgICAgUydhYm9ubmVyICo8L2J1dHRvbj4KICAgIDwvZGl2PgogIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9Il9mb3JtLXRoYW5rLXlvdSBtYi0zIiBzdHlsZT0iZGlzcGxheTpub25lOyI+CiAgICAgICAgICA8cD48c3Ryb25nPkFsbW9zdCBkb25lISZuYnNwOzwvc3Ryb25nPjxiciAvPgpZb3UgYXJlIG9ubHkgb25lIHN0ZXAgYXdheSBmcm9tIGpvaW5pbmcgdGhlIElTTyBzdWJzY3JpYmVyIGxpc3QuIFBsZWFzZSBjb25maXJtIHlvdXIgc3Vic2NyaXB0aW9uIGJ5IGNsaWNraW5nIG9uIHRoZSBlbWFpbCB3ZSYjMzk7dmUganVzdCBzZW50IHRvIHlvdS4gWW91IHdpbGwgbm90IGJlIHJlZ2lzdGVyZWQgdW50aWwgeW91IGNvbmZpcm0geW91ciBzdWJzY3JpcHRpb24uIElmIHlvdSBjYW4mIzM5O3QgZmluZCB0aGUgZW1haWwsIGtpbmRseSBjaGVjayB5b3VyIHNwYW0gZm9sZGVyIGFuZC9vciB0aGUgcHJvbW90aW9ucyB0YWIgKGlmIHlvdSB1c2UgR21haWwpLjwvcD48L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0idGV4dC1zbSI+KiBOZXdzbGV0dGVyIGVuIGFuZ2xhaXM8L2Rpdj48L2Zvcm0+CgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogIHdpbmRvdy5fc2hvd190aGFua195b3UgPSBmdW5jdGlvbihpZCwgbWVzc2FnZSwgdHJhY2tjbXBfdXJsLCBlbWFpbCkgewogICAgdmFyIGZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnX2Zvcm1fJyArIGlkICsgJ18nKSwgdGhhbmtfeW91ID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcuX2Zvcm0tdGhhbmsteW91Jyk7CiAgICBmb3JtLnF1ZXJ5U2VsZWN0b3IoJy5fZm9ybS1jb250ZW50Jykuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgIC8vIHRoYW5rX3lvdS5pbm5lckhUTUwgPSBtZXNzYWdlOwogICAgdGhhbmtfeW91LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgY29uc3QgdmdvQWxpYXMgPSB0eXBlb2YgdmlzaXRvckdsb2JhbE9iamVjdEFsaWFzID09PSAndW5kZWZpbmVkJyA/ICd2Z28nIDogdmlzaXRvckdsb2JhbE9iamVjdEFsaWFzOwogICAgdmFyIHZpc2l0b3JPYmplY3QgPSB3aW5kb3dbdmdvQWxpYXNdOwogICAgaWYgKGVtYWlsICYmIHR5cGVvZiB2aXNpdG9yT2JqZWN0ICE9PSAndW5kZWZpbmVkJykgewogICAgICB2aXNpdG9yT2JqZWN0KCdzZXRFbWFpbCcsIGVtYWlsKTsKICAgICAgdmlzaXRvck9iamVjdCgndXBkYXRlJyk7CiAgICB9IGVsc2UgaWYgKHR5cGVvZih0cmFja2NtcF91cmwpICE9ICd1bmRlZmluZWQnICYmIHRyYWNrY21wX3VybCkgewogICAgICAvLyBTaXRlIHRyYWNraW5nIFVSTCB0byB1c2UgYWZ0ZXIgaW5saW5lIGZvcm0gc3VibWlzc2lvbi4KICAgICAgX2xvYWRfc2NyaXB0KHRyYWNrY21wX3VybCk7CiAgICB9CiAgICBpZiAodHlwZW9mIHdpbmRvdy5fZm9ybV9jYWxsYmFjayAhPT0gJ3VuZGVmaW5lZCcpIHdpbmRvdy5fZm9ybV9jYWxsYmFjayhpZCk7CiAgfTsKICB3aW5kb3cuX3Nob3dfZXJyb3IgPSBmdW5jdGlvbihpZCwgbWVzc2FnZSwgaHRtbCkgewogICAgdmFyIGZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnX2Zvcm1fJyArIGlkICsgJ18nKSwgZXJyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksIGJ1dHRvbiA9IGZvcm0ucXVlcnlTZWxlY3RvcignYnV0dG9uJyksIG9sZF9lcnJvciA9IGZvcm0ucXVlcnlTZWxlY3RvcignLl9mb3JtX2Vycm9yJyk7CiAgICBpZiAob2xkX2Vycm9yKSBvbGRfZXJyb3IucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvbGRfZXJyb3IpOwogICAgZXJyLmlubmVySFRNTCA9IG1lc3NhZ2U7CiAgICBlcnIuY2xhc3NOYW1lID0gJ19lcnJvci1pbm5lciBfZm9ybV9lcnJvciBfbm9fYXJyb3cnOwogICAgdmFyIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgIHdyYXBwZXIuY2xhc3NOYW1lID0gJ19mb3JtLWlubmVyJzsKICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoZXJyKTsKICAgIGJ1dHRvbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh3cmFwcGVyLCBidXR0b24pOwogICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2lkXj0iX2Zvcm0iXVtpZCQ9Il9zdWJtaXQiXScpLmRpc2FibGVkID0gZmFsc2U7CiAgICBpZiAoaHRtbCkgewogICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgIGRpdi5jbGFzc05hbWUgPSAnX2Vycm9yLWh0bWwnOwogICAgICBkaXYuaW5uZXJIVE1MID0gaHRtbDsKICAgICAgZXJyLmFwcGVuZENoaWxkKGRpdik7CiAgICB9CiAgfTsKICB3aW5kb3cuX2xvYWRfc2NyaXB0ID0gZnVuY3Rpb24odXJsLCBjYWxsYmFjaykgewogICAgdmFyIGhlYWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkJyksIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpLCByID0gZmFsc2U7CiAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwogICAgc2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnOwogICAgc2NyaXB0LnNyYyA9IHVybDsKICAgIGlmIChjYWxsYmFjaykgewogICAgICBzY3JpcHQub25sb2FkID0gc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmICghciAmJiAoIXRoaXMucmVhZHlTdGF0ZSB8fCB0aGlzLnJlYWR5U3RhdGUgPT0gJ2NvbXBsZXRlJykpIHsKICAgICAgICAgIHIgPSB0cnVlOwogICAgICAgICAgY2FsbGJhY2soKTsKICAgICAgICB9CiAgICAgIH07CiAgICB9CiAgICBoZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7CiAgfTsKICAoZnVuY3Rpb24oKSB7CiAgICBpZiAod2luZG93LmxvY2F0aW9uLnNlYXJjaC5zZWFyY2goImV4Y2x1ZGVmb3JtIikgIT09IC0xKSByZXR1cm4gZmFsc2U7CiAgICB2YXIgZ2V0Q29va2llID0gZnVuY3Rpb24obmFtZSkgewogICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58OyApJyArIG5hbWUgKyAnPShbXjtdKyknKSk7CiAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzJdIDogbnVsbDsKICAgIH0KICAgIHZhciBzZXRDb29raWUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkgewogICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTsKICAgICAgdmFyIHRpbWUgPSBub3cuZ2V0VGltZSgpOwogICAgICB2YXIgZXhwaXJlVGltZSA9IHRpbWUgKyAxMDAwICogNjAgKiA2MCAqIDI0ICogMzY1OwogICAgICBub3cuc2V0VGltZShleHBpcmVUaW1lKTsKICAgICAgZG9jdW1lbnQuY29va2llID0gbmFtZSArICc9JyArIHZhbHVlICsgJzsgZXhwaXJlcz0nICsgbm93ICsgJztwYXRoPS87IFNlY3VyZTsgU2FtZVNpdGU9TGF4Oyc7Ly8gY2Fubm90IGJlIEh0dHBPbmx5CiAgICB9CiAgICB2YXIgYWRkRXZlbnQgPSBmdW5jdGlvbihlbGVtZW50LCBldmVudCwgZnVuYykgewogICAgICBpZiAoZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKSB7CiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBmdW5jKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgb2xkRnVuYyA9IGVsZW1lbnRbJ29uJyArIGV2ZW50XTsKICAgICAgICBlbGVtZW50WydvbicgKyBldmVudF0gPSBmdW5jdGlvbigpIHsKICAgICAgICAgIG9sZEZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB9OwogICAgICB9CiAgICB9CiAgICB2YXIgX3JlbW92ZWQgPSBmYWxzZTsKICAgIHZhciBmb3JtX3RvX3N1Ym1pdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdfZm9ybV8yM18nKTsKICAgIHZhciBhbGxJbnB1dHMgPSBmb3JtX3RvX3N1Ym1pdC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYScpLCB0b29sdGlwcyA9IFtdLCBzdWJtaXR0ZWQgPSBmYWxzZTsKCiAgICB2YXIgZ2V0VXJsUGFyYW0gPSBmdW5jdGlvbihuYW1lKSB7CiAgICAgIHZhciBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpOwogICAgICByZXR1cm4gcGFyYW1zLmdldChuYW1lKSB8fCBmYWxzZTsKICAgIH07CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGxJbnB1dHMubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIHJlZ2V4U3RyID0gImZpZWxkXFxbKFxcZCspXFxdIjsKICAgICAgdmFyIHJlc3VsdHMgPSBuZXcgUmVnRXhwKHJlZ2V4U3RyKS5leGVjKGFsbElucHV0c1tpXS5uYW1lKTsKICAgICAgaWYgKHJlc3VsdHMgIT0gdW5kZWZpbmVkKSB7CiAgICAgICAgYWxsSW5wdXRzW2ldLmRhdGFzZXQubmFtZSA9IHdpbmRvdy5jZmllbGRzW3Jlc3VsdHNbMV1dOwogICAgICB9IGVsc2UgewogICAgICAgIGFsbElucHV0c1tpXS5kYXRhc2V0Lm5hbWUgPSBhbGxJbnB1dHNbaV0ubmFtZTsKICAgICAgfQogICAgICB2YXIgZmllbGRWYWwgPSBnZXRVcmxQYXJhbShhbGxJbnB1dHNbaV0uZGF0YXNldC5uYW1lKTsKCiAgICAgIGlmIChmaWVsZFZhbCkgewogICAgICAgIGlmIChhbGxJbnB1dHNbaV0uZGF0YXNldC5hdXRvZmlsbCA9PT0gImZhbHNlIikgewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGlmIChhbGxJbnB1dHNbaV0udHlwZSA9PSAicmFkaW8iIHx8IGFsbElucHV0c1tpXS50eXBlID09ICJjaGVja2JveCIpIHsKICAgICAgICAgIGlmIChhbGxJbnB1dHNbaV0udmFsdWUgPT0gZmllbGRWYWwpIHsKICAgICAgICAgICAgYWxsSW5wdXRzW2ldLmNoZWNrZWQgPSB0cnVlOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBhbGxJbnB1dHNbaV0udmFsdWUgPSBmaWVsZFZhbDsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICB2YXIgcmVtb3ZlX3Rvb2x0aXBzID0gZnVuY3Rpb24oKSB7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9vbHRpcHMubGVuZ3RoOyBpKyspIHsKICAgICAgICB0b29sdGlwc1tpXS50aXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0b29sdGlwc1tpXS50aXApOwogICAgICB9CiAgICAgIHRvb2x0aXBzID0gW107CiAgICB9OwogICAgdmFyIHJlbW92ZV90b29sdGlwID0gZnVuY3Rpb24oZWxlbSkgewogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvb2x0aXBzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKHRvb2x0aXBzW2ldLmVsZW0gPT09IGVsZW0pIHsKICAgICAgICAgIHRvb2x0aXBzW2ldLnRpcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRvb2x0aXBzW2ldLnRpcCk7CiAgICAgICAgICB0b29sdGlwcy5zcGxpY2UoaSwgMSk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICB9CiAgICB9OwogICAgdmFyIGNyZWF0ZV90b29sdGlwID0gZnVuY3Rpb24oZWxlbSwgdGV4dCkgewogICAgICB2YXIgdG9vbHRpcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCBhcnJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCBpbm5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCBuZXdfdG9vbHRpcCA9IHt9OwogICAgICBpZiAoZWxlbS50eXBlICE9ICdyYWRpbycgJiYgZWxlbS50eXBlICE9ICdjaGVja2JveCcpIHsKICAgICAgICB0b29sdGlwLmNsYXNzTmFtZSA9ICdfZXJyb3IgdGV4dC1zbSB0ZXh0LW11dGVkIHRleHQtc3RhcnQnOwogICAgICAgIGFycm93LmNsYXNzTmFtZSA9ICdfZXJyb3ItYXJyb3cnOwogICAgICAgIGlubmVyLmNsYXNzTmFtZSA9ICdfZXJyb3ItaW5uZXInOwogICAgICAgIGlubmVyLmlubmVySFRNTCA9IHRleHQ7CiAgICAgICAgdG9vbHRpcC5hcHBlbmRDaGlsZChhcnJvdyk7CiAgICAgICAgdG9vbHRpcC5hcHBlbmRDaGlsZChpbm5lcik7CiAgICAgICAgZWxlbS5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHRvb2x0aXApOwogICAgICB9IGVsc2UgewogICAgICAgIHRvb2x0aXAuY2xhc3NOYW1lID0gJ19lcnJvci1pbm5lciBfbm9fYXJyb3cnOwogICAgICAgIHRvb2x0aXAuaW5uZXJIVE1MID0gdGV4dDsKICAgICAgICBlbGVtLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRvb2x0aXAsIGVsZW0pOwogICAgICAgIG5ld190b29sdGlwLm5vX2Fycm93ID0gdHJ1ZTsKICAgICAgfQogICAgICBuZXdfdG9vbHRpcC50aXAgPSB0b29sdGlwOwogICAgICBuZXdfdG9vbHRpcC5lbGVtID0gZWxlbTsKICAgICAgdG9vbHRpcHMucHVzaChuZXdfdG9vbHRpcCk7CiAgICAgIHJldHVybiBuZXdfdG9vbHRpcDsKICAgIH07CiAgICB2YXIgcmVzaXplX3Rvb2x0aXAgPSBmdW5jdGlvbih0b29sdGlwKSB7CiAgICAgIHZhciByZWN0ID0gdG9vbHRpcC5lbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgICB2YXIgZG9jID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBzY3JvbGxQb3NpdGlvbiA9IHJlY3QudG9wIC0gKCh3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jLnNjcm9sbFRvcCkgIC0gKGRvYy5jbGllbnRUb3AgfHwgMCkpOwogICAgICBpZiAoc2Nyb2xsUG9zaXRpb24gPCA0MCkgewogICAgICAgIHRvb2x0aXAudGlwLmNsYXNzTmFtZSA9IHRvb2x0aXAudGlwLmNsYXNzTmFtZS5yZXBsYWNlKC8gPyhfYWJvdmV8X2JlbG93KSA/L2csICcnKSArICcgX2JlbG93JzsKICAgICAgfSBlbHNlIHsKICAgICAgICB0b29sdGlwLnRpcC5jbGFzc05hbWUgPSB0b29sdGlwLnRpcC5jbGFzc05hbWUucmVwbGFjZSgvID8oX2Fib3ZlfF9iZWxvdykgPy9nLCAnJykgKyAnIF9hYm92ZSc7CiAgICAgIH0KICAgIH07CiAgICB2YXIgcmVzaXplX3Rvb2x0aXBzID0gZnVuY3Rpb24oKSB7CiAgICAgIGlmIChfcmVtb3ZlZCkgcmV0dXJuOwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvb2x0aXBzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKCF0b29sdGlwc1tpXS5ub19hcnJvdykgcmVzaXplX3Rvb2x0aXAodG9vbHRpcHNbaV0pOwogICAgICB9CiAgICB9OwogICAgdmFyIHZhbGlkYXRlX2ZpZWxkID0gZnVuY3Rpb24oZWxlbSwgcmVtb3ZlKSB7CiAgICAgIHZhciB0b29sdGlwID0gbnVsbCwgdmFsdWUgPSBlbGVtLnZhbHVlLCBub19lcnJvciA9IHRydWU7CiAgICAgIHJlbW92ZSA/IHJlbW92ZV90b29sdGlwKGVsZW0pIDogZmFsc2U7CiAgICAgIGlmIChlbGVtLnR5cGUgIT0gJ2NoZWNrYm94JykgZWxlbS5jbGFzc05hbWUgPSBlbGVtLmNsYXNzTmFtZS5yZXBsYWNlKC8gP19oYXNfZXJyb3IgPy9nLCAnJyk7CiAgICAgIGlmIChlbGVtLmdldEF0dHJpYnV0ZSgncmVxdWlyZWQnKSAhPT0gbnVsbCkgewogICAgICAgIGlmIChlbGVtLnR5cGUgPT0gJ3JhZGlvJyB8fCAoZWxlbS50eXBlID09ICdjaGVja2JveCcgJiYgL2FueS8udGVzdChlbGVtLmNsYXNzTmFtZSkpKSB7CiAgICAgICAgICB2YXIgZWxlbXMgPSBmb3JtX3RvX3N1Ym1pdC5lbGVtZW50c1tlbGVtLm5hbWVdOwogICAgICAgICAgaWYgKCEoZWxlbXMgaW5zdGFuY2VvZiBOb2RlTGlzdCB8fCBlbGVtcyBpbnN0YW5jZW9mIEhUTUxDb2xsZWN0aW9uKSB8fCBlbGVtcy5sZW5ndGggPD0gMSkgewogICAgICAgICAgICBub19lcnJvciA9IGVsZW0uY2hlY2tlZDsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICBub19lcnJvciA9IGZhbHNlOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgaWYgKGVsZW1zW2ldLmNoZWNrZWQpIG5vX2Vycm9yID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKCFub19lcnJvcikgewogICAgICAgICAgICB0b29sdGlwID0gY3JlYXRlX3Rvb2x0aXAoZWxlbSwgIlBsZWFzZSBzZWxlY3QgYW4gb3B0aW9uLiIpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoZWxlbS50eXBlID09J2NoZWNrYm94JykgewogICAgICAgICAgdmFyIGVsZW1zID0gZm9ybV90b19zdWJtaXQuZWxlbWVudHNbZWxlbS5uYW1lXSwgZm91bmQgPSBmYWxzZSwgZXJyID0gW107CiAgICAgICAgICBub19lcnJvciA9IHRydWU7CiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChlbGVtc1tpXS5nZXRBdHRyaWJ1dGUoJ3JlcXVpcmVkJykgPT09IG51bGwpIGNvbnRpbnVlOwogICAgICAgICAgICBpZiAoIWZvdW5kICYmIGVsZW1zW2ldICE9PSBlbGVtKSByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgZm91bmQgPSB0cnVlOwogICAgICAgICAgICBlbGVtc1tpXS5jbGFzc05hbWUgPSBlbGVtc1tpXS5jbGFzc05hbWUucmVwbGFjZSgvID9faGFzX2Vycm9yID8vZywgJycpOwogICAgICAgICAgICBpZiAoIWVsZW1zW2ldLmNoZWNrZWQpIHsKICAgICAgICAgICAgICBub19lcnJvciA9IGZhbHNlOwogICAgICAgICAgICAgIGVsZW1zW2ldLmNsYXNzTmFtZSA9IGVsZW1zW2ldLmNsYXNzTmFtZSArICcgX2hhc19lcnJvcic7CiAgICAgICAgICAgICAgZXJyLnB1c2goIkNoZWNraW5nICVzIGlzIHJlcXVpcmVkIi5yZXBsYWNlKCIlcyIsIGVsZW1zW2ldLnZhbHVlKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmICghbm9fZXJyb3IpIHsKICAgICAgICAgICAgdG9vbHRpcCA9IGNyZWF0ZV90b29sdGlwKGVsZW0sIGVyci5qb2luKCc8YnIvPicpKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKGVsZW0udGFnTmFtZSA9PSAnU0VMRUNUJykgewogICAgICAgICAgdmFyIHNlbGVjdGVkID0gdHJ1ZTsKICAgICAgICAgIGlmIChlbGVtLm11bHRpcGxlKSB7CiAgICAgICAgICAgIHNlbGVjdGVkID0gZmFsc2U7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbS5vcHRpb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgaWYgKGVsZW0ub3B0aW9uc1tpXS5zZWxlY3RlZCkgewogICAgICAgICAgICAgICAgc2VsZWN0ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW0ub3B0aW9ucy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgIGlmIChlbGVtLm9wdGlvbnNbaV0uc2VsZWN0ZWQgJiYgKCFlbGVtLm9wdGlvbnNbaV0udmFsdWUgfHwgKGVsZW0ub3B0aW9uc1tpXS52YWx1ZS5tYXRjaCgvXG4vZykpKSkgewogICAgICAgICAgICAgICAgc2VsZWN0ZWQgPSBmYWxzZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmICghc2VsZWN0ZWQpIHsKICAgICAgICAgICAgZWxlbS5jbGFzc05hbWUgPSBlbGVtLmNsYXNzTmFtZSArICcgX2hhc19lcnJvcic7CiAgICAgICAgICAgIG5vX2Vycm9yID0gZmFsc2U7CiAgICAgICAgICAgIHRvb2x0aXAgPSBjcmVhdGVfdG9vbHRpcChlbGVtLCAiUGxlYXNlIHNlbGVjdCBhbiBvcHRpb24uIik7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSAnJykgewogICAgICAgICAgZWxlbS5jbGFzc05hbWUgPSBlbGVtLmNsYXNzTmFtZSArICcgX2hhc19lcnJvcic7CiAgICAgICAgICBub19lcnJvciA9IGZhbHNlOwogICAgICAgICAgdG9vbHRpcCA9IGNyZWF0ZV90b29sdGlwKGVsZW0sICJDZSBjaGFtcCBlc3QgcmVxdWlzIik7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChub19lcnJvciAmJiAoZWxlbS5pZCA9PSAnZmllbGRbXScgfHwgZWxlbS5pZCA9PSAnY2FbMTFdW3ZdJykpIHsKICAgICAgICBpZiAoZWxlbS5jbGFzc05hbWUuaW5jbHVkZXMoJ3Bob25lLWlucHV0LWVycm9yJykpIHsKICAgICAgICAgIGVsZW0uY2xhc3NOYW1lID0gZWxlbS5jbGFzc05hbWUgKyAnIF9oYXNfZXJyb3InOwogICAgICAgICAgbm9fZXJyb3IgPSBmYWxzZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKG5vX2Vycm9yICYmIGVsZW0ubmFtZSA9PSAnZW1haWwnKSB7CiAgICAgICAgaWYgKCF2YWx1ZS5tYXRjaCgvXltcK19hLXowLTktJyY9XSsoXC5bXCtfYS16MC05LSddKykqQFthLXowLTktXSsoXC5bYS16MC05LV0rKSooXC5bYS16XXsyLH0pJC9pKSkgewogICAgICAgICAgZWxlbS5jbGFzc05hbWUgPSBlbGVtLmNsYXNzTmFtZSArICcgX2hhc19lcnJvcic7CiAgICAgICAgICBub19lcnJvciA9IGZhbHNlOwogICAgICAgICAgdG9vbHRpcCA9IGNyZWF0ZV90b29sdGlwKGVsZW0sICdWZXVpbGxleiBlbnRyZXIgdW4gY291cnJpZWwgdmFsaWRlJyk7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChub19lcnJvciAmJiAvZGF0ZV9maWVsZC8udGVzdChlbGVtLmNsYXNzTmFtZSkpIHsKICAgICAgICBpZiAoIXZhbHVlLm1hdGNoKC9eXGRcZFxkXGQtXGRcZC1cZFxkJC8pKSB7CiAgICAgICAgICBlbGVtLmNsYXNzTmFtZSA9IGVsZW0uY2xhc3NOYW1lICsgJyBfaGFzX2Vycm9yJzsKICAgICAgICAgIG5vX2Vycm9yID0gZmFsc2U7CiAgICAgICAgICB0b29sdGlwID0gY3JlYXRlX3Rvb2x0aXAoZWxlbSwgIkVudGVyIGEgdmFsaWQgZGF0ZS4iKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgdG9vbHRpcCA/IHJlc2l6ZV90b29sdGlwKHRvb2x0aXApIDogZmFsc2U7CiAgICAgIHJldHVybiBub19lcnJvcjsKICAgIH07CiAgICB2YXIgbmVlZHNfdmFsaWRhdGUgPSBmdW5jdGlvbihlbCkgewogICAgICBpZihlbC5nZXRBdHRyaWJ1dGUoJ3JlcXVpcmVkJykgIT09IG51bGwpewogICAgICAgIHJldHVybiB0cnVlCiAgICAgIH0KICAgICAgaWYoZWwubmFtZSA9PT0gJ2VtYWlsJyAmJiBlbC52YWx1ZSAhPT0gIiIpewogICAgICAgIHJldHVybiB0cnVlCiAgICAgIH0KCiAgICAgIGlmKChlbC5pZCA9PSAnZmllbGRbXScgfHwgZWwuaWQgPT0gJ2NhWzExXVt2XScpICYmIGVsLmNsYXNzTmFtZS5pbmNsdWRlcygncGhvbmUtaW5wdXQtZXJyb3InKSl7CiAgICAgICAgcmV0dXJuIHRydWUKICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlCiAgICB9OwogICAgdmFyIHZhbGlkYXRlX2Zvcm0gPSBmdW5jdGlvbihlKSB7CiAgICAgIHZhciBlcnIgPSBmb3JtX3RvX3N1Ym1pdC5xdWVyeVNlbGVjdG9yKCcuX2Zvcm1fZXJyb3InKSwgbm9fZXJyb3IgPSB0cnVlOwogICAgICBpZiAoIXN1Ym1pdHRlZCkgewogICAgICAgIHN1Ym1pdHRlZCA9IHRydWU7CiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFsbElucHV0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogICAgICAgICAgdmFyIGlucHV0ID0gYWxsSW5wdXRzW2ldOwogICAgICAgICAgaWYgKG5lZWRzX3ZhbGlkYXRlKGlucHV0KSkgewogICAgICAgICAgICBpZiAoaW5wdXQudHlwZSA9PSAndGVsJykgewogICAgICAgICAgICAgIGFkZEV2ZW50KGlucHV0LCAnYmx1cicsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUudHJpbSgpOwogICAgICAgICAgICAgICAgdmFsaWRhdGVfZmllbGQodGhpcywgdHJ1ZSk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGlucHV0LnR5cGUgPT0gJ3RleHQnIHx8IGlucHV0LnR5cGUgPT0gJ251bWJlcicgfHwgaW5wdXQudHlwZSA9PSAndGltZScpIHsKICAgICAgICAgICAgICBhZGRFdmVudChpbnB1dCwgJ2JsdXInLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLnRyaW0oKTsKICAgICAgICAgICAgICAgIHZhbGlkYXRlX2ZpZWxkKHRoaXMsIHRydWUpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGFkZEV2ZW50KGlucHV0LCAnaW5wdXQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhbGlkYXRlX2ZpZWxkKHRoaXMsIHRydWUpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0LnR5cGUgPT0gJ3JhZGlvJyB8fCBpbnB1dC50eXBlID09ICdjaGVja2JveCcpIHsKICAgICAgICAgICAgICAoZnVuY3Rpb24oZWwpIHsKICAgICAgICAgICAgICAgIHZhciByYWRpb3MgPSBmb3JtX3RvX3N1Ym1pdC5lbGVtZW50c1tlbC5uYW1lXTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmFkaW9zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgIGFkZEV2ZW50KHJhZGlvc1tpXSwgJ2NsaWNrJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVfZmllbGQoZWwsIHRydWUpOwogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KShpbnB1dCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQudGFnTmFtZSA9PSAnU0VMRUNUJykgewogICAgICAgICAgICAgIGFkZEV2ZW50KGlucHV0LCAnY2hhbmdlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YWxpZGF0ZV9maWVsZCh0aGlzLCB0cnVlKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dC50eXBlID09ICd0ZXh0YXJlYScpewogICAgICAgICAgICAgIGFkZEV2ZW50KGlucHV0LCAnaW5wdXQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhbGlkYXRlX2ZpZWxkKHRoaXMsIHRydWUpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHJlbW92ZV90b29sdGlwcygpOwogICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYWxsSW5wdXRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgdmFyIGVsZW0gPSBhbGxJbnB1dHNbaV07CiAgICAgICAgaWYgKG5lZWRzX3ZhbGlkYXRlKGVsZW0pKSB7CiAgICAgICAgICBpZiAoZWxlbS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICJzZWxlY3QiKSB7CiAgICAgICAgICAgIGVsZW0udmFsdWUgPSBlbGVtLnZhbHVlLnRyaW0oKTsKICAgICAgICAgIH0KICAgICAgICAgIHZhbGlkYXRlX2ZpZWxkKGVsZW0pID8gdHJ1ZSA6IG5vX2Vycm9yID0gZmFsc2U7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmICghbm9fZXJyb3IgJiYgZSkgewogICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgfQogICAgICByZXNpemVfdG9vbHRpcHMoKTsKICAgICAgcmV0dXJuIG5vX2Vycm9yOwogICAgfTsKICAgIGFkZEV2ZW50KHdpbmRvdywgJ3Jlc2l6ZScsIHJlc2l6ZV90b29sdGlwcyk7CiAgICBhZGRFdmVudCh3aW5kb3csICdzY3JvbGwnLCByZXNpemVfdG9vbHRpcHMpOwoKICAgIHZhciBoaWRlUGhvbmVJbnB1dEVycm9yID0gZnVuY3Rpb24oaW5wdXRJZCkgewogICAgICB2YXIgZXJyb3JNZXNzYWdlID0gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJlcnJvci1tc2ctIiArIGlucHV0SWQpOwogICAgICB2YXIgaW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpbnB1dElkKTsKICAgICAgZXJyb3JNZXNzYWdlLmNsYXNzTGlzdC5yZW1vdmUoInBob25lLWVycm9yIik7CiAgICAgIGVycm9yTWVzc2FnZS5jbGFzc0xpc3QuYWRkKCJwaG9uZS1lcnJvci1oaWRkZW4iKTsKICAgICAgaW5wdXQuY2xhc3NMaXN0LnJlbW92ZSgicGhvbmUtaW5wdXQtZXJyb3IiKTsKICAgIH07CgogICAgdmFyIGluaXRpYWxpemVQaG9uZUlucHV0ID0gZnVuY3Rpb24oaW5wdXQsIGRlZmF1bHRDb3VudHJ5KSB7CiAgICAgIHJldHVybiB3aW5kb3cuaW50bFRlbElucHV0KGlucHV0LCB7CiAgICAgICAgdXRpbHNTY3JpcHQ6ICJodHRwczovL3VucGtnLmNvbS9pbnRsLXRlbC1pbnB1dEAxNy4wLjE4L2J1aWxkL2pzL3V0aWxzLmpzIiwKICAgICAgICBhdXRvSGlkZURpYWxDb2RlOiBmYWxzZSwKICAgICAgICBzZXBhcmF0ZURpYWxDb2RlOiB0cnVlLAogICAgICAgIGluaXRpYWxDb3VudHJ5OiBkZWZhdWx0Q291bnRyeSwKICAgICAgICBwcmVmZXJyZWRDb3VudHJpZXM6IFtdCiAgICAgIH0pOwogICAgfQoKICAgIHZhciBzZXRQaG9uZUlucHV0RXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbihpbnB1dElkLCBpbnB1dCwgaXRpKSB7CiAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImVycm9yLW1zZy0iICsgaW5wdXRJZCk7CiAgICAgICAgaWYgKGlucHV0LnZhbHVlLnRyaW0oKSkgewogICAgICAgICAgaWYgKGl0aS5pc1ZhbGlkTnVtYmVyKCkpIHsKICAgICAgICAgICAgaXRpLnNldE51bWJlcihpdGkuZ2V0TnVtYmVyKCkpOwogICAgICAgICAgICBpZiAoZXJyb3JNZXNzYWdlLmNsYXNzTGlzdC5jb250YWlucygicGhvbmUtZXJyb3IiKSl7CiAgICAgICAgICAgICAgaGlkZVBob25lSW5wdXRFcnJvcihpbnB1dElkKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc2hvd1Bob25lSW5wdXRFcnJvcihpbnB1dElkKQogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAoZXJyb3JNZXNzYWdlLmNsYXNzTGlzdC5jb250YWlucygicGhvbmUtZXJyb3IiKSl7CiAgICAgICAgICAgIGhpZGVQaG9uZUlucHV0RXJyb3IoaW5wdXRJZCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoImNvdW50cnljaGFuZ2UiLCBmdW5jdGlvbigpIHsKICAgICAgICBpdGkuc2V0TnVtYmVyKCcnKTsKICAgICAgfSk7CgogICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCJrZXlkb3duIiwgZnVuY3Rpb24oZSkgewogICAgICAgIHZhciBjaGFyQ29kZSA9IChlLndoaWNoKSA/IGUud2hpY2ggOiBlLmtleUNvZGU7CiAgICAgICAgaWYgKGNoYXJDb2RlID4gMzEgJiYgKGNoYXJDb2RlIDwgNDggfHwgY2hhckNvZGUgPiA1NykgJiYgY2hhckNvZGUgIT09IDgpIHsKICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfTsKCiAgICB2YXIgc2hvd1Bob25lSW5wdXRFcnJvciA9IGZ1bmN0aW9uKGlucHV0SWQpIHsKICAgICAgdmFyIGVycm9yTWVzc2FnZSA9ICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZXJyb3ItbXNnLSIgKyBpbnB1dElkKTsKICAgICAgdmFyIGlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5wdXRJZCk7CiAgICAgIGVycm9yTWVzc2FnZS5jbGFzc0xpc3QuYWRkKCJwaG9uZS1lcnJvciIpOwogICAgICBlcnJvck1lc3NhZ2UuY2xhc3NMaXN0LnJlbW92ZSgicGhvbmUtZXJyb3ItaGlkZGVuIik7CiAgICAgIGlucHV0LmNsYXNzTGlzdC5hZGQoInBob25lLWlucHV0LWVycm9yIik7CiAgICB9OwoKCiAgICB2YXIgX2Zvcm1fc2VyaWFsaXplID0gZnVuY3Rpb24oZm9ybSl7aWYoIWZvcm18fGZvcm0ubm9kZU5hbWUhPT0iRk9STSIpe3JldHVybiB9dmFyIGksaixxPVtdO2ZvcihpPTA7aTxmb3JtLmVsZW1lbnRzLmxlbmd0aDtpKyspe2lmKGZvcm0uZWxlbWVudHNbaV0ubmFtZT09PSIiKXtjb250aW51ZX1zd2l0Y2goZm9ybS5lbGVtZW50c1tpXS5ub2RlTmFtZSl7Y2FzZSJJTlBVVCI6c3dpdGNoKGZvcm0uZWxlbWVudHNbaV0udHlwZSl7Y2FzZSJ0ZWwiOnEucHVzaChmb3JtLmVsZW1lbnRzW2ldLm5hbWUrIj0iK2VuY29kZVVSSUNvbXBvbmVudChmb3JtLmVsZW1lbnRzW2ldLnByZXZpb3VzU2libGluZy5xdWVyeVNlbGVjdG9yKCdkaXYuaXRpX19zZWxlY3RlZC1kaWFsLWNvZGUnKS5pbm5lclRleHQpK2VuY29kZVVSSUNvbXBvbmVudCgiICIpK2VuY29kZVVSSUNvbXBvbmVudChmb3JtLmVsZW1lbnRzW2ldLnZhbHVlKSk7YnJlYWs7Y2FzZSJ0ZXh0IjpjYXNlIm51bWJlciI6Y2FzZSJkYXRlIjpjYXNlInRpbWUiOmNhc2UiaGlkZGVuIjpjYXNlInBhc3N3b3JkIjpjYXNlImJ1dHRvbiI6Y2FzZSJyZXNldCI6Y2FzZSJzdWJtaXQiOnEucHVzaChmb3JtLmVsZW1lbnRzW2ldLm5hbWUrIj0iK2VuY29kZVVSSUNvbXBvbmVudChmb3JtLmVsZW1lbnRzW2ldLnZhbHVlKSk7YnJlYWs7Y2FzZSJjaGVja2JveCI6Y2FzZSJyYWRpbyI6aWYoZm9ybS5lbGVtZW50c1tpXS5jaGVja2VkKXtxLnB1c2goZm9ybS5lbGVtZW50c1tpXS5uYW1lKyI9IitlbmNvZGVVUklDb21wb25lbnQoZm9ybS5lbGVtZW50c1tpXS52YWx1ZSkpfWJyZWFrO2Nhc2UiZmlsZSI6YnJlYWt9YnJlYWs7Y2FzZSJURVhUQVJFQSI6cS5wdXNoKGZvcm0uZWxlbWVudHNbaV0ubmFtZSsiPSIrZW5jb2RlVVJJQ29tcG9uZW50KGZvcm0uZWxlbWVudHNbaV0udmFsdWUpKTticmVhaztjYXNlIlNFTEVDVCI6c3dpdGNoKGZvcm0uZWxlbWVudHNbaV0udHlwZSl7Y2FzZSJzZWxlY3Qtb25lIjpxLnB1c2goZm9ybS5lbGVtZW50c1tpXS5uYW1lKyI9IitlbmNvZGVVUklDb21wb25lbnQoZm9ybS5lbGVtZW50c1tpXS52YWx1ZSkpO2JyZWFrO2Nhc2Uic2VsZWN0LW11bHRpcGxlIjpmb3Ioaj0wO2o8Zm9ybS5lbGVtZW50c1tpXS5vcHRpb25zLmxlbmd0aDtqKyspe2lmKGZvcm0uZWxlbWVudHNbaV0ub3B0aW9uc1tqXS5zZWxlY3RlZCl7cS5wdXNoKGZvcm0uZWxlbWVudHNbaV0ubmFtZSsiPSIrZW5jb2RlVVJJQ29tcG9uZW50KGZvcm0uZWxlbWVudHNbaV0ub3B0aW9uc1tqXS52YWx1ZSkpfX1icmVha31icmVhaztjYXNlIkJVVFRPTiI6c3dpdGNoKGZvcm0uZWxlbWVudHNbaV0udHlwZSl7Y2FzZSJyZXNldCI6Y2FzZSJzdWJtaXQiOmNhc2UiYnV0dG9uIjpxLnB1c2goZm9ybS5lbGVtZW50c1tpXS5uYW1lKyI9IitlbmNvZGVVUklDb21wb25lbnQoZm9ybS5lbGVtZW50c1tpXS52YWx1ZSkpO2JyZWFrfWJyZWFrfX1yZXR1cm4gcS5qb2luKCImIil9OwogICAgdmFyIGZvcm1fc3VibWl0ID0gZnVuY3Rpb24oZSkgewogICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgIGlmICh2YWxpZGF0ZV9mb3JtKCkpIHsKICAgICAgICAvLyB1c2UgdGhpcyB0cmljayB0byBnZXQgdGhlIHN1Ym1pdCBidXR0b24gJiBkaXNhYmxlIGl0IHVzaW5nIHBsYWluIGphdmFzY3JpcHQKICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjX2Zvcm1fMjNfc3VibWl0JykuZGlzYWJsZWQgPSB0cnVlOwogICAgICAgIHZhciBzZXJpYWxpemVkID0gX2Zvcm1fc2VyaWFsaXplKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdfZm9ybV8yM18nKSkucmVwbGFjZSgvJTBBL2csICdcXG4nKTsKICAgICAgICB2YXIgZXJyID0gZm9ybV90b19zdWJtaXQucXVlcnlTZWxlY3RvcignLl9mb3JtX2Vycm9yJyk7CiAgICAgICAgZXJyID8gZXJyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZXJyKSA6IGZhbHNlOwogICAgICAgIF9sb2FkX3NjcmlwdCgnaHR0cHM6Ly9pc28yNzIuYWN0aXZlaG9zdGVkLmNvbS9wcm9jLnBocD8nICsgc2VyaWFsaXplZCArICcmanNvbnA9dHJ1ZScpOwogICAgICB9CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH07CiAgICBhZGRFdmVudChmb3JtX3RvX3N1Ym1pdCwgJ3N1Ym1pdCcsIGZvcm1fc3VibWl0KTsKICB9KSgpOwoKPC9zY3JpcHQ+PHAgY2xhc3M9InRleHQteHMiPlBvdXIgc2F2b2lyIGNvbW1lbnQgdm9zIGRvbm4mZWFjdXRlO2VzIHNlcm9udCB1dGlsaXMmZWFjdXRlO2VzLCB2ZXVpbGxleiBjb25zdWx0ZXIgbm90cmUgPGEgaHJlZj0iL2ZyL2NvbmZpZGVudGlhbGl0ZSIgdGl0bGU9IklTTyBwcml2YWN5IG5vdGljZSI+YXZpcyBkZSBjb25maWRlbnRpYWxpdCZlYWN1dGU7PC9hPi48L3A+PC9kaXY+PC9kaXY+PC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLXNvY2lhbCBjbGVhcmZpeCI+CiAgICAgICAgICA8dWwgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvT3JnYW5pemF0aW9uIj4KICAgICAgICAgICAgPGxpbmsgaXRlbXByb3A9InVybCIgaHJlZj0iaHR0cHM6Ly93d3cuaXNvLm9yZy8iPgogICAgICAgICAgICA8bGk+PGEgaXRlbXByb3A9InNhbWVBcyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIGhyZWY9Imh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9jb21wYW55L2lzb3N0YW5kYXJkcyIgdGl0bGU9IkxpbmtlZGluIj48aSBjbGFzcz0iYmktbGlua2VkaW4iPjwvaT48L2E+PC9saT4KICAgICAgICAgICAgPGxpPjxhIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL2lzb3N0YW5kYXJkcyIgdGl0bGU9IlR3aXR0ZXIiPjxpIGNsYXNzPSJiaS10d2l0dGVyIj48L2k+PC9hPjwvbGk+CiAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2lzb3N0YW5kYXJkcyIgdGl0bGU9IkZhY2Vib29rIj48aSBjbGFzcz0iYmktZmFjZWJvb2siPjwvaT48L2E+PC9saT4KICAgICAgICAgICAgPGxpPjxhIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiBocmVmPSJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2lzb3N0YW5kYXJkcyIgdGl0bGU9Ikluc3RhZ3JhbSI+PGkgY2xhc3M9ImJpLWluc3RhZ3JhbSI+PC9pPjwvYT48L2xpPgogICAgICAgICAgICA8bGk+PGEgaXRlbXByb3A9InNhbWVBcyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL0lTTyIgdGl0bGU9IllvdVR1YmUiPjxpIGNsYXNzPSJiaS15b3V0dWJlIj48L2k+PC9hPjwvbGk+CiAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgaHJlZj0iaHR0cHM6Ly93d3cuZmxpY2tyLmNvbS9waG90b3MvaXNvc3RhbmRhcmRzIiB0aXRsZT0iRmxpY2tyIj48aSBjbGFzcz0iYmktZmxpY2tyIj48L2k+PC9hPjwvbGk+CiAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgICAgIDxwIGNsYXNzPSJkaXNwbGF5LTUgb3BhY2l0eS0xMDAiPlJlbmRyZSBsYSB2aWUgcGx1cyA8c3Ryb25nPjxlbT5mYWNpbGU8L2VtPjwvc3Ryb25nPiwgcGx1cyA8c3Ryb25nPjxlbT5zw7tyZTwvZW0+PC9zdHJvbmc+IGV0IDxzdHJvbmc+PGVtPm1laWxsZXVyZTwvZW0+PC9zdHJvbmc+LjwvcD4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTggY29sLW1kLW9mZnNldC0yIHB1bGwtbGVmdCI+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LXhzIj5Ob3VzIG5vdXMgZW5nYWdlb25zIMOgIGNlIHF1ZSBub3RyZSBzaXRlIFdlYiBzb2l0IGFjY2Vzc2libGUgw6AgdG91cy4gUG91ciB0b3V0ZSBxdWVzdGlvbiBvdSBzdWdnZXN0aW9uIGNvbmNlcm5hbnQgbCdhY2Nlc3NpYmlsaXTDqSBkdSBzaXRlLCA8YSBocmVmPSJtYWlsdG86d2VibWFzdGVyQGlzby5vcmc/c3ViamVjdD1BY2Nlc3NpYmlsaXR5IiBzdHlsZT0id2hpdGUtc3BhY2U6IG5vd3JhcCI+Y29udGFjdGV6LW5vdXM8L2E+LjwvcD4KICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtc20iPjxhIGhyZWY9IiNjb3B5cmlnaHQiIHRhcmdldD0iX3NlbGYiIGRhdGEtYnMtdG9nZ2xlPSJjb2xsYXBzZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtY29udHJvbHM9ImNvcHlyaWdodCI+wqkgVG91cyBkcm9pdHMgcsOpc2VydsOpczwvYT4gPHNwYW4gaWQ9ImNvcHlyaWdodCIgY2xhc3M9ImNvbGxhcHNlIj5MZSBtYXTDqXJpZWwgcHVibGnDqSBzdXIgSVNPLm9yZyBlc3Qgc3VqZXQgYXV4IG3Dqm1lcyBjb25kaXRpb25zIGVuIG1hdGnDqHJlIGRlIGRyb2l0cyBk4oCZYXV0ZXVyIHF1ZSBsZXMgcHVibGljYXRpb25zIGRlIGzigJlJU08gZXQgc29uIGVtcGxvaSBlc3QgY29uZGl0aW9ubsOpIHBhciBs4oCZYWNjZXB0YXRpb24sIHBhciBs4oCZdXRpbGlzYXRldXIsIGRlcyBjb25kaXRpb25zIGRlIGzigJlJU08gZW4gbWF0acOocmUgZGUgZHJvaXRzIGTigJlhdXRldXIgcsOpZ2lzc2FudCBsZXMgcHVibGljYXRpb25zIGRlIGzigJlJU08uIFRvdXRlIHV0aWxpc2F0aW9uIGR1IG1hdMOpcmllbCBjb25jZXJuw6ksIHkgY29tcHJpcyBzYSByZXByb2R1Y3Rpb24gaW50w6lncmFsZSBvdSBwYXJ0aWVsbGUgdmVycyB1biBhdXRyZSBzaXRlIEludGVybmV0LCByZXF1aWVydCBs4oCZYXV0b3Jpc2F0aW9uIMOpY3JpdGUgZGUgbOKAmUlTTy4gVG91dGUgZGVtYW5kZSDDoCBjZXQgZWZmZXQgZG9pdCDDqnRyZSBhZHJlc3PDqWUgw6AgPGEgaHJlZj0ibWFpbHRvOmNvcHlyaWdodEBpc28ub3JnIj5jb3B5cmlnaHRAaXNvLm9yZzwvYT4uPC9zcGFuPjwvcD4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0idG9wYmFyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJ0b3BiYXItY29udGVudCI+CiAgICAgICAgICA8YSBjbGFzcz0ibG9nbyBpc29sb2dvIGxvZ28teHMgdGhlbWUtcmVkIHBvd2VyZWRieSBwYWdlLXNjcm9sbCBsb2dvLXNjcm9sbFRvcCIgaHJlZj0iI3BhZ2UtdG9wIiB0aXRsZT0iUmV0b3VyIGVuIGhhdXQgZGUgcGFnZSI+PC9hPgogICAgICAgICAgPGRpdiBjbGFzcz0icG93ZXJlZGJ5LXR4dCI+RMOpdmVsb3Bww6kgcGFyPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9mb290ZXI+CiAgICA8L2JvZHk+CjwvaHRtbD4=
  recorded_at: Thu, 19 Oct 2023 12:33:12 GMT
- request:
    method: get
    uri: https://www.iso.org/fr/standard/23281.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=6EDFF162BE3215DA745B37F0895F181B; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Thu, 19 Oct 2023 12:33:11 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 19 Oct 2023 12:33:12 GMT
recorded_with: VCR 6.1.0
