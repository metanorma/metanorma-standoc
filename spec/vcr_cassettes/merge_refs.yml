---
http_interactions:
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-rfcs/main/data/RFC8341.yaml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '2646'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"1d84bbdda030b7ed1a10ab705daa07c954e3bd34653ec309a0f33a10c8a14684"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 1F36:2983FA:37F00F:42B9F2:65C0AB0E
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 05 Feb 2024 09:31:59 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-mel11225-MEL
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1707125519.238461,VS0,VE2
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 81b6cb8e74f356c43c1ae77409e14f191d7dfa45
      Expires:
      - Mon, 05 Feb 2024 09:36:59 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: "---\nschema-version: v1.2.8\nid: RFC8341\ntitle:\n- content: Network
        Configuration Access Control Model\n  format: text/plain\n  type: main\nlink:\n-
        content: https://www.rfc-editor.org/info/rfc8341\n  type: src\ntype: standard\ndocid:\n-
        id: RFC 8341\n  type: IETF\n  primary: true\n- id: 10.17487/RFC8341\n  type:
        DOI\ndocnumber: RFC8341\ndate:\n- type: published\n  value: 2018-03\ncontributor:\n-
        person:\n    name:\n      given:\n        forename:\n        - content: \n
        \         language:\n          - en\n          script:\n          - Latn\n
        \         initial: A\n        formatted_initials:\n          content: A.\n
        \         language:\n          - en\n          script:\n          - Latn\n
        \     surname:\n        content: Bierman\n        language:\n        - en\n
        \       script:\n        - Latn\n      completename:\n        content: A.
        Bierman\n        language:\n        - en\n        script:\n        - Latn\n
        \ role:\n  - type: author\n- person:\n    name:\n      given:\n        forename:\n
        \       - content: \n          language:\n          - en\n          script:\n
        \         - Latn\n          initial: M\n        formatted_initials:\n          content:
        M.\n          language:\n          - en\n          script:\n          - Latn\n
        \     surname:\n        content: Bjorklund\n        language:\n        - en\n
        \       script:\n        - Latn\n      completename:\n        content: M.
        Bjorklund\n        language:\n        - en\n        script:\n        - Latn\n
        \ role:\n  - type: author\n- organization:\n    name:\n    - content: RFC
        Publisher\n  role:\n  - type: publisher\n- organization:\n    name:\n    -
        content: RFC Series\n  role:\n  - type: authorizer\nrevdate: 2018-03\nlanguage:\n-
        en\nscript:\n- Latn\nabstract:\n- content: \"<p>The standardization of network
        configuration interfaces for use with\n    the Network Configuration Protocol
        (NETCONF) or the RESTCONF protocol requires\n    a structured and secure operating
        environment that promotes human usability and\n    multi-vendor interoperability.
        There is a need for standard mechanisms to restrict\n    NETCONF or RESTCONF
        protocol access for particular users to a preconfigured subset\n    of all
        available NETCONF or RESTCONF protocol operations and content. This document\n
        \   defines such an access control model.</p><p>This document obsoletes RFC
        6536.</p>\"\n  language:\n  - en\n  script:\n  - Latn\n  format: text/html\nseries:\n-
        title:\n    content: STD\n    format: text/plain\n  number: '91'\n- title:\n
        \   content: RFC\n    format: text/plain\n  number: '8341'\n- type: stream\n
        \ title:\n    content: IETF\n    format: text/plain\nkeyword:\n- content:
        NETCONF RESTCONF\n- content: YANG\n- content: XML\neditorialgroup:\n- name:
        netconf\next:\n  schema-version: v1.0.1\n  stream: IETF\n"
  recorded_at: Mon, 05 Feb 2024 09:31:59 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 125","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.4), Ruby (3.2.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 05 Feb 2024 09:32:00 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '3'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 05 Feb 2024 09:32:00 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/07/28/72849.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=C01ED9B95B4CBB7723EA377BDB4F93C6; Path=/; Secure; HttpOnly
      Location:
      - "/standard/72849.html"
      Content-Length:
      - '0'
      Date:
      - Mon, 05 Feb 2024 09:32:06 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Mon, 05 Feb 2024 09:32:06 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/72849.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=3B25EA5C463D004B2C3FE1DC64A1FBC5; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Mon, 05 Feb 2024 22:32:07 NZDT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 05 Feb 2024 09:32:08 GMT
recorded_with: VCR 6.1.0
