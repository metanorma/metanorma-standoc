---
http_interactions:
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 123","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.2.5), Ruby (3.1.3)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 27 Mar 2023 09:50:14 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '3'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJoaXRzIjpbeyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMi8zMi8yMzI4MSIsInV1aWQiOiIwNDcyM2VhOS04NDdhLTRiMmItYTMyYi0wZDhmN2Q3NjkwM2IiLCJ0aXRsZSI6IklTTyAxMjM6MjAwMSBSdWJiZXIgbGF0ZXgg4oCUIFNhbXBsaW5nIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMSwib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIHNwZWNpZmllcyBwcm9jZWR1cmVzIGZvciBzYW1wbGluZyBuYXR1cmFsIHJ1YmJlciBsYXRleCBjb25jZW50cmF0ZSBhbmQgZm9yIHNhbXBsaW5nIHN5bnRoZXRpYyBydWJiZXIgbGF0aWNlcyBhbmQgYXJ0aWZpY2lhbCBsYXRpY2VzLiBJdCBpcyBhbHNvIHN1aXRhYmxlIGZvciBzYW1wbGluZyBydWJiZXIgbGF0ZXggY29udGFpbmVkIGluIGRydW1zLCB0YW5rIGNhcnMgb3IgdGFua3MuIFRoZSBwcm9jZWR1cmVzIG1heSBhbHNvIGJlIHVzZWQgZm9yIHNhbXBsaW5nIHBsYXN0aWNzIGRpc3BlcnNpb25zLiAiLCJvYmplY3RJRCI6IjIzMjgxXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjoyMDAxIFJ1YmJlciBsYXRleCDigJQgU2FtcGxpbmciLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIHNwZWNpZmllcyBwcm9jZWR1cmVzIGZvciBzYW1wbGluZyBuYXR1cmFsIHJ1YmJlciBsYXRleCBjb25jZW50cmF0ZSBhbmQgZm9yIHNhbXBsaW5nIHN5bnRoZXRpYyBydWJiZXIgbGF0aWNlcyBhbmQgYXJ0aWZpY2lhbCBsYXRpY2VzLiBJdCBpcyBhbHNvIHN1aXRhYmxlIGZvciBzYW1wbGluZyBydWJiZXIgbGF0ZXggY29udGFpbmVkIGluIGRydW1zLCB0YW5rIGNhcnMgb3IgdGFua3MuIFRoZSBwcm9jZWR1cmVzIG1heSBhbHNvIGJlIHVzZWQgZm9yIHNhbXBsaW5nIHBsYXN0aWNzIGRpc3BlcnNpb25zLiAiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMC8zOS8zOTI2IiwidXVpZCI6IjMxNWE5YTAyLWVkZDgtNDkxOS05ZmMxLTJkYmFlYTgyYjI0ZCIsInRpdGxlIjoiSVNPIDEyMzoxOTg1IFJ1YmJlciBsYXRleCDigJQgU2FtcGxpbmciLCJzdGF0dXMiOiJXaXRoZHJhd24iLCJ5ZWFyIjoyMDAxLCJvcmRlciI6MTAwLCJvYmplY3RJRCI6IjM5MjZfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+OjE5ODUgUnViYmVyIGxhdGV4IOKAlCBTYW1wbGluZyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzAwLzM5LzM5MjUiLCJ1dWlkIjoiNzM4Y2Y4ZjItNjE4MS00ZGNkLWEwNzktZGI2OWVlMDUxODIxIiwidGl0bGUiOiJJU08gMTIzOjE5NzQgUnViYmVyIGxhdGV4IOKAlCBTYW1wbGluZyIsInN0YXR1cyI6IldpdGhkcmF3biIsInllYXIiOjE5ODUsIm9yZGVyIjoxMDAsIm9iamVjdElEIjoiMzkyNV8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT46MTk3NCBSdWJiZXIgbGF0ZXgg4oCUIFNhbXBsaW5nIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDMvMDUvMzA1NzEiLCJ1dWlkIjoiYWY2M2MzZDQtNTE3Mi00OTk3LTgzODgtZTg1MDY5YzFjOWQ2IiwidGl0bGUiOiJJU08gMTIzNjg6MjAwMSBBZ3JpY3VsdHVyYWwgdmVoaWNsZXMg4oCUIE1lY2hhbmljYWwgaG9vay10eXBlIGNvbm5lY3Rpb25zIG9uIHRvd2luZyB2ZWhpY2xlcyDigJQgVGVzdCBtZXRob2RzIGFuZCByZXF1aXJlbWVudHMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIzLCJvcmRlciI6MTEsInRleHQiOiJUaGlzIEludGVybmF0aW9uYWwgU3RhbmRhcmQgc3BlY2lmaWVzIGEgZHluYW1pYyB0ZXN0IG1ldGhvZCBmb3IgbWVjaGFuaWNhbCBob29rLXR5cGUgY29ubmVjdGlvbnMgYW5kIGhvb2sgY291cGxpbmcgZGV2aWNlcywgYXMgd2VsbCBhcyBhIHN0YXRpYyB0ZXN0IG9mIHRoZWlyIGtlZXBlciBwbGF0ZXMuIEl0IGlzIGFwcGxpY2FibGUgdG8gaG9va3MgbWVldGluZyB0aGUgcmVxdWlyZW1lbnRzIG9mIElTTyA2NDg5LTEgdXNlZCBvbiB0b3dpbmcgdmVoaWNsZXMgd2l0aCBhbiB1bmxhZGVuIG1hc3Mgb2YgdXAgdG8gMTAgdC4gVG93aW5nIHZlaGljbGVzIHdpdGggYSBncmVhdGVyIHVubGFkZW4gbWFzcyBhcmUgbmV2ZXJ0aGVsZXNzIHRyZWF0ZWQgYXMgMTAgdCB0b3dpbmcgdmVoaWNsZXMsIGVzcGVjaWFsbHkgd2l0aCByZWdhcmQgdG8gdGhlaXIgcmVmZXJlbmNlIG1hc3MuICIsIm9iamVjdElEIjoiMzA1NzFfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+Njg6MjAwMSBBZ3JpY3VsdHVyYWwgdmVoaWNsZXMg4oCUIE1lY2hhbmljYWwgaG9vay10eXBlIGNvbm5lY3Rpb25zIG9uIHRvd2luZyB2ZWhpY2xlcyDigJQgVGVzdCBtZXRob2RzIGFuZCByZXF1aXJlbWVudHMiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIHNwZWNpZmllcyBhIGR5bmFtaWMgdGVzdCBtZXRob2QgZm9yIG1lY2hhbmljYWwgaG9vay10eXBlIGNvbm5lY3Rpb25zIGFuZCBob29rIGNvdXBsaW5nIGRldmljZXMsIGFzIHdlbGwgYXMgYSBzdGF0aWMgdGVzdCBvZiB0aGVpciBrZWVwZXIgcGxhdGVzLiBJdCBpcyBhcHBsaWNhYmxlIHRvIGhvb2tzIG1lZXRpbmcgdGhlIHJlcXVpcmVtZW50cyBvZiA8ZW0+SVNPPC9lbT4gNjQ4OS0xIHVzZWQgb24gdG93aW5nIHZlaGljbGVzIHdpdGggYW4gdW5sYWRlbiBtYXNzIG9mIHVwIHRvIDEwIHQuIFRvd2luZyB2ZWhpY2xlcyB3aXRoIGEgZ3JlYXRlciB1bmxhZGVuIG1hc3MgYXJlIG5ldmVydGhlbGVzcyB0cmVhdGVkIGFzIDEwIHQgdG93aW5nIHZlaGljbGVzLCBlc3BlY2lhbGx5IHdpdGggcmVnYXJkIHRvIHRoZWlyIHJlZmVyZW5jZSBtYXNzLiAiLCJtYXRjaExldmVsIjoicGFydGlhbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMi8wMC8yMDAwMCIsInV1aWQiOiI1YWQ2NWNmZC1kNDA5LTQ3MmUtYWE0OC1iOTA4Y2FkMGZlODciLCJ0aXRsZSI6IklTTyAxMjM0OjE5OTcgU3BsaXQgcGlucyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjMsIm9yZGVyIjoxMSwib2JqZWN0SUQiOiIyMDAwMF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT40OjE5OTcgU3BsaXQgcGlucyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzAwLzE2LzE2ODAiLCJ1dWlkIjoiNTM3MWM2NTUtYzNmMC00YjkwLWFkNWYtZTAxZWVmMzZlNjNhIiwidGl0bGUiOiJJU08gMTIzNjQ6MjAwMSBUd28td2hlZWxlZCBtb3RvcmN5Y2xlcyDigJQgQW50aWxvY2sgYnJha2luZyBzeXN0ZW1zIChBQlMpIOKAlCBUZXN0cyBhbmQgbWVhc3VyZW1lbnQgbWV0aG9kcyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjMsIm9yZGVyIjoxMSwidGV4dCI6IlRoaXMgSW50ZXJuYXRpb25hbCBTdGFuZGFyZCBzcGVjaWZpZXMgdGVzdHMgYW5kIG1lYXN1cmVtZW50IG1ldGhvZHMgZm9yIHNvbG8gbW90b3JjeWNsZXMgKGRlZmluZWQgaW4gSVNPIDM4MzMpIGVxdWlwcGVkIHdpdGggb25lIG9yIG1vcmUgYW50aWxvY2ssIGFuZCBvbmUgb3IgbW9yZSBpbmRlcGVuZGVudCwgYnJha2luZyBzeXN0ZW1zLiBJdCBzZXRzIG91dCBwcm9jZWR1cmVzIGZvciB0aGUgZm9sbG93aW5nIHR5cGVzIG9mIHN0cmFpZ2h0LWxpbmUgYnJha2luZyB0ZXN0czogdXRpbGl6YXRpb24tb2YtYWRoZXNpb24gdGVzdDsgd2hlZWwtbG9jayBjaGVjayB0ZXN0OyB0ZXN0cyB3aXRoIEFCUyBmYWlsZWQ7IGNvbXBsZW1lbnRhcnkgdGVzdHMgdGhhdCBjb3VsZCBhc3Npc3QgaW4gdGhlIGFzc2Vzc21lbnQgYW5kIGRldmVsb3BtZW50IG9mIGJyYWtpbmcgc3lzdGVtcy4gIiwib2JqZWN0SUQiOiIxNjgwXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjY0OjIwMDEgVHdvLXdoZWVsZWQgbW90b3JjeWNsZXMg4oCUIEFudGlsb2NrIGJyYWtpbmcgc3lzdGVtcyAoQUJTKSDigJQgVGVzdHMgYW5kIG1lYXN1cmVtZW50IG1ldGhvZHMiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIHNwZWNpZmllcyB0ZXN0cyBhbmQgbWVhc3VyZW1lbnQgbWV0aG9kcyBmb3Igc29sbyBtb3RvcmN5Y2xlcyAoZGVmaW5lZCBpbiA8ZW0+SVNPPC9lbT4gMzgzMykgZXF1aXBwZWQgd2l0aCBvbmUgb3IgbW9yZSBhbnRpbG9jaywgYW5kIG9uZSBvciBtb3JlIGluZGVwZW5kZW50LCBicmFraW5nIHN5c3RlbXMuIEl0IHNldHMgb3V0IHByb2NlZHVyZXMgZm9yIHRoZSBmb2xsb3dpbmcgdHlwZXMgb2Ygc3RyYWlnaHQtbGluZSBicmFraW5nIHRlc3RzOiB1dGlsaXphdGlvbi1vZi1hZGhlc2lvbiB0ZXN0OyB3aGVlbC1sb2NrIGNoZWNrIHRlc3Q7IHRlc3RzIHdpdGggQUJTIGZhaWxlZDsgY29tcGxlbWVudGFyeSB0ZXN0cyB0aGF0IGNvdWxkIGFzc2lzdCBpbiB0aGUgYXNzZXNzbWVudCBhbmQgZGV2ZWxvcG1lbnQgb2YgYnJha2luZyBzeXN0ZW1zLiAiLCJtYXRjaExldmVsIjoicGFydGlhbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNy83My83NzMyMSIsInV1aWQiOiJjMzhlN2M4OS1iZWViLTRmNTMtODlhMy1jZDE1MTkwYzhmODUiLCJ0aXRsZSI6IklTTyAxMjMxMi0xOjIwMjIgRXllIGFuZCBmYWNlIHByb3RlY3Rpb24g4oCUIFN1bmdsYXNzZXMgYW5kIHJlbGF0ZWQgZXlld2VhciDigJQgUGFydCAxOiBTdW5nbGFzc2VzIGZvciBnZW5lcmFsIHVzZSIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjIsIm9yZGVyIjoxMSwidGV4dCI6IlRoaXMgZG9jdW1lbnQgaXMgYXBwbGljYWJsZSB0byBhbGwgYWZvY2FsIChwbGFubyBwb3dlcikgc3VuZ2xhc3NlcyBhbmQgY2xpcC1vbnMgZm9yIGdlbmVyYWwgdXNlLCBpbmNsdWRpbmcgcm9hZCB1c2UgYW5kIGRyaXZpbmcsIGludGVuZGVkIGZvciBwcm90ZWN0aW9uIGFnYWluc3Qgc29sYXIgcmFkaWF0aW9uLiBJbmZvcm1hdGlvbiBvbiB0aGUgdXNlIG9mIHN1bmdsYXNzIGZpbHRlcnMgaXMgZ2l2ZW4gaW4gQW5uZXjCoEEuIFJlcXVpcmVtZW50cyBmb3IgdW5tb3VudGVkIGZpbHRlcnMgdXNlZCBhcyByZXBsYWNlbWVudCBvciBhbHRlcm5hdGl2ZSBmaWx0ZXJzIGFyZSBnaXZlbiBpbiBBbm5leMKgQy4gVGhpcyBkb2N1bWVudCBpcyBub3QgYXBwbGljYWJsZSB0bzogYSkgZXlld2VhciBmb3IgcHJvdGVjdGlvbiBhZ2FpbnN0IHJhZGlhdGlvbiBmcm9tIGFydGlmaWNpYWwgbGlnaHQgc291cmNlczsgYikgZXllIHByb3RlY3RvcnMgaW50ZW5kZWQgZm9yIHNwZWNpZmljIHNwb3J0cyAoZS5nLiBza2kgZ29nZ2xlcyBvciBvdGhlciB0eXBlcyDigJMgc2VlIElTTzE4NTI3IChhbGwgcGFydHMpKTsgYykgc3VuZ2xhc3NlcyB0aGF0IGhhdmUgYmVlbiBtZWRpY2FsbHkgcHJlc2NyaWJlZCBmb3IgYXR0ZW51YXRpbmcgc29sYXIgcmFkaWF0aW9uOyBkKSBwcm9kdWN0cyBpbnRlbmRlZCBmb3IgZGlyZWN0IG9ic2VydmF0aW9uIG9mIHRoZSBzdW4sIHN1Y2ggYXMgZm9yIHZpZXdpbmcgYSBwYXJ0aWFsIG9yIGFubnVsYXIgc29sYXIgZWNsaXBzZSwgZm9yIHdoaWNoIElTTzEyMzEyLTIgYXBwbGllczsgZSkgcHJvZHVjdHMgaW50ZW5kZWQgZm9yIG9jY3VwYXRpb25hbCBleWUgcHJvdGVjdGlvbiDigJMgc2VlLCBmb3IgZXhhbXBsZSwgSVNPMTYzMjEgKGFsbCBwYXJ0cykuICIsIm9iamVjdElEIjoiNzczMjFfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPIDEyMzwvZW0+MTItMToyMDIyIEV5ZSBhbmQgZmFjZSBwcm90ZWN0aW9uIOKAlCBTdW5nbGFzc2VzIGFuZCByZWxhdGVkIGV5ZXdlYXIg4oCUIFBhcnQgMTogU3VuZ2xhc3NlcyBmb3IgZ2VuZXJhbCB1c2UiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBkb2N1bWVudCBpcyBhcHBsaWNhYmxlIHRvIGFsbCBhZm9jYWwgKHBsYW5vIHBvd2VyKSBzdW5nbGFzc2VzIGFuZCBjbGlwLW9ucyBmb3IgZ2VuZXJhbCB1c2UsIGluY2x1ZGluZyByb2FkIHVzZSBhbmQgZHJpdmluZywgaW50ZW5kZWQgZm9yIHByb3RlY3Rpb24gYWdhaW5zdCBzb2xhciByYWRpYXRpb24uIEluZm9ybWF0aW9uIG9uIHRoZSB1c2Ugb2Ygc3VuZ2xhc3MgZmlsdGVycyBpcyBnaXZlbiBpbiBBbm5leMKgQS4gUmVxdWlyZW1lbnRzIGZvciB1bm1vdW50ZWQgZmlsdGVycyB1c2VkIGFzIHJlcGxhY2VtZW50IG9yIGFsdGVybmF0aXZlIGZpbHRlcnMgYXJlIGdpdmVuIGluIEFubmV4wqBDLiBUaGlzIGRvY3VtZW50IGlzIG5vdCBhcHBsaWNhYmxlIHRvOiBhKSBleWV3ZWFyIGZvciBwcm90ZWN0aW9uIGFnYWluc3QgcmFkaWF0aW9uIGZyb20gYXJ0aWZpY2lhbCBsaWdodCBzb3VyY2VzOyBiKSBleWUgcHJvdGVjdG9ycyBpbnRlbmRlZCBmb3Igc3BlY2lmaWMgc3BvcnRzIChlLmcuIHNraSBnb2dnbGVzIG9yIG90aGVyIHR5cGVzIOKAkyBzZWUgSVNPMTg1MjcgKGFsbCBwYXJ0cykpOyBjKSBzdW5nbGFzc2VzIHRoYXQgaGF2ZSBiZWVuIG1lZGljYWxseSBwcmVzY3JpYmVkIGZvciBhdHRlbnVhdGluZyBzb2xhciByYWRpYXRpb247IGQpIHByb2R1Y3RzIGludGVuZGVkIGZvciBkaXJlY3Qgb2JzZXJ2YXRpb24gb2YgdGhlIHN1biwgc3VjaCBhcyBmb3Igdmlld2luZyBhIHBhcnRpYWwgb3IgYW5udWxhciBzb2xhciBlY2xpcHNlLCBmb3Igd2hpY2ggPGVtPklTTzEyMzwvZW0+MTItMiBhcHBsaWVzOyBlKSBwcm9kdWN0cyBpbnRlbmRlZCBmb3Igb2NjdXBhdGlvbmFsIGV5ZSBwcm90ZWN0aW9uIOKAkyBzZWUsIGZvciBleGFtcGxlLCBJU08xNjMyMSAoYWxsIHBhcnRzKS4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDcvMjYvNzI2MjgiLCJ1dWlkIjoiM2Q2MWExZGUtMTNhNC00ZWIzLWE1MWUtYzFiZWIyNDUxYzQ4IiwidGl0bGUiOiJJU08gMTIzMTItMzoyMDIyIEV5ZSBhbmQgZmFjZSBwcm90ZWN0aW9uIOKAlCBTdW5nbGFzc2VzIGFuZCByZWxhdGVkIGV5ZXdlYXIg4oCUIFBhcnQgMzogU3VuZ2xhc3NlcyBmb3IgcnVubmluZywgY3ljbGluZyBhbmQgc2ltaWxhciBhY3RpdmUgbGlmZXN0eWxlcyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjIsIm9yZGVyIjoxMSwidGV4dCI6IlRoaXMgZG9jdW1lbnQgaXMgYXBwbGljYWJsZSB0byBhbGwgbm9taW5hbGx5IGFmb2NhbCAocGxhbm8gcG93ZXIpIHN1bmdsYXNzZXMgZm9yIHByb3RlY3Rpb24gYWdhaW5zdCBlbnZpcm9ubWVudGFsIGVsZW1lbnRzLCBzdWNoIGFzIHNvbGFyIHJhZGlhdGlvbiwgd2luZCwgZHVzdCBhbmQgcmFpbiB3aGVuIHJ1bm5pbmcsIGN5Y2xpbmcgYW5kIGZvbGxvd2luZyBzaW1pbGFyIGFjdGl2ZSBsaWZlc3R5bGUgcmVjcmVhdGlvbmFsIGFjdGl2aXRpZXMgYnV0IG5vdCBpbnRlbmRlZCBmb3IgY29tcGV0aXRpdmUgc3BvcnRpbmcgYWN0aXZpdGllcyB3aGVyZSBlbmhhbmNlZCBpbXBhY3QgcmVzaXN0YW5jZSBpcyByZXF1aXJlZC4gVGhlIGRvY3VtZW50IHNwZWNpZmllcyBhZGRpdGlvbmFsIG1hdGVyaWFsLCBkZXNpZ24sIHBlcmZvcm1hbmNlIGFuZCBtYXJraW5nIHJlcXVpcmVtZW50cy4gVGhlIG90aGVyIGFwcGxpY2FibGUgcmVxdWlyZW1lbnRzIGFyZSBnaXZlbiBpbiBJU0/CoDEyMzEy4oCRMS4gVGhpcyB0eXBlIG9mIHN1bmdsYXNzIGlzIGRlc2lnbmVkIHRvIHJlZHVjZSBzZWNvbmRhcnkgaGF6YXJkcyB0byB0aGUgd2VhcmVyIGluIGFuIGFjY2lkZW50IHJhdGhlciB0aGFuIHRvIHByb3ZpZGUgaGlnaCBhbW91bnRzIG9mIGltcGFjdCBwcm90ZWN0aW9uIHdoaWNoIG1heSBiZSBkaWZmaWN1bHQgaW4gYSBzcGVjdGFjbGUgZm9ybWF0LiBUaGlzIGRvY3VtZW50IGlzIG5vdCBhcHBsaWNhYmxlIHRvOiBhKSBleWV3ZWFyIGZvciBwcm90ZWN0aW9uIGFnYWluc3QgcmFkaWF0aW9uIGZyb20gYXJ0aWZpY2lhbCBsaWdodCBzb3VyY2VzLCBzdWNoIGFzIHRob3NlIHVzZWQgaW4gc29sYXJpYTsgYikgZXllIHByb3RlY3RvcnMgaW50ZW5kZWQgZm9yIHNwZWNpZmljIHNwb3J0cywgZS5nLiBza2kgZ29nZ2xlcyBvciBvdGhlciB0eXBlcyDigJMgc2VlIElTTzE4NTI3IChhbGwgcGFydHMpOyBjKSBleWUgcHJvdGVjdG9ycyBmb3Igc3BvcnRzIHRoYXQgaW5jbHVkZSB0aGUgdXNlIG9mIGEgYmFsbCwgc3RpY2ssIGJhdCwgcmFjcXVldCBvciBvdGhlciBpbXBsZW1lbnQ7IGQpIHN1bmdsYXNzZXMgdGhhdCBoYXZlIGJlZW4gbWVkaWNhbGx5IHByZXNjcmliZWQgZm9yIGF0dGVudWF0aW5nIHNvbGFyIHJhZGlhdGlvbjsgZSkgcHJvZHVjdHMgaW50ZW5kZWQgZm9yIGRpcmVjdCBvYnNlcnZhdGlvbiBvZiB0aGUgc3VuLCBzdWNoIGFzIGZvciB2aWV3aW5nIGEgcGFydGlhbCBvciBhbm51bGFyIHNvbGFyIGVjbGlwc2UsIGZvciB3aGljaCBJU08xMjMxMi0yIGFwcGxpZXM7IGYpIHByb2R1Y3RzIGludGVuZGVkIGZvciBvY2N1cGF0aW9uYWwgZXllIHByb3RlY3Rpb24g4oCTIGZvciBleGFtcGxlLCBzZWUgSVNPMTYzMjEgKGFsbCBwYXJ0cykuICIsIm9iamVjdElEIjoiNzI2MjhfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPIDEyMzwvZW0+MTItMzoyMDIyIEV5ZSBhbmQgZmFjZSBwcm90ZWN0aW9uIOKAlCBTdW5nbGFzc2VzIGFuZCByZWxhdGVkIGV5ZXdlYXIg4oCUIFBhcnQgMzogU3VuZ2xhc3NlcyBmb3IgcnVubmluZywgY3ljbGluZyBhbmQgc2ltaWxhciBhY3RpdmUgbGlmZXN0eWxlcyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX0sInRleHQiOnsidmFsdWUiOiJUaGlzIGRvY3VtZW50IGlzIGFwcGxpY2FibGUgdG8gYWxsIG5vbWluYWxseSBhZm9jYWwgKHBsYW5vIHBvd2VyKSBzdW5nbGFzc2VzIGZvciBwcm90ZWN0aW9uIGFnYWluc3QgZW52aXJvbm1lbnRhbCBlbGVtZW50cywgc3VjaCBhcyBzb2xhciByYWRpYXRpb24sIHdpbmQsIGR1c3QgYW5kIHJhaW4gd2hlbiBydW5uaW5nLCBjeWNsaW5nIGFuZCBmb2xsb3dpbmcgc2ltaWxhciBhY3RpdmUgbGlmZXN0eWxlIHJlY3JlYXRpb25hbCBhY3Rpdml0aWVzIGJ1dCBub3QgaW50ZW5kZWQgZm9yIGNvbXBldGl0aXZlIHNwb3J0aW5nIGFjdGl2aXRpZXMgd2hlcmUgZW5oYW5jZWQgaW1wYWN0IHJlc2lzdGFuY2UgaXMgcmVxdWlyZWQuIFRoZSBkb2N1bWVudCBzcGVjaWZpZXMgYWRkaXRpb25hbCBtYXRlcmlhbCwgZGVzaWduLCBwZXJmb3JtYW5jZSBhbmQgbWFya2luZyByZXF1aXJlbWVudHMuIFRoZSBvdGhlciBhcHBsaWNhYmxlIHJlcXVpcmVtZW50cyBhcmUgZ2l2ZW4gaW4gPGVtPklTT8KgMTIzPC9lbT4xMuKAkTEuIFRoaXMgdHlwZSBvZiBzdW5nbGFzcyBpcyBkZXNpZ25lZCB0byByZWR1Y2Ugc2Vjb25kYXJ5IGhhemFyZHMgdG8gdGhlIHdlYXJlciBpbiBhbiBhY2NpZGVudCByYXRoZXIgdGhhbiB0byBwcm92aWRlIGhpZ2ggYW1vdW50cyBvZiBpbXBhY3QgcHJvdGVjdGlvbiB3aGljaCBtYXkgYmUgZGlmZmljdWx0IGluIGEgc3BlY3RhY2xlIGZvcm1hdC4gVGhpcyBkb2N1bWVudCBpcyBub3QgYXBwbGljYWJsZSB0bzogYSkgZXlld2VhciBmb3IgcHJvdGVjdGlvbiBhZ2FpbnN0IHJhZGlhdGlvbiBmcm9tIGFydGlmaWNpYWwgbGlnaHQgc291cmNlcywgc3VjaCBhcyB0aG9zZSB1c2VkIGluIHNvbGFyaWE7IGIpIGV5ZSBwcm90ZWN0b3JzIGludGVuZGVkIGZvciBzcGVjaWZpYyBzcG9ydHMsIGUuZy4gc2tpIGdvZ2dsZXMgb3Igb3RoZXIgdHlwZXMg4oCTIHNlZSBJU08xODUyNyAoYWxsIHBhcnRzKTsgYykgZXllIHByb3RlY3RvcnMgZm9yIHNwb3J0cyB0aGF0IGluY2x1ZGUgdGhlIHVzZSBvZiBhIGJhbGwsIHN0aWNrLCBiYXQsIHJhY3F1ZXQgb3Igb3RoZXIgaW1wbGVtZW50OyBkKSBzdW5nbGFzc2VzIHRoYXQgaGF2ZSBiZWVuIG1lZGljYWxseSBwcmVzY3JpYmVkIGZvciBhdHRlbnVhdGluZyBzb2xhciByYWRpYXRpb247IGUpIHByb2R1Y3RzIGludGVuZGVkIGZvciBkaXJlY3Qgb2JzZXJ2YXRpb24gb2YgdGhlIHN1biwgc3VjaCBhcyBmb3Igdmlld2luZyBhIHBhcnRpYWwgb3IgYW5udWxhciBzb2xhciBlY2xpcHNlLCBmb3Igd2hpY2ggPGVtPklTTzEyMzwvZW0+MTItMiBhcHBsaWVzOyBmKSBwcm9kdWN0cyBpbnRlbmRlZCBmb3Igb2NjdXBhdGlvbmFsIGV5ZSBwcm90ZWN0aW9uIOKAkyBmb3IgZXhhbXBsZSwgc2VlIElTTzE2MzIxIChhbGwgcGFydHMpLiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNy8wMi83MDI0OCIsInV1aWQiOiIwYWMzMDIwNi00YzM3LTQ4MWEtODQ2Ny1iOTkyOGYxMzQwOTgiLCJ0aXRsZSI6IklTTyAxMjM1NC00OjIwMTcgQnVpbGRpbmcgYWNvdXN0aWNzIOKAlCBFc3RpbWF0aW9uIG9mIGFjb3VzdGljIHBlcmZvcm1hbmNlIG9mIGJ1aWxkaW5ncyBmcm9tIHRoZSBwZXJmb3JtYW5jZSBvZiBlbGVtZW50cyDigJQgUGFydCA0OiBUcmFuc21pc3Npb24gb2YgaW5kb29yIHNvdW5kIHRvIHRoZSBvdXRzaWRlIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMiwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDEyMzU0LTQ6MjAxNyBzcGVjaWZpZXMgYSBjYWxjdWxhdGlvbiBtb2RlbCB0byBlc3RpbWF0ZSB0aGUgc291bmQgcG93ZXIgbGV2ZWwgcmFkaWF0ZWQgYnkgdGhlIGVudmVsb3BlIG9mIGEgYnVpbGRpbmcgZHVlIHRvIGFpcmJvcm5lIHNvdW5kIGluc2lkZSB0aGF0IGJ1aWxkaW5nLCBwcmltYXJpbHkgYnkgbWVhbnMgb2YgbWVhc3VyZWQgc291bmQgcHJlc3N1cmUgbGV2ZWxzIGluc2lkZSB0aGUgYnVpbGRpbmcgYW5kIG1lYXN1cmVkIGRhdGEgd2hpY2ggY2hhcmFjdGVyaXplIHRoZSBzb3VuZCB0cmFuc21pc3Npb24gYnkgdGhlIHJlbGV2YW50IGVsZW1lbnRzIGFuZCBvcGVuaW5ncyBpbiB0aGUgYnVpbGRpbmcgZW52ZWxvcGUuIFRoZXNlIHNvdW5kIHBvd2VyIGxldmVscywgdG9nZXRoZXIgd2l0aCB0aG9zZSBvZiBvdGhlciBzb3VuZCBzb3VyY2VzIGluIG9yIGluIGZyb250IG9mIHRoZSBidWlsZGluZyBlbnZlbG9wZSwgZm9ybSB0aGUgYmFzaXMgZm9yIHRoZSBjYWxjdWxhdGlvbiBvZiB0aGUgc291bmQgcHJlc3N1cmUgbGV2ZWwgYXQgYSBjaG9zZW4gZGlzdGFuY2UgZnJvbSBhIGJ1aWxkaW5nIGFzIGEgbWVhc3VyZSBmb3IgdGhlIGFjb3VzdGljIHBlcmZvcm1hbmNlIG9mIGJ1aWxkaW5ncy4gVGhlIHByZWRpY3Rpb24gb2YgdGhlIGluc2lkZSBzb3VuZCBwcmVzc3VyZSBsZXZlbCBmcm9tIGtub3dsZWRnZSBvZiB0aGUgaW5kb29yIHNvdW5kIHNvdXJjZXMgaXMgb3V0c2lkZSB0aGUgc2NvcGUgb2YgdGhpcyBkb2N1bWVudC4gVGhlIHByZWRpY3Rpb24gb2YgdGhlIG91dGRvb3Igc291bmQgcHJvcGFnYXRpb24gaXMgb3V0c2lkZSB0aGUgc2NvcGUgb2YgdGhpcyBkb2N1bWVudC4gTk9URSAgICAgICAgICBGb3Igc2ltcGxlIHByb3BhZ2F0aW9uIGNvbmRpdGlvbnMgYW4gYXBwcm9hY2ggaXMgZ2l2ZW4gZm9yIHRoZSBlc3RpbWF0aW9uIG9mIHRoZSBzb3VuZCBwcmVzc3VyZSBsZXZlbCBpbiBBbm5leCBFLiBJU08gMTIzNTQtNDoyMDE3IGRlc2NyaWJlcyB0aGUgcHJpbmNpcGxlcyBvZiB0aGUgY2FsY3VsYXRpb24gbW9kZWwsIGxpc3RzIHRoZSByZWxldmFudCBxdWFudGl0aWVzIGFuZCBkZWZpbmVzIGl0cyBhcHBsaWNhdGlvbnMgYW5kIHJlc3RyaWN0aW9ucy4gIiwib2JqZWN0SUQiOiI3MDI0OF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT41NC00OjIwMTcgQnVpbGRpbmcgYWNvdXN0aWNzIOKAlCBFc3RpbWF0aW9uIG9mIGFjb3VzdGljIHBlcmZvcm1hbmNlIG9mIGJ1aWxkaW5ncyBmcm9tIHRoZSBwZXJmb3JtYW5jZSBvZiBlbGVtZW50cyDigJQgUGFydCA0OiBUcmFuc21pc3Npb24gb2YgaW5kb29yIHNvdW5kIHRvIHRoZSBvdXRzaWRlIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT41NC00OjIwMTcgc3BlY2lmaWVzIGEgY2FsY3VsYXRpb24gbW9kZWwgdG8gZXN0aW1hdGUgdGhlIHNvdW5kIHBvd2VyIGxldmVsIHJhZGlhdGVkIGJ5IHRoZSBlbnZlbG9wZSBvZiBhIGJ1aWxkaW5nIGR1ZSB0byBhaXJib3JuZSBzb3VuZCBpbnNpZGUgdGhhdCBidWlsZGluZywgcHJpbWFyaWx5IGJ5IG1lYW5zIG9mIG1lYXN1cmVkIHNvdW5kIHByZXNzdXJlIGxldmVscyBpbnNpZGUgdGhlIGJ1aWxkaW5nIGFuZCBtZWFzdXJlZCBkYXRhIHdoaWNoIGNoYXJhY3Rlcml6ZSB0aGUgc291bmQgdHJhbnNtaXNzaW9uIGJ5IHRoZSByZWxldmFudCBlbGVtZW50cyBhbmQgb3BlbmluZ3MgaW4gdGhlIGJ1aWxkaW5nIGVudmVsb3BlLiBUaGVzZSBzb3VuZCBwb3dlciBsZXZlbHMsIHRvZ2V0aGVyIHdpdGggdGhvc2Ugb2Ygb3RoZXIgc291bmQgc291cmNlcyBpbiBvciBpbiBmcm9udCBvZiB0aGUgYnVpbGRpbmcgZW52ZWxvcGUsIGZvcm0gdGhlIGJhc2lzIGZvciB0aGUgY2FsY3VsYXRpb24gb2YgdGhlIHNvdW5kIHByZXNzdXJlIGxldmVsIGF0IGEgY2hvc2VuIGRpc3RhbmNlIGZyb20gYSBidWlsZGluZyBhcyBhIG1lYXN1cmUgZm9yIHRoZSBhY291c3RpYyBwZXJmb3JtYW5jZSBvZiBidWlsZGluZ3MuIFRoZSBwcmVkaWN0aW9uIG9mIHRoZSBpbnNpZGUgc291bmQgcHJlc3N1cmUgbGV2ZWwgZnJvbSBrbm93bGVkZ2Ugb2YgdGhlIGluZG9vciBzb3VuZCBzb3VyY2VzIGlzIG91dHNpZGUgdGhlIHNjb3BlIG9mIHRoaXMgZG9jdW1lbnQuIFRoZSBwcmVkaWN0aW9uIG9mIHRoZSBvdXRkb29yIHNvdW5kIHByb3BhZ2F0aW9uIGlzIG91dHNpZGUgdGhlIHNjb3BlIG9mIHRoaXMgZG9jdW1lbnQuIE5PVEUgICAgICAgICAgRm9yIHNpbXBsZSBwcm9wYWdhdGlvbiBjb25kaXRpb25zIGFuIGFwcHJvYWNoIGlzIGdpdmVuIGZvciB0aGUgZXN0aW1hdGlvbiBvZiB0aGUgc291bmQgcHJlc3N1cmUgbGV2ZWwgaW4gQW5uZXggRS4gPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjU0LTQ6MjAxNyBkZXNjcmliZXMgdGhlIHByaW5jaXBsZXMgb2YgdGhlIGNhbGN1bGF0aW9uIG1vZGVsLCBsaXN0cyB0aGUgcmVsZXZhbnQgcXVhbnRpdGllcyBhbmQgZGVmaW5lcyBpdHMgYXBwbGljYXRpb25zIGFuZCByZXN0cmljdGlvbnMuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA3LzAyLzcwMjQ0IiwidXVpZCI6IjhlZDAzYWZiLWFlYjctNDAwMy04MDBiLWZjYTU0MjhkOTEyOSIsInRpdGxlIjoiSVNPIDEyMzU0LTM6MjAxNyBCdWlsZGluZyBhY291c3RpY3Mg4oCUIEVzdGltYXRpb24gb2YgYWNvdXN0aWMgcGVyZm9ybWFuY2Ugb2YgYnVpbGRpbmdzIGZyb20gdGhlIHBlcmZvcm1hbmNlIG9mIGVsZW1lbnRzIOKAlCBQYXJ0IDM6IEFpcmJvcm5lIHNvdW5kIGluc3VsYXRpb24gYWdhaW5zdCBvdXRkb29yIHNvdW5kIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMiwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDEyMzU0LTM6MjAxNyBzcGVjaWZpZXMgYSBjYWxjdWxhdGlvbiBtb2RlbCB0byBlc3RpbWF0ZSB0aGUgc291bmQgaW5zdWxhdGlvbiBvciB0aGUgc291bmQgcHJlc3N1cmUgbGV2ZWwgZGlmZmVyZW5jZSBvZiBhIGZhw6dhZGUgb3Igb3RoZXIgZXh0ZXJuYWwgc3VyZmFjZSBvZiBhIGJ1aWxkaW5nLiBUaGUgY2FsY3VsYXRpb24gaXMgYmFzZWQgb24gdGhlIHNvdW5kIHJlZHVjdGlvbiBpbmRleCBvZiB0aGUgZGlmZmVyZW50IGVsZW1lbnRzIGZyb20gd2hpY2ggdGhlIGZhw6dhZGUgaXMgY29uc3RydWN0ZWQgYW5kIGl0IGluY2x1ZGVzIGRpcmVjdCBhbmQgZmxhbmtpbmcgdHJhbnNtaXNzaW9uLiBUaGUgY2FsY3VsYXRpb24gZ2l2ZXMgcmVzdWx0cyB3aGljaCBjb3JyZXNwb25kIGFwcHJveGltYXRlbHkgdG8gdGhlIHJlc3VsdHMgZnJvbSBmaWVsZCBtZWFzdXJlbWVudHMgaW4gYWNjb3JkYW5jZSB3aXRoIElTTyAxNjI4M+KAkTMuIENhbGN1bGF0aW9ucyBjYW4gYmUgY2FycmllZCBvdXQgZm9yIGZyZXF1ZW5jeSBiYW5kcyBvciBmb3Igc2luZ2xlIG51bWJlciByYXRpbmdzLiBUaGUgY2FsY3VsYXRpb24gcmVzdWx0cyBjYW4gYWxzbyBiZSB1c2VkIGZvciBjYWxjdWxhdGluZyB0aGUgaW5kb29yIHNvdW5kIHByZXNzdXJlIGxldmVsIGR1ZSB0byBmb3IgaW5zdGFuY2Ugcm9hZCB0cmFmZmljIChzZWUgQW5uZXggRSkuIElTTyAxMjM1NC0zOjIwMTcgZGVzY3JpYmVzIHRoZSBwcmluY2lwbGVzIG9mIHRoZSBjYWxjdWxhdGlvbiBtb2RlbCwgbGlzdHMgdGhlIHJlbGV2YW50IHF1YW50aXRpZXMgYW5kIGRlZmluZXMgaXRzIGFwcGxpY2F0aW9ucyBhbmQgcmVzdHJpY3Rpb25zLiAiLCJvYmplY3RJRCI6IjcwMjQ0XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjU0LTM6MjAxNyBCdWlsZGluZyBhY291c3RpY3Mg4oCUIEVzdGltYXRpb24gb2YgYWNvdXN0aWMgcGVyZm9ybWFuY2Ugb2YgYnVpbGRpbmdzIGZyb20gdGhlIHBlcmZvcm1hbmNlIG9mIGVsZW1lbnRzIOKAlCBQYXJ0IDM6IEFpcmJvcm5lIHNvdW5kIGluc3VsYXRpb24gYWdhaW5zdCBvdXRkb29yIHNvdW5kIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT41NC0zOjIwMTcgc3BlY2lmaWVzIGEgY2FsY3VsYXRpb24gbW9kZWwgdG8gZXN0aW1hdGUgdGhlIHNvdW5kIGluc3VsYXRpb24gb3IgdGhlIHNvdW5kIHByZXNzdXJlIGxldmVsIGRpZmZlcmVuY2Ugb2YgYSBmYcOnYWRlIG9yIG90aGVyIGV4dGVybmFsIHN1cmZhY2Ugb2YgYSBidWlsZGluZy4gVGhlIGNhbGN1bGF0aW9uIGlzIGJhc2VkIG9uIHRoZSBzb3VuZCByZWR1Y3Rpb24gaW5kZXggb2YgdGhlIGRpZmZlcmVudCBlbGVtZW50cyBmcm9tIHdoaWNoIHRoZSBmYcOnYWRlIGlzIGNvbnN0cnVjdGVkIGFuZCBpdCBpbmNsdWRlcyBkaXJlY3QgYW5kIGZsYW5raW5nIHRyYW5zbWlzc2lvbi4gVGhlIGNhbGN1bGF0aW9uIGdpdmVzIHJlc3VsdHMgd2hpY2ggY29ycmVzcG9uZCBhcHByb3hpbWF0ZWx5IHRvIHRoZSByZXN1bHRzIGZyb20gZmllbGQgbWVhc3VyZW1lbnRzIGluIGFjY29yZGFuY2Ugd2l0aCA8ZW0+SVNPPC9lbT4gMTYyODPigJEzLiBDYWxjdWxhdGlvbnMgY2FuIGJlIGNhcnJpZWQgb3V0IGZvciBmcmVxdWVuY3kgYmFuZHMgb3IgZm9yIHNpbmdsZSBudW1iZXIgcmF0aW5ncy4gVGhlIGNhbGN1bGF0aW9uIHJlc3VsdHMgY2FuIGFsc28gYmUgdXNlZCBmb3IgY2FsY3VsYXRpbmcgdGhlIGluZG9vciBzb3VuZCBwcmVzc3VyZSBsZXZlbCBkdWUgdG8gZm9yIGluc3RhbmNlIHJvYWQgdHJhZmZpYyAoc2VlIEFubmV4IEUpLiA8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+NTQtMzoyMDE3IGRlc2NyaWJlcyB0aGUgcHJpbmNpcGxlcyBvZiB0aGUgY2FsY3VsYXRpb24gbW9kZWwsIGxpc3RzIHRoZSByZWxldmFudCBxdWFudGl0aWVzIGFuZCBkZWZpbmVzIGl0cyBhcHBsaWNhdGlvbnMgYW5kIHJlc3RyaWN0aW9ucy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDcvMDIvNzAyNDMiLCJ1dWlkIjoiYTE4ODIzNzktZmQzZi00OTM2LWJkNWYtODMyYTZhMjgxOGNiIiwidGl0bGUiOiJJU08gMTIzNTQtMjoyMDE3IEJ1aWxkaW5nIGFjb3VzdGljcyDigJQgRXN0aW1hdGlvbiBvZiBhY291c3RpYyBwZXJmb3JtYW5jZSBvZiBidWlsZGluZ3MgZnJvbSB0aGUgcGVyZm9ybWFuY2Ugb2YgZWxlbWVudHMg4oCUIFBhcnQgMjogSW1wYWN0IHNvdW5kIGluc3VsYXRpb24gYmV0d2VlbiByb29tcyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjIsIm9yZGVyIjoxMSwidGV4dCI6IklTTyAxMjM1NC0yOjIwMTcgc3BlY2lmaWVzIGNhbGN1bGF0aW9uIG1vZGVscyBkZXNpZ25lZCB0byBlc3RpbWF0ZSB0aGUgaW1wYWN0IHNvdW5kIGluc3VsYXRpb24gYmV0d2VlbiByb29tcyBpbiBidWlsZGluZ3MsIHByaW1hcmlseSB1c2luZyBtZWFzdXJlZCBkYXRhIHdoaWNoIGNoYXJhY3Rlcml6ZSBkaXJlY3Qgb3IgaW5kaXJlY3QgZmxhbmtpbmcgdHJhbnNtaXNzaW9uIGJ5IHRoZSBwYXJ0aWNpcGF0aW5nIGJ1aWxkaW5nIGVsZW1lbnRzIGFuZCB0aGVvcmV0aWNhbGx5LWRlcml2ZWQgbWV0aG9kcyBvZiBzb3VuZCBwcm9wYWdhdGlvbiBpbiBzdHJ1Y3R1cmFsIGVsZW1lbnRzLiBBIGRldGFpbGVkIG1vZGVsIGlzIGRlc2NyaWJlZCBmb3IgY2FsY3VsYXRpb24gaW4gZnJlcXVlbmN5IGJhbmRzLCBpbiB0aGUgZnJlcXVlbmN5IHJhbmdlIDEvMyBvY3RhdmUgMTAwIEh6IHRvIDMxNTAgSHogaW4gYWNjb3JkYW5jZSB3aXRoIElTTyA3MTfigJExLCBwb3NzaWJseSBleHRlbmRlZCBkb3duIHRvIDEvMyBvY3RhdmUgNTAgSHogaWYgZWxlbWVudCBkYXRhIGFuZCBqdW5jdGlvbiBkYXRhIGFyZSBhdmFpbGFibGUgKHNlZSBBbm5leCBFKTsgdGhlIHNpbmdsZSBudW1iZXIgcmF0aW5nIG9mIGJ1aWxkaW5ncyBjYW4gYmUgZGV0ZXJtaW5lZCBmcm9tIHRoZSBjYWxjdWxhdGlvbiByZXN1bHRzLiBBIHNpbXBsaWZpZWQgbW9kZWwgd2l0aCBhIHJlc3RyaWN0ZWQgZmllbGQgb2YgYXBwbGljYXRpb24gaXMgZGVkdWNlZCBmcm9tIHRoaXMsIGNhbGN1bGF0aW5nIGRpcmVjdGx5IHRoZSBzaW5nbGUgbnVtYmVyIHJhdGluZywgdXNpbmcgdGhlIHNpbmdsZSBudW1iZXIgcmF0aW5ncyBvZiB0aGUgZWxlbWVudHM7IHRoZSB1bmNlcnRhaW50eSBvbiB0aGUgYXBwYXJlbnQgaW1wYWN0IHNvdW5kIHByZXNzdXJlIGxldmVsIGNhbGN1bGF0ZWQgdXNpbmcgdGhlIHNpbXBsaWZpZWQgbW9kZWwgY2FuIGJlIGRldGVybWluZWQgYWNjb3JkaW5nIHRvIHRoZSBtZXRob2QgZGVzY3JpYmVkIGluIElTTyAxMjM1NOKAkTE6MjAxNywgQW5uZXggSyAoc2VlIENsYXVzZSA1KS4gSVNPIDEyMzU0LTI6MjAxNyBkZXNjcmliZXMgdGhlIHByaW5jaXBsZXMgb2YgdGhlIGNhbGN1bGF0aW9uIHNjaGVtZSwgbGlzdHMgdGhlIHJlbGV2YW50IHF1YW50aXRpZXMgYW5kIGRlZmluZXMgaXRzIGFwcGxpY2F0aW9ucyBhbmQgcmVzdHJpY3Rpb25zLiAiLCJvYmplY3RJRCI6IjcwMjQzXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjU0LTI6MjAxNyBCdWlsZGluZyBhY291c3RpY3Mg4oCUIEVzdGltYXRpb24gb2YgYWNvdXN0aWMgcGVyZm9ybWFuY2Ugb2YgYnVpbGRpbmdzIGZyb20gdGhlIHBlcmZvcm1hbmNlIG9mIGVsZW1lbnRzIOKAlCBQYXJ0IDI6IEltcGFjdCBzb3VuZCBpbnN1bGF0aW9uIGJldHdlZW4gcm9vbXMiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjU0LTI6MjAxNyBzcGVjaWZpZXMgY2FsY3VsYXRpb24gbW9kZWxzIGRlc2lnbmVkIHRvIGVzdGltYXRlIHRoZSBpbXBhY3Qgc291bmQgaW5zdWxhdGlvbiBiZXR3ZWVuIHJvb21zIGluIGJ1aWxkaW5ncywgcHJpbWFyaWx5IHVzaW5nIG1lYXN1cmVkIGRhdGEgd2hpY2ggY2hhcmFjdGVyaXplIGRpcmVjdCBvciBpbmRpcmVjdCBmbGFua2luZyB0cmFuc21pc3Npb24gYnkgdGhlIHBhcnRpY2lwYXRpbmcgYnVpbGRpbmcgZWxlbWVudHMgYW5kIHRoZW9yZXRpY2FsbHktZGVyaXZlZCBtZXRob2RzIG9mIHNvdW5kIHByb3BhZ2F0aW9uIGluIHN0cnVjdHVyYWwgZWxlbWVudHMuIEEgZGV0YWlsZWQgbW9kZWwgaXMgZGVzY3JpYmVkIGZvciBjYWxjdWxhdGlvbiBpbiBmcmVxdWVuY3kgYmFuZHMsIGluIHRoZSBmcmVxdWVuY3kgcmFuZ2UgMS8zIG9jdGF2ZSAxMDAgSHogdG8gMzE1MCBIeiBpbiBhY2NvcmRhbmNlIHdpdGggPGVtPklTTzwvZW0+IDcxN+KAkTEsIHBvc3NpYmx5IGV4dGVuZGVkIGRvd24gdG8gMS8zIG9jdGF2ZSA1MCBIeiBpZiBlbGVtZW50IGRhdGEgYW5kIGp1bmN0aW9uIGRhdGEgYXJlIGF2YWlsYWJsZSAoc2VlIEFubmV4IEUpOyB0aGUgc2luZ2xlIG51bWJlciByYXRpbmcgb2YgYnVpbGRpbmdzIGNhbiBiZSBkZXRlcm1pbmVkIGZyb20gdGhlIGNhbGN1bGF0aW9uIHJlc3VsdHMuIEEgc2ltcGxpZmllZCBtb2RlbCB3aXRoIGEgcmVzdHJpY3RlZCBmaWVsZCBvZiBhcHBsaWNhdGlvbiBpcyBkZWR1Y2VkIGZyb20gdGhpcywgY2FsY3VsYXRpbmcgZGlyZWN0bHkgdGhlIHNpbmdsZSBudW1iZXIgcmF0aW5nLCB1c2luZyB0aGUgc2luZ2xlIG51bWJlciByYXRpbmdzIG9mIHRoZSBlbGVtZW50czsgdGhlIHVuY2VydGFpbnR5IG9uIHRoZSBhcHBhcmVudCBpbXBhY3Qgc291bmQgcHJlc3N1cmUgbGV2ZWwgY2FsY3VsYXRlZCB1c2luZyB0aGUgc2ltcGxpZmllZCBtb2RlbCBjYW4gYmUgZGV0ZXJtaW5lZCBhY2NvcmRpbmcgdG8gdGhlIG1ldGhvZCBkZXNjcmliZWQgaW4gPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjU04oCRMToyMDE3LCBBbm5leCBLIChzZWUgQ2xhdXNlIDUpLiA8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+NTQtMjoyMDE3IGRlc2NyaWJlcyB0aGUgcHJpbmNpcGxlcyBvZiB0aGUgY2FsY3VsYXRpb24gc2NoZW1lLCBsaXN0cyB0aGUgcmVsZXZhbnQgcXVhbnRpdGllcyBhbmQgZGVmaW5lcyBpdHMgYXBwbGljYXRpb25zIGFuZCByZXN0cmljdGlvbnMuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA3LzAyLzcwMjQyIiwidXVpZCI6IjY3NTAzOWNlLTM0MmItNDcxYy05NGViLWJiOGQ2ZWU2ZTE1NiIsInRpdGxlIjoiSVNPIDEyMzU0LTE6MjAxNyBCdWlsZGluZyBhY291c3RpY3Mg4oCUIEVzdGltYXRpb24gb2YgYWNvdXN0aWMgcGVyZm9ybWFuY2Ugb2YgYnVpbGRpbmdzIGZyb20gdGhlIHBlcmZvcm1hbmNlIG9mIGVsZW1lbnRzIOKAlCBQYXJ0IDE6IEFpcmJvcm5lIHNvdW5kIGluc3VsYXRpb24gYmV0d2VlbiByb29tcyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjIsIm9yZGVyIjoxMSwidGV4dCI6IklTTyAxMjM1NC0xOjIwMTcgc3BlY2lmaWVzIGNhbGN1bGF0aW9uIG1vZGVscyBkZXNpZ25lZCB0byBlc3RpbWF0ZSB0aGUgYWlyYm9ybmUgc291bmQgaW5zdWxhdGlvbiBiZXR3ZWVuIGFkamFjZW50IHJvb21zIGluIGJ1aWxkaW5ncywgcHJpbWFyaWx5IHVzaW5nIG1lYXN1cmVkIGRhdGEgd2hpY2ggY2hhcmFjdGVyaXplIGRpcmVjdCBvciBpbmRpcmVjdCBmbGFua2luZyB0cmFuc21pc3Npb24gYnkgdGhlIHBhcnRpY2lwYXRpbmcgYnVpbGRpbmcgZWxlbWVudHMsIGFuZCB0aGVvcmV0aWNhbGx5LWRlcml2ZWQgbWV0aG9kcyBvZiBzb3VuZCBwcm9wYWdhdGlvbiBpbiBzdHJ1Y3R1cmFsIGVsZW1lbnRzLiBBIGRldGFpbGVkIG1vZGVsIGlzIGRlc2NyaWJlZCBmb3IgY2FsY3VsYXRpb24gaW4gZnJlcXVlbmN5IGJhbmRzLCBpbiB0aGUgZnJlcXVlbmN5IHJhbmdlIDEvMyBvY3RhdmUgMTAwIEh6IHRvIDMgMTUwIEh6IGluIGFjY29yZGFuY2Ugd2l0aCBJU08gNzE34oCRMSwgcG9zc2libHkgZXh0ZW5kZWQgZG93biB0byAxLzMgb2N0YXZlIDUwIEh6IGlmIGVsZW1lbnQgZGF0YSBhbmQganVuY3Rpb24gZGF0YSBhcmUgYXZhaWxhYmxlIChzZWUgQW5uZXggSSk7IHRoZSBzaW5nbGUgbnVtYmVyIHJhdGluZyBjYW4gYmUgZGV0ZXJtaW5lZCBmcm9tIHRoZSBjYWxjdWxhdGlvbiByZXN1bHRzLiBBIHNpbXBsaWZpZWQgbW9kZWwgd2l0aCBhIHJlc3RyaWN0ZWQgZmllbGQgb2YgYXBwbGljYXRpb24gaXMgZGVkdWNlZCBmcm9tIHRoaXMsIGNhbGN1bGF0aW5nIGRpcmVjdGx5IHRoZSBzaW5nbGUgbnVtYmVyIHJhdGluZywgdXNpbmcgdGhlIHNpbmdsZSBudW1iZXIgcmF0aW5ncyBvZiB0aGUgZWxlbWVudHM7IGEgbWV0aG9kIHRvIGRldGVybWluZSB1bmNlcnRhaW50eSBpcyBwcm9wb3NlZCBmb3IgdGhlIHNpbXBsaWZpZWQgbW9kZWwgKHNlZSBBbm5leCBLKS4gSVNPIDEyMzU0LTE6MjAxNyBkZXNjcmliZXMgdGhlIHByaW5jaXBsZXMgb2YgdGhlIGNhbGN1bGF0aW9uIHNjaGVtZSwgbGlzdHMgdGhlIHJlbGV2YW50IHF1YW50aXRpZXMgYW5kIGRlZmluZXMgaXRzIGFwcGxpY2F0aW9ucyBhbmQgcmVzdHJpY3Rpb25zLiAiLCJvYmplY3RJRCI6IjcwMjQyXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjU0LTE6MjAxNyBCdWlsZGluZyBhY291c3RpY3Mg4oCUIEVzdGltYXRpb24gb2YgYWNvdXN0aWMgcGVyZm9ybWFuY2Ugb2YgYnVpbGRpbmdzIGZyb20gdGhlIHBlcmZvcm1hbmNlIG9mIGVsZW1lbnRzIOKAlCBQYXJ0IDE6IEFpcmJvcm5lIHNvdW5kIGluc3VsYXRpb24gYmV0d2VlbiByb29tcyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+NTQtMToyMDE3IHNwZWNpZmllcyBjYWxjdWxhdGlvbiBtb2RlbHMgZGVzaWduZWQgdG8gZXN0aW1hdGUgdGhlIGFpcmJvcm5lIHNvdW5kIGluc3VsYXRpb24gYmV0d2VlbiBhZGphY2VudCByb29tcyBpbiBidWlsZGluZ3MsIHByaW1hcmlseSB1c2luZyBtZWFzdXJlZCBkYXRhIHdoaWNoIGNoYXJhY3Rlcml6ZSBkaXJlY3Qgb3IgaW5kaXJlY3QgZmxhbmtpbmcgdHJhbnNtaXNzaW9uIGJ5IHRoZSBwYXJ0aWNpcGF0aW5nIGJ1aWxkaW5nIGVsZW1lbnRzLCBhbmQgdGhlb3JldGljYWxseS1kZXJpdmVkIG1ldGhvZHMgb2Ygc291bmQgcHJvcGFnYXRpb24gaW4gc3RydWN0dXJhbCBlbGVtZW50cy4gQSBkZXRhaWxlZCBtb2RlbCBpcyBkZXNjcmliZWQgZm9yIGNhbGN1bGF0aW9uIGluIGZyZXF1ZW5jeSBiYW5kcywgaW4gdGhlIGZyZXF1ZW5jeSByYW5nZSAxLzMgb2N0YXZlIDEwMCBIeiB0byAzIDE1MCBIeiBpbiBhY2NvcmRhbmNlIHdpdGggPGVtPklTTzwvZW0+IDcxN+KAkTEsIHBvc3NpYmx5IGV4dGVuZGVkIGRvd24gdG8gMS8zIG9jdGF2ZSA1MCBIeiBpZiBlbGVtZW50IGRhdGEgYW5kIGp1bmN0aW9uIGRhdGEgYXJlIGF2YWlsYWJsZSAoc2VlIEFubmV4IEkpOyB0aGUgc2luZ2xlIG51bWJlciByYXRpbmcgY2FuIGJlIGRldGVybWluZWQgZnJvbSB0aGUgY2FsY3VsYXRpb24gcmVzdWx0cy4gQSBzaW1wbGlmaWVkIG1vZGVsIHdpdGggYSByZXN0cmljdGVkIGZpZWxkIG9mIGFwcGxpY2F0aW9uIGlzIGRlZHVjZWQgZnJvbSB0aGlzLCBjYWxjdWxhdGluZyBkaXJlY3RseSB0aGUgc2luZ2xlIG51bWJlciByYXRpbmcsIHVzaW5nIHRoZSBzaW5nbGUgbnVtYmVyIHJhdGluZ3Mgb2YgdGhlIGVsZW1lbnRzOyBhIG1ldGhvZCB0byBkZXRlcm1pbmUgdW5jZXJ0YWludHkgaXMgcHJvcG9zZWQgZm9yIHRoZSBzaW1wbGlmaWVkIG1vZGVsIChzZWUgQW5uZXggSykuIDxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT41NC0xOjIwMTcgZGVzY3JpYmVzIHRoZSBwcmluY2lwbGVzIG9mIHRoZSBjYWxjdWxhdGlvbiBzY2hlbWUsIGxpc3RzIHRoZSByZWxldmFudCBxdWFudGl0aWVzIGFuZCBkZWZpbmVzIGl0cyBhcHBsaWNhdGlvbnMgYW5kIHJlc3RyaWN0aW9ucy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDYvODYvNjg2MjUiLCJ1dWlkIjoiM2ExYjhiNWQtMjgxOC00ZTZjLWE0Y2YtYWI4OTMwNzMyYzljIiwidGl0bGUiOiJJU08gMTIzMDg6MjAxNyBQbGFpbiBiZWFyaW5ncyDigJQgUXVhbGl0eSBhc3N1cmFuY2Ugb2Ygc2FtcGxlIHR5cGVzIOKAlCBEZWZpbml0aW9ucywgYXBwbGljYXRpb25zIGFuZCB0ZXN0aW5nIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMiwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDEyMzA4OjIwMTcgZGVmaW5lcyB0aGUgdHlwZXMgb2YgcGxhaW4gYmVhcmluZyBzYW1wbGVzIGV4Y2hhbmdlZCBiZXR3ZWVuIHB1cmNoYXNlciBhbmQgbWFudWZhY3R1cmVyLiBJbiB0aGUgZmllbGQgb2YgaW50ZXJuYWwgY29tYnVzdGlvbiBlbmdpbmVzIGFuZCBvdGhlciBzZXJpZXMgcHJvZHVjdGlvbiwgaXQgaXMgbmVjZXNzYXJ5IHRvIHdvcmsgd2l0aCBkaWZmZXJlbnQgdHlwZXMgb2Ygc2FtcGxlcyBkZXBlbmRpbmcgb24gdGhlIHB1cnBvc2UuIFR5cGVzIG9mIHNhbXBsZXMgYXJlIGFzIGZvbGxvd3MuIC0gICAgICBTYW1wbGVzIHVzZWQgZm9yIHRlc3RzIGFuZCBleGFtaW5hdGlvbnMgd2hpY2ggYXJlIGNhcnJpZWQgb3V0IGluIHRoZSBleHBlcmltZW50YWwgc3RhZ2UgYW5kIHBpbG90IGxvdCBzdGFnZS4gVGhlc2UgaW5jbHVkZSBmaXR0aW5nIHNhbXBsZXMsIHByb3RvdHlwZSBzYW1wbGVzIGFuZCBpbnRlcm1lZGlhdGUgc2FtcGxlcy4gLSAgICAgIFNhbXBsZXMgdXNlZCB0byBwcm92ZSB0aGF0IHRoZSBxdWFsaXR5IGlzIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgcXVhbGl0eSByZXF1aXJlbWVudHMgKGRpbWVuc2lvbnMsIG1hdGVyaWFsIGFuZCBwZXJmb3JtYW5jZSBzcGVjaWZpY2F0aW9uKS4gVGhlc2UgaW5jbHVkZSBpbml0aWFsIHNhbXBsZXMgYW5kIHJlZmVyZW5jZSBzYW1wbGVzIGFuZCwgaWYgbmVjZXNzYXJ5LCBpbnRlcm1lZGlhdGUgc2FtcGxlcy4gTk9URSAgICAgICBTZWUgSVNPIDM1MzQgKGFsbCBwYXJ0cykgYW5kIElTTyA5MDAwIGZvciBmdXJ0aGVyIGluZm9ybWF0aW9uLiAtICAgICAgU2FtcGxlcyB3aGljaCBnaXZlIHNlbGVjdGl2ZSBpbmZvcm1hdGlvbiBhYm91dCBwYXJ0aWN1bGFyIHF1YWxpdHkgY2hhcmFjdGVyaXN0aWNzIG9mIGEgcGxhaW4gYmVhcmluZywgcmVsYXRpbmcgdG8gdGhlaXIgY29uZm9ybWl0eSB3aXRoIHRoZSBzcGVjaWZpY2F0aW9ucy4gVGhlc2UgaW52b2x2ZSByZWZlcmVuY2UgYW5kIGNoYXJhY3RlcmlzdGljIG1vZGlmaWNhdGlvbiBzYW1wbGVzLiAiLCJvYmplY3RJRCI6IjY4NjI1XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjA4OjIwMTcgUGxhaW4gYmVhcmluZ3Mg4oCUIFF1YWxpdHkgYXNzdXJhbmNlIG9mIHNhbXBsZSB0eXBlcyDigJQgRGVmaW5pdGlvbnMsIGFwcGxpY2F0aW9ucyBhbmQgdGVzdGluZyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+MDg6MjAxNyBkZWZpbmVzIHRoZSB0eXBlcyBvZiBwbGFpbiBiZWFyaW5nIHNhbXBsZXMgZXhjaGFuZ2VkIGJldHdlZW4gcHVyY2hhc2VyIGFuZCBtYW51ZmFjdHVyZXIuIEluIHRoZSBmaWVsZCBvZiBpbnRlcm5hbCBjb21idXN0aW9uIGVuZ2luZXMgYW5kIG90aGVyIHNlcmllcyBwcm9kdWN0aW9uLCBpdCBpcyBuZWNlc3NhcnkgdG8gd29yayB3aXRoIGRpZmZlcmVudCB0eXBlcyBvZiBzYW1wbGVzIGRlcGVuZGluZyBvbiB0aGUgcHVycG9zZS4gVHlwZXMgb2Ygc2FtcGxlcyBhcmUgYXMgZm9sbG93cy4gLSAgICAgIFNhbXBsZXMgdXNlZCBmb3IgdGVzdHMgYW5kIGV4YW1pbmF0aW9ucyB3aGljaCBhcmUgY2FycmllZCBvdXQgaW4gdGhlIGV4cGVyaW1lbnRhbCBzdGFnZSBhbmQgcGlsb3QgbG90IHN0YWdlLiBUaGVzZSBpbmNsdWRlIGZpdHRpbmcgc2FtcGxlcywgcHJvdG90eXBlIHNhbXBsZXMgYW5kIGludGVybWVkaWF0ZSBzYW1wbGVzLiAtICAgICAgU2FtcGxlcyB1c2VkIHRvIHByb3ZlIHRoYXQgdGhlIHF1YWxpdHkgaXMgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBxdWFsaXR5IHJlcXVpcmVtZW50cyAoZGltZW5zaW9ucywgbWF0ZXJpYWwgYW5kIHBlcmZvcm1hbmNlIHNwZWNpZmljYXRpb24pLiBUaGVzZSBpbmNsdWRlIGluaXRpYWwgc2FtcGxlcyBhbmQgcmVmZXJlbmNlIHNhbXBsZXMgYW5kLCBpZiBuZWNlc3NhcnksIGludGVybWVkaWF0ZSBzYW1wbGVzLiBOT1RFICAgICAgIFNlZSA8ZW0+SVNPPC9lbT4gMzUzNCAoYWxsIHBhcnRzKSBhbmQgPGVtPklTTzwvZW0+IDkwMDAgZm9yIGZ1cnRoZXIgaW5mb3JtYXRpb24uIC0gICAgICBTYW1wbGVzIHdoaWNoIGdpdmUgc2VsZWN0aXZlIGluZm9ybWF0aW9uIGFib3V0IHBhcnRpY3VsYXIgcXVhbGl0eSBjaGFyYWN0ZXJpc3RpY3Mgb2YgYSBwbGFpbiBiZWFyaW5nLCByZWxhdGluZyB0byB0aGVpciBjb25mb3JtaXR5IHdpdGggdGhlIHNwZWNpZmljYXRpb25zLiBUaGVzZSBpbnZvbHZlIHJlZmVyZW5jZSBhbmQgY2hhcmFjdGVyaXN0aWMgbW9kaWZpY2F0aW9uIHNhbXBsZXMuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA2Lzg2LzY4NjI0IiwidXVpZCI6IjY4OWNkMWZjLTEwODQtNDllNy04MGVkLTgyYWE4MGU5NWFhZSIsInRpdGxlIjoiSVNPIDEyMzAyOjIwMTcgUGxhaW4gYmVhcmluZ3Mg4oCUIFF1YWxpdHkgY2hhcmFjdGVyaXN0aWNzIOKAlCBTdGF0aXN0aWNhbCBwcm9jZXNzIGNvbnRyb2wgKFNQQykiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIyLCJvcmRlciI6MTEsInRleHQiOiJJU08gMTIzMDI6MjAxNyBzcGVjaWZpZXMgZm9yIHBsYWluIGJlYXJpbmdzIChleGNlcHQgdGhpY2std2FsbGVkIGhhbGYtYmVhcmluZ3MpIHRob3NlIHF1YWxpdHkgY2hhcmFjdGVyaXN0aWNzIGluIGFjY29yZGFuY2Ugd2l0aCBJU08gMTIzMDEgd2hpY2ggY2FuIGJlIHVzZWQgdG8gcmVndWxhdGUgYW5kIGNvbnRyb2wgYSBwcm9kdWN0aW9uIHByb2Nlc3Mgb24gdGhlIGJhc2lzIG9mIHN0YXRpc3RpY2FsIHByb2Nlc3MgY29udHJvbCAoU1BDKS4gSXQgY292ZXJzIGRpbWVuc2lvbmFsIHZhcmlhYmxlcyBidXQgZG9lcyBub3QgdGFrZSBhY2NvdW50IG9mIGF0dHJpYnV0ZXMuICIsIm9iamVjdElEIjoiNjg2MjRfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+MDI6MjAxNyBQbGFpbiBiZWFyaW5ncyDigJQgUXVhbGl0eSBjaGFyYWN0ZXJpc3RpY3Mg4oCUIFN0YXRpc3RpY2FsIHByb2Nlc3MgY29udHJvbCAoU1BDKSIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+MDI6MjAxNyBzcGVjaWZpZXMgZm9yIHBsYWluIGJlYXJpbmdzIChleGNlcHQgdGhpY2std2FsbGVkIGhhbGYtYmVhcmluZ3MpIHRob3NlIHF1YWxpdHkgY2hhcmFjdGVyaXN0aWNzIGluIGFjY29yZGFuY2Ugd2l0aCA8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+MDEgd2hpY2ggY2FuIGJlIHVzZWQgdG8gcmVndWxhdGUgYW5kIGNvbnRyb2wgYSBwcm9kdWN0aW9uIHByb2Nlc3Mgb24gdGhlIGJhc2lzIG9mIHN0YXRpc3RpY2FsIHByb2Nlc3MgY29udHJvbCAoU1BDKS4gSXQgY292ZXJzIGRpbWVuc2lvbmFsIHZhcmlhYmxlcyBidXQgZG9lcyBub3QgdGFrZSBhY2NvdW50IG9mIGF0dHJpYnV0ZXMuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA1LzEzLzUxMzk1IiwidXVpZCI6ImVjNzdhZGQ5LWY2MjUtNDhiZC04YmU5LWQ2YTQ3OTA2NDJmOCIsInRpdGxlIjoiSVNPIDEyMzg0OjIwMTAgQWVyb3NwYWNlIOKAlCBSZXF1aXJlbWVudHMgZm9yIGRpZ2l0YWwgZXF1aXBtZW50IGZvciBtZWFzdXJlbWVudHMgb2YgYWlyY3JhZnQgZWxlY3RyaWNhbCBwb3dlciBjaGFyYWN0ZXJpc3RpY3MiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIyLCJvcmRlciI6MTEsInRleHQiOiJJU08gMTIzODQ6MjAxMCBzcGVjaWZpZXMgdGhlIHJlcXVpcmVtZW50cyBmb3IgZGlnaXRhbCBtZWFzdXJpbmcgbWV0aG9kcyBhbmQgZGlnaXRhbCBtZWFzdXJpbmcgZXF1aXBtZW50IGZvciBhaXJjcmFmdCBlbGVjdHJpY2FsIHBvd2VyIGNoYXJhY3RlcmlzdGljcywgaW5jbHVkaW5nIGFjY3VyYWN5LCBhbGdvcml0aG1zIGFuZCBkaWdpdGFsIG1lYXN1cmluZyBlcXVpcG1lbnQuIFRoZSBtZWFzdXJpbmcgZXF1aXBtZW50IHNob3VsZCBiZSBhcHBsaWVkIG1haW5seSBmb3IgdGhlIHVzZSBvZiBsYWJvcmF0b3J5IG9yIHJpZyB0ZXN0cy4gSVNPIDEyMzg0OjIwMTAgY2FuIGJlIGFwcGxpZWQgdG8gZGlnaXRhbCBtZWFzdXJpbmcgZXF1aXBtZW50IHdoaWNoIGlzIGludm9sdmVkIGluIHRoZSBtZWFzdXJlbWVudCBvZiBwb3dlciBlbGVjdHJpY2FsIGNoYXJhY3RlcmlzdGljcyBvZiB0aGUgcG93ZXIgc3VwcGx5IHN5c3RlbSwgcG93ZXIgZGlzdHJpYnV0aW5nIHN5c3RlbXMgYW5kIHRoZSB1dGlsaXphdGlvbiBvZiBlcXVpcG1lbnQgaW4gYWlyY3JhZnRzLiAiLCJvYmplY3RJRCI6IjUxMzk1XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjg0OjIwMTAgQWVyb3NwYWNlIOKAlCBSZXF1aXJlbWVudHMgZm9yIGRpZ2l0YWwgZXF1aXBtZW50IGZvciBtZWFzdXJlbWVudHMgb2YgYWlyY3JhZnQgZWxlY3RyaWNhbCBwb3dlciBjaGFyYWN0ZXJpc3RpY3MiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjg0OjIwMTAgc3BlY2lmaWVzIHRoZSByZXF1aXJlbWVudHMgZm9yIGRpZ2l0YWwgbWVhc3VyaW5nIG1ldGhvZHMgYW5kIGRpZ2l0YWwgbWVhc3VyaW5nIGVxdWlwbWVudCBmb3IgYWlyY3JhZnQgZWxlY3RyaWNhbCBwb3dlciBjaGFyYWN0ZXJpc3RpY3MsIGluY2x1ZGluZyBhY2N1cmFjeSwgYWxnb3JpdGhtcyBhbmQgZGlnaXRhbCBtZWFzdXJpbmcgZXF1aXBtZW50LiBUaGUgbWVhc3VyaW5nIGVxdWlwbWVudCBzaG91bGQgYmUgYXBwbGllZCBtYWlubHkgZm9yIHRoZSB1c2Ugb2YgbGFib3JhdG9yeSBvciByaWcgdGVzdHMuIDxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT44NDoyMDEwIGNhbiBiZSBhcHBsaWVkIHRvIGRpZ2l0YWwgbWVhc3VyaW5nIGVxdWlwbWVudCB3aGljaCBpcyBpbnZvbHZlZCBpbiB0aGUgbWVhc3VyZW1lbnQgb2YgcG93ZXIgZWxlY3RyaWNhbCBjaGFyYWN0ZXJpc3RpY3Mgb2YgdGhlIHBvd2VyIHN1cHBseSBzeXN0ZW0sIHBvd2VyIGRpc3RyaWJ1dGluZyBzeXN0ZW1zIGFuZCB0aGUgdXRpbGl6YXRpb24gb2YgZXF1aXBtZW50IGluIGFpcmNyYWZ0cy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDMvNjUvMzY1MTEiLCJ1dWlkIjoiNTkzMTllMDAtZGM1NS00YjI2LWI1ZmMtOTc1M2ExMzIxOWU5IiwidGl0bGUiOiJJU08gMTIzMDE6MjAwNyBQbGFpbiBiZWFyaW5ncyDigJQgUXVhbGl0eSBjb250cm9sIHRlY2huaXF1ZXMgYW5kIGluc3BlY3Rpb24gb2YgZ2VvbWV0cmljYWwgYW5kIG1hdGVyaWFsIHF1YWxpdHkgY2hhcmFjdGVyaXN0aWNzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMiwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDEyMzAxOjIwMDcgc3BlY2lmaWVzIHF1YWxpdHkgY29udHJvbCB0ZWNobmlxdWVzIGFuZCBpbnNwZWN0aW9uIG9mIHRoZSBnZW9tZXRyaWNhbCBhbmQgbWF0ZXJpYWwgcXVhbGl0eSBjaGFyYWN0ZXJpc3RpY3Mgb2YgdGhlIGZvbGxvd2luZyB0eXBlcyBvZiBwbGFpbiBiZWFyaW5nczogdGhpbi13YWxsZWQgaGFsZi1iZWFyaW5ncyB3aXRoIG9yIHdpdGhvdXQgZmxhbmdlLCBhcyBzcGVjaWZpZWQgaW4gSVNPIDM1NDg7IG1ldGFsbGljIHRoaWNrLXdhbGxlZCBoYWxmLWJlYXJpbmdzICh3aXRoIGFuZCB3aXRob3V0IGZsYW5nZSkgdGhhdCBhcmUgbWFudWZhY3R1cmVkIGFzIGhhbHZlcyBidXQgdGhhdCBhcmUgbmVjZXNzYXJpbHkgaW50ZXJjaGFuZ2VhYmxlIGFuZCBoYXZlIHRoZSByYXRpbyBzIDMgOiBEIG8gPiAwLDExOyB3cmFwcGVkIGJ1c2hlcywgYXMgc3BlY2lmaWVkIGluIElTTyAzNTQ3OyB1bnNwbGl0IG1ldGFsbGljIGJ1c2hlcyAod2l0aCBhbmQgd2l0aG91dCBmbGFuZ2UpIG1hZGUgZnJvbSBzb2xpZCBhbmQgbXVsdGlsYXllciBtYXRlcmlhbHMgYW5kIHdpdGggb3V0c2lkZSBkaWFtZXRlcnMgdXAgdG8gMjMwIG1tOyBzb2xpZCBwb2x5bWVyIGJ1c2hlcyAod2l0aCBhbmQgd2l0aG91dCBmbGFuZ2UpIHdpdGggaW5zaWRlIGRpYW1ldGVycyB1cCB0byAyMDAgbW07IHJpbmctdHlwZSB0aHJ1c3Qgd2FzaGVycyBhbmQgcHJlc3NlZCBiaW1ldGFsbGljIGhhbGYtdGhydXN0IHdhc2hlcnMsIGFzIHNwZWNpZmllZCBpbiBJU08gNjUyNSBhbmQgSVNPIDY1MjYsIHJlc3BlY3RpdmVseTsgYW5kIGJ1c2hlcyBtYWRlIGZyb20gc2ludGVyZWQgbWF0ZXJpYWwsIGFzIHNwZWNpZmllZCBpbiBJU08gMjc5NS4gIiwib2JqZWN0SUQiOiIzNjUxMV8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT4wMToyMDA3IFBsYWluIGJlYXJpbmdzIOKAlCBRdWFsaXR5IGNvbnRyb2wgdGVjaG5pcXVlcyBhbmQgaW5zcGVjdGlvbiBvZiBnZW9tZXRyaWNhbCBhbmQgbWF0ZXJpYWwgcXVhbGl0eSBjaGFyYWN0ZXJpc3RpY3MiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjAxOjIwMDcgc3BlY2lmaWVzIHF1YWxpdHkgY29udHJvbCB0ZWNobmlxdWVzIGFuZCBpbnNwZWN0aW9uIG9mIHRoZSBnZW9tZXRyaWNhbCBhbmQgbWF0ZXJpYWwgcXVhbGl0eSBjaGFyYWN0ZXJpc3RpY3Mgb2YgdGhlIGZvbGxvd2luZyB0eXBlcyBvZiBwbGFpbiBiZWFyaW5nczogdGhpbi13YWxsZWQgaGFsZi1iZWFyaW5ncyB3aXRoIG9yIHdpdGhvdXQgZmxhbmdlLCBhcyBzcGVjaWZpZWQgaW4gPGVtPklTTzwvZW0+IDM1NDg7IG1ldGFsbGljIHRoaWNrLXdhbGxlZCBoYWxmLWJlYXJpbmdzICh3aXRoIGFuZCB3aXRob3V0IGZsYW5nZSkgdGhhdCBhcmUgbWFudWZhY3R1cmVkIGFzIGhhbHZlcyBidXQgdGhhdCBhcmUgbmVjZXNzYXJpbHkgaW50ZXJjaGFuZ2VhYmxlIGFuZCBoYXZlIHRoZSByYXRpbyBzIDMgOiBEIG8gPiAwLDExOyB3cmFwcGVkIGJ1c2hlcywgYXMgc3BlY2lmaWVkIGluIDxlbT5JU088L2VtPiAzNTQ3OyB1bnNwbGl0IG1ldGFsbGljIGJ1c2hlcyAod2l0aCBhbmQgd2l0aG91dCBmbGFuZ2UpIG1hZGUgZnJvbSBzb2xpZCBhbmQgbXVsdGlsYXllciBtYXRlcmlhbHMgYW5kIHdpdGggb3V0c2lkZSBkaWFtZXRlcnMgdXAgdG8gMjMwIG1tOyBzb2xpZCBwb2x5bWVyIGJ1c2hlcyAod2l0aCBhbmQgd2l0aG91dCBmbGFuZ2UpIHdpdGggaW5zaWRlIGRpYW1ldGVycyB1cCB0byAyMDAgbW07IHJpbmctdHlwZSB0aHJ1c3Qgd2FzaGVycyBhbmQgcHJlc3NlZCBiaW1ldGFsbGljIGhhbGYtdGhydXN0IHdhc2hlcnMsIGFzIHNwZWNpZmllZCBpbiA8ZW0+SVNPPC9lbT4gNjUyNSBhbmQgPGVtPklTTzwvZW0+IDY1MjYsIHJlc3BlY3RpdmVseTsgYW5kIGJ1c2hlcyBtYWRlIGZyb20gc2ludGVyZWQgbWF0ZXJpYWwsIGFzIHNwZWNpZmllZCBpbiA8ZW0+SVNPPC9lbT4gMjc5NS4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDIvNTkvMjU5NDUiLCJ1dWlkIjoiZmU4MmViOTItNzZmMi00ZWFiLWI4ZjEtYjZiMTJhMGVkMWM5IiwidGl0bGUiOiJJU08gMTIzNTMtMjoyMDAzIFJvYWQgdmVoaWNsZXMg4oCUIFRyYWZmaWMgYWNjaWRlbnQgYW5hbHlzaXMg4oCUIFBhcnQgMjogR3VpZGVsaW5lcyBmb3IgdGhlIHVzZSBvZiBpbXBhY3Qgc2V2ZXJpdHkgbWVhc3VyZXMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIyLCJvcmRlciI6MTEsInRleHQiOiJJU08gMTIzNTMtMjoyMDAzIGRlc2NyaWJlcyB0aGUgc3VpdGFiaWxpdHkgb2YgdmFyaW91cyBtZWFzdXJlcyBmb3IgdGhlIGRldGVybWluYXRpb24gb2YgaW1wYWN0IHNldmVyaXR5IGluIHJvYWQgdmVoaWNsZSBhY2NpZGVudHMuIEl0IGFsc28gc3VtbWFyaXplcyB0aGUgbWFpbiBjaGFyYWN0ZXJpc3RpY3Mgb2YgdGhlIG1ldGhvZHMgdXNlZCBmb3IgZGV0ZXJtaW5pbmcgaW1wYWN0IHNldmVyaXR5LiAiLCJvYmplY3RJRCI6IjI1OTQ1XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjUzLTI6MjAwMyBSb2FkIHZlaGljbGVzIOKAlCBUcmFmZmljIGFjY2lkZW50IGFuYWx5c2lzIOKAlCBQYXJ0IDI6IEd1aWRlbGluZXMgZm9yIHRoZSB1c2Ugb2YgaW1wYWN0IHNldmVyaXR5IG1lYXN1cmVzIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT41My0yOjIwMDMgZGVzY3JpYmVzIHRoZSBzdWl0YWJpbGl0eSBvZiB2YXJpb3VzIG1lYXN1cmVzIGZvciB0aGUgZGV0ZXJtaW5hdGlvbiBvZiBpbXBhY3Qgc2V2ZXJpdHkgaW4gcm9hZCB2ZWhpY2xlIGFjY2lkZW50cy4gSXQgYWxzbyBzdW1tYXJpemVzIHRoZSBtYWluIGNoYXJhY3RlcmlzdGljcyBvZiB0aGUgbWV0aG9kcyB1c2VkIGZvciBkZXRlcm1pbmluZyBpbXBhY3Qgc2V2ZXJpdHkuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA3Lzc0Lzc3NDM5IiwidXVpZCI6IjVkYzMzYzBkLTYxMWEtNDkzMS04YTdmLWE4ZWY4ZDNjMTE1ZSIsInRpdGxlIjoiSVNPIDEyMzQ1OjIwMjEgRGllc2VsIGVuZ2luZXMg4oCUIENsZWFubGluZXNzIGFzc2Vzc21lbnQgb2YgZnVlbCBpbmplY3Rpb24gZXF1aXBtZW50Iiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMSwib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgY2xlYW5saW5lc3MgYXNzZXNzbWVudCBwcm9jZWR1cmVzIGZvciBldmFsdWF0aW5nIHRoZSBhbW91bnQgb2YgZGVicmlzIGZvdW5kIHdpdGhpbiB0aGUgY2xlYW4gc2lkZSBvZiBkaWVzZWwgZnVlbCBpbmplY3Rpb24gYXNzZW1ibGllcywgd2hpY2ggY291bGQgbGVhZCB0byBhIHJlZHVjdGlvbiBpbiB0aGUgc3lzdGVt4oCZcyBvcGVyYXRpb25hbCBlZmZlY3RpdmVuZXNzLiBXaGlsZSBvdGhlciBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkcywgZS5nLiBJU0/CoDE2MjMyLCByZWxhdGUgdG8gY2xlYW5saW5lc3Mgb2YgY29tcG9uZW50cyB1c2VkIGluIHJvYWQgdmVoaWNsZSBmbHVpZCBjaXJjdWl0cywgdGhpcyBkb2N1bWVudCBpcyBmb2N1c2VkIG9uIGRpZXNlbCBmdWVsIGluamVjdGlvbiBhc3NlbWJsaWVzIGFzIHN1cHBsaWVkIHRvIGRpZXNlbCBlbmdpbmUgbWFudWZhY3R1cmVycyBvciB0aGUgc2VydmljZSBtYXJrZXQuICIsIm9iamVjdElEIjoiNzc0MzlfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+NDU6MjAyMSBEaWVzZWwgZW5naW5lcyDigJQgQ2xlYW5saW5lc3MgYXNzZXNzbWVudCBvZiBmdWVsIGluamVjdGlvbiBlcXVpcG1lbnQiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgY2xlYW5saW5lc3MgYXNzZXNzbWVudCBwcm9jZWR1cmVzIGZvciBldmFsdWF0aW5nIHRoZSBhbW91bnQgb2YgZGVicmlzIGZvdW5kIHdpdGhpbiB0aGUgY2xlYW4gc2lkZSBvZiBkaWVzZWwgZnVlbCBpbmplY3Rpb24gYXNzZW1ibGllcywgd2hpY2ggY291bGQgbGVhZCB0byBhIHJlZHVjdGlvbiBpbiB0aGUgc3lzdGVt4oCZcyBvcGVyYXRpb25hbCBlZmZlY3RpdmVuZXNzLiBXaGlsZSBvdGhlciBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkcywgZS5nLiA8ZW0+SVNPPC9lbT7CoDE2MjMyLCByZWxhdGUgdG8gY2xlYW5saW5lc3Mgb2YgY29tcG9uZW50cyB1c2VkIGluIHJvYWQgdmVoaWNsZSBmbHVpZCBjaXJjdWl0cywgdGhpcyBkb2N1bWVudCBpcyBmb2N1c2VkIG9uIGRpZXNlbCBmdWVsIGluamVjdGlvbiBhc3NlbWJsaWVzIGFzIHN1cHBsaWVkIHRvIGRpZXNlbCBlbmdpbmUgbWFudWZhY3R1cmVycyBvciB0aGUgc2VydmljZSBtYXJrZXQuICIsIm1hdGNoTGV2ZWwiOiJwYXJ0aWFsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzAzLzQwLzM0MDI2IiwidXVpZCI6IjZmNmE5ZDg4LWVkZTUtNGU2My1hM2FkLWI5MjdjMzAxN2M3NCIsInRpdGxlIjoiSVNPIDEyMzU3LTI6MjAwNyBDb21tZXJjaWFsIHJvYWQgdmVoaWNsZXMg4oCUIERyYXdiYXIgY291cGxpbmdzIGFuZCBleWVzIGZvciByaWdpZCBkcmF3YmFycyDigJQgUGFydCAyOiBTdHJlbmd0aCB0ZXN0cyBmb3Igc3BlY2lhbCBhcHBsaWNhdGlvbnMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIxLCJvcmRlciI6MTEsInRleHQiOiJJU08gMTIzNTctMjoyMDA3IGxheXMgZG93biB0ZXN0IGNvbmRpdGlvbnMgYW5kIHN0cmVuZ3RoIHJlcXVpcmVtZW50cyB0byBiZSBtZXQgYnk6IGRyYXdiYXIgY291cGxpbmdzIGFuZCBjb3JyZXNwb25kaW5nIGRyYXdiYXIgZXllcyBmb3IgcmlnaWQgZHJhd2JhcnMgd2hpY2ggYXJlIHByb3ZpZGVkIGZvciB1c2Ugb24gcmlnaWQgZHJhd2JhciB0cmFpbGVycyB3aXRoIGEgbWF4aW11bSBkZXNpZ24gdG90YWwgbWFzcyBleGNlZWRpbmcgMyw1IHRvbm5lcyBhbmQgYSB2ZXJ0aWNhbCBzdGF0aWMgbG9hZCBleGNlZWRpbmcgMTAgJSBvZiB0aGVpciBkZXNpZ24gdG90YWwgbWFzcywgYW5kL29yIGEgdmVydGljYWwgc3RhdGljIGxvYWQgZ3JlYXRlciB0aGFuIDEgMDAwIGtnIGFuZCB1cCB0byAyIDAwMCBrZzsgZHJhd2JhciBjb3VwbGluZ3MgYW5kIGNvcnJlc3BvbmRpbmcgZHJhd2JhciBleWVzIGZvciB1c2Ugb24gdmVoaWNsZSB0cmFuc3BvcnQgY29tYmluYXRpb25zLCBwcm92aWRlZCBmb3IgYSB0ZWNobmljYWwgbWFzcyBleGNlZWRpbmcgMyw1IHRvbm5lcy4gIiwib2JqZWN0SUQiOiIzNDAyNl8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT41Ny0yOjIwMDcgQ29tbWVyY2lhbCByb2FkIHZlaGljbGVzIOKAlCBEcmF3YmFyIGNvdXBsaW5ncyBhbmQgZXllcyBmb3IgcmlnaWQgZHJhd2JhcnMg4oCUIFBhcnQgMjogU3RyZW5ndGggdGVzdHMgZm9yIHNwZWNpYWwgYXBwbGljYXRpb25zIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT41Ny0yOjIwMDcgbGF5cyBkb3duIHRlc3QgY29uZGl0aW9ucyBhbmQgc3RyZW5ndGggcmVxdWlyZW1lbnRzIHRvIGJlIG1ldCBieTogZHJhd2JhciBjb3VwbGluZ3MgYW5kIGNvcnJlc3BvbmRpbmcgZHJhd2JhciBleWVzIGZvciByaWdpZCBkcmF3YmFycyB3aGljaCBhcmUgcHJvdmlkZWQgZm9yIHVzZSBvbiByaWdpZCBkcmF3YmFyIHRyYWlsZXJzIHdpdGggYSBtYXhpbXVtIGRlc2lnbiB0b3RhbCBtYXNzIGV4Y2VlZGluZyAzLDUgdG9ubmVzIGFuZCBhIHZlcnRpY2FsIHN0YXRpYyBsb2FkIGV4Y2VlZGluZyAxMCAlIG9mIHRoZWlyIGRlc2lnbiB0b3RhbCBtYXNzLCBhbmQvb3IgYSB2ZXJ0aWNhbCBzdGF0aWMgbG9hZCBncmVhdGVyIHRoYW4gMSAwMDAga2cgYW5kIHVwIHRvIDIgMDAwIGtnOyBkcmF3YmFyIGNvdXBsaW5ncyBhbmQgY29ycmVzcG9uZGluZyBkcmF3YmFyIGV5ZXMgZm9yIHVzZSBvbiB2ZWhpY2xlIHRyYW5zcG9ydCBjb21iaW5hdGlvbnMsIHByb3ZpZGVkIGZvciBhIHRlY2huaWNhbCBtYXNzIGV4Y2VlZGluZyAzLDUgdG9ubmVzLiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMC8xMi8xMjEyIiwidXVpZCI6IjdmYTNjY2I2LTU1NjUtNDVhMi1iMDM0LWY3NjlhNzFmMWE4OSIsInRpdGxlIjoiSVNPIDEyMzU3LTE6MTk5OSBDb21tZXJjaWFsIHJvYWQgdmVoaWNsZXMg4oCUIERyYXdiYXIgY291cGxpbmdzIGFuZCBleWVzIGZvciByaWdpZCBkcmF3YmFycyDigJQgUGFydCAxOiBTdHJlbmd0aCB0ZXN0cyBmb3IgZ2VuZXJhbCBjYXJnbyBjZW50cmUtYXhsZSB0cmFpbGVycyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjEsIm9yZGVyIjoxMSwidGV4dCI6IlRoaXMgSW50ZXJuYXRpb25hbCBTdGFuZGFyZCBzcGVjaWZpZXMgdGhlIHRlc3QgY29uZGl0aW9ucyBhbmQgc3RyZW5ndGggcmVxdWlyZW1lbnRzIHRvIGJlIG1ldCBieSBkcmF3YmFyIGNvdXBsaW5ncyAoc2VlIElTTyAzNTg0KSBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgZHJhd2JhciBleWVzIChzZWUgSVNPIDExMDIgYW5kIElTTyA4NzU1KSBmb3IgcmlnaWQgZHJhd2JhcnMsIHdoaWNoIGFyZSBwcm92aWRlZCBmb3IgdXNlIHdpdGggY2VudHJlLWF4bGUgdHJhaWxlcnMgd2l0aCBhIHRlY2huaWNhbCBtYXhpbXVtIG1hc3MgQyBleGNlZWRpbmcgMyw1IHQgKHRvbm5lcykuICIsIm9iamVjdElEIjoiMTIxMl8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT41Ny0xOjE5OTkgQ29tbWVyY2lhbCByb2FkIHZlaGljbGVzIOKAlCBEcmF3YmFyIGNvdXBsaW5ncyBhbmQgZXllcyBmb3IgcmlnaWQgZHJhd2JhcnMg4oCUIFBhcnQgMTogU3RyZW5ndGggdGVzdHMgZm9yIGdlbmVyYWwgY2FyZ28gY2VudHJlLWF4bGUgdHJhaWxlcnMiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIHNwZWNpZmllcyB0aGUgdGVzdCBjb25kaXRpb25zIGFuZCBzdHJlbmd0aCByZXF1aXJlbWVudHMgdG8gYmUgbWV0IGJ5IGRyYXdiYXIgY291cGxpbmdzIChzZWUgPGVtPklTTzwvZW0+IDM1ODQpIGFuZCB0aGUgY29ycmVzcG9uZGluZyBkcmF3YmFyIGV5ZXMgKHNlZSA8ZW0+SVNPPC9lbT4gMTEwMiBhbmQgPGVtPklTTzwvZW0+IDg3NTUpIGZvciByaWdpZCBkcmF3YmFycywgd2hpY2ggYXJlIHByb3ZpZGVkIGZvciB1c2Ugd2l0aCBjZW50cmUtYXhsZSB0cmFpbGVycyB3aXRoIGEgdGVjaG5pY2FsIG1heGltdW0gbWFzcyBDIGV4Y2VlZGluZyAzLDUgdCAodG9ubmVzKS4gIiwibWF0Y2hMZXZlbCI6InBhcnRpYWwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDAvMTEvMTE5NCIsInV1aWQiOiJlOTE3N2FhOS0wZDE1LTQwZjEtYjExNy04NWE4OWVjY2NmNmYiLCJ0aXRsZSI6IklTTyAxMjM2NjoyMDAxIFR3by13aGVlbGVkIG1vcGVkcyDigJQgQW50aWxvY2sgYnJha2luZyBzeXN0ZW1zIChBQlMpIOKAlCBUZXN0cyBhbmQgbWVhc3VyZW1lbnQgbWV0aG9kcyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjEsIm9yZGVyIjoxMSwidGV4dCI6IlRoaXMgSW50ZXJuYXRpb25hbCBTdGFuZGFyZCBzcGVjaWZpZXMgdGVzdHMgYW5kIG1lYXN1cmVtZW50IG1ldGhvZHMgZm9yIHNvbG8gbW9wZWRzIChkZWZpbmVkIGluIElTTyAzODMzKSBlcXVpcHBlZCB3aXRoIG9uZSBvciBtb3JlIGFudGlsb2NrLCBhbmQgb25lIG9yIG1vcmUgaW5kZXBlbmRlbnQsIGJyYWtpbmcgc3lzdGVtcy4gSXRzIHB1cnBvc2UgaXMgdG8gZXN0YWJsaXNoIHVuaWZvcm0gd29ybGR3aWRlIHRlc3QgcHJvY2VkdXJlcyBmb3Igc3VjaCBzeXN0ZW1zLiBUaGlzIEludGVybmF0aW9uYWwgU3RhbmRhcmQgc2V0cyBvdXQgcHJvY2VkdXJlcyBmb3IgdGhlIGZvbGxvd2luZyB0eXBlcyBvZiBzdHJhaWdodC1saW5lIGJyYWtpbmcgdGVzdHM6IO+jpyB1dGlsaXphdGlvbi1vZi1hZGhlc2lvbiB0ZXN0OyDvo6cgd2hlZWwtbG9jayBjaGVjayB0ZXN0OyDvo6cgdGVzdHMgd2l0aCBBQlMgZmFpbGVkOyDvo6cgY29tcGxlbWVudGFyeSB0ZXN0cyB0aGF0IGNvdWxkIGFzc2lzdCBpbiB0aGUgYXNzZXNzbWVudCBhbmQgZGV2ZWxvcG1lbnQgb2YgYnJha2luZyBzeXN0ZW1zLiBOT1RFIFJlZmVyZW5jZSBpcyBtYWRlIGluIHRoaXMgSW50ZXJuYXRpb25hbCBTdGFuZGFyZCB0byBMLWNhdGVnb3J5IHZlaGljbGVzLCBnZW5lcmFsbHkgcmVmZXJyaW5nIHRvIHNvbG8gbW9wZWRzIChMMSksIGRyYXduIGZyb20gUmVndWxhdGlvbiBOby4gNzggYW5kIHRoZSBDb25zb2xpZGF0ZWQgUmVzb2x1dGlvbiBvbiB0aGUgQ29uc3RydWN0aW9uIG9mIFZlaGljbGVzIChSLkUuMykgb2YgdGhlIFVuaXRlZCBOYXRpb25zIEVjb25vbWljIENvbW1pc3Npb24gZm9yIEV1cm9wZSAoVU4tRUNFKS4gVGhlIHZhbHVlcyBnaXZlbiBpbiB0aGlzIEludGVybmF0aW9uYWwgU3RhbmRhcmQgZW5jbG9zZWQgYnkgc3F1YXJlIGJyYWNrZXRzIGFyZSBmcm9tIHRoZSBzYW1lIHJlZ3VsYXRpb24gKDAyIHNlcmllcyBvZiBhbWVuZG1lbnRzKSwgYW5kIGFyZSBpbmNsdWRlZCBmb3IgaW5mb3JtYXRpb24uICIsIm9iamVjdElEIjoiMTE5NF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT42NjoyMDAxIFR3by13aGVlbGVkIG1vcGVkcyDigJQgQW50aWxvY2sgYnJha2luZyBzeXN0ZW1zIChBQlMpIOKAlCBUZXN0cyBhbmQgbWVhc3VyZW1lbnQgbWV0aG9kcyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX0sInRleHQiOnsidmFsdWUiOiJUaGlzIEludGVybmF0aW9uYWwgU3RhbmRhcmQgc3BlY2lmaWVzIHRlc3RzIGFuZCBtZWFzdXJlbWVudCBtZXRob2RzIGZvciBzb2xvIG1vcGVkcyAoZGVmaW5lZCBpbiA8ZW0+SVNPPC9lbT4gMzgzMykgZXF1aXBwZWQgd2l0aCBvbmUgb3IgbW9yZSBhbnRpbG9jaywgYW5kIG9uZSBvciBtb3JlIGluZGVwZW5kZW50LCBicmFraW5nIHN5c3RlbXMuIEl0cyBwdXJwb3NlIGlzIHRvIGVzdGFibGlzaCB1bmlmb3JtIHdvcmxkd2lkZSB0ZXN0IHByb2NlZHVyZXMgZm9yIHN1Y2ggc3lzdGVtcy4gVGhpcyBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIHNldHMgb3V0IHByb2NlZHVyZXMgZm9yIHRoZSBmb2xsb3dpbmcgdHlwZXMgb2Ygc3RyYWlnaHQtbGluZSBicmFraW5nIHRlc3RzOiDvo6cgdXRpbGl6YXRpb24tb2YtYWRoZXNpb24gdGVzdDsg76OnIHdoZWVsLWxvY2sgY2hlY2sgdGVzdDsg76OnIHRlc3RzIHdpdGggQUJTIGZhaWxlZDsg76OnIGNvbXBsZW1lbnRhcnkgdGVzdHMgdGhhdCBjb3VsZCBhc3Npc3QgaW4gdGhlIGFzc2Vzc21lbnQgYW5kIGRldmVsb3BtZW50IG9mIGJyYWtpbmcgc3lzdGVtcy4gTk9URSBSZWZlcmVuY2UgaXMgbWFkZSBpbiB0aGlzIEludGVybmF0aW9uYWwgU3RhbmRhcmQgdG8gTC1jYXRlZ29yeSB2ZWhpY2xlcywgZ2VuZXJhbGx5IHJlZmVycmluZyB0byBzb2xvIG1vcGVkcyAoTDEpLCBkcmF3biBmcm9tIFJlZ3VsYXRpb24gTm8uIDc4IGFuZCB0aGUgQ29uc29saWRhdGVkIFJlc29sdXRpb24gb24gdGhlIENvbnN0cnVjdGlvbiBvZiBWZWhpY2xlcyAoUi5FLjMpIG9mIHRoZSBVbml0ZWQgTmF0aW9ucyBFY29ub21pYyBDb21taXNzaW9uIGZvciBFdXJvcGUgKFVOLUVDRSkuIFRoZSB2YWx1ZXMgZ2l2ZW4gaW4gdGhpcyBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIGVuY2xvc2VkIGJ5IHNxdWFyZSBicmFja2V0cyBhcmUgZnJvbSB0aGUgc2FtZSByZWd1bGF0aW9uICgwMiBzZXJpZXMgb2YgYW1lbmRtZW50cyksIGFuZCBhcmUgaW5jbHVkZWQgZm9yIGluZm9ybWF0aW9uLiAiLCJtYXRjaExldmVsIjoicGFydGlhbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNi84MC82ODA3NSIsInV1aWQiOiJlZjIwMzUyOS02NmM4LTRiY2YtYjBhMS1kMGNiOTRiZTdkYjMiLCJ0aXRsZSI6IklTTyAxMjM1My0xOjIwMjAgUm9hZCB2ZWhpY2xlcyDigJQgVHJhZmZpYyBhY2NpZGVudCBhbmFseXNpcyDigJQgUGFydCAxOiBWb2NhYnVsYXJ5Iiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMCwib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBkb2N1bWVudCBlc3RhYmxpc2hlcyBhIHZvY2FidWxhcnkgcmVsYXRpbmcgdG8gdGhlIGludmVzdGlnYXRpb24gYW5kIGFuYWx5c2lzIG9mIHJvYWQgdHJhZmZpYyBhY2NpZGVudHMgYW5kIHRvIHRoZSBhcHBsaWNhdGlvbiBvZiBhY2NpZGVudCBkYXRhLiBJdCBhbHNvIGxpc3RzIG90aGVyLCBjb21tb25seSB1c2VkIHRlcm1zIGluIHRoZSBkb21haW4uIE5PVEUgICAgQWRkaXRpb25hbCB0ZXJtcyBhbmQgZGVmaW5pdGlvbnMsIHJlbGF0ZWQgdG8gY29uZmlndXJhdGlvbiBhc3BlY3RzIG9mIHJvYWQgdmVoaWNsZSBjb2xsaXNpb25zLCBjYW4gYmUgZm91bmQgaW4gSVNPIDY4MTMuICIsIm9iamVjdElEIjoiNjgwNzVfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+NTMtMToyMDIwIFJvYWQgdmVoaWNsZXMg4oCUIFRyYWZmaWMgYWNjaWRlbnQgYW5hbHlzaXMg4oCUIFBhcnQgMTogVm9jYWJ1bGFyeSIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX0sInRleHQiOnsidmFsdWUiOiJUaGlzIGRvY3VtZW50IGVzdGFibGlzaGVzIGEgdm9jYWJ1bGFyeSByZWxhdGluZyB0byB0aGUgaW52ZXN0aWdhdGlvbiBhbmQgYW5hbHlzaXMgb2Ygcm9hZCB0cmFmZmljIGFjY2lkZW50cyBhbmQgdG8gdGhlIGFwcGxpY2F0aW9uIG9mIGFjY2lkZW50IGRhdGEuIEl0IGFsc28gbGlzdHMgb3RoZXIsIGNvbW1vbmx5IHVzZWQgdGVybXMgaW4gdGhlIGRvbWFpbi4gTk9URSAgICBBZGRpdGlvbmFsIHRlcm1zIGFuZCBkZWZpbml0aW9ucywgcmVsYXRlZCB0byBjb25maWd1cmF0aW9uIGFzcGVjdHMgb2Ygcm9hZCB2ZWhpY2xlIGNvbGxpc2lvbnMsIGNhbiBiZSBmb3VuZCBpbiA8ZW0+SVNPPC9lbT4gNjgxMy4gIiwibWF0Y2hMZXZlbCI6InBhcnRpYWwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDUvOTIvNTkyODkiLCJ1dWlkIjoiNGI2ZDQzZWYtZDUxMC00ODE5LWE1NzAtYzM4ZjEzYTEzZjBkIiwidGl0bGUiOiJJU08gMTIzMTItMjoyMDE1IEV5ZSBhbmQgZmFjZSBwcm90ZWN0aW9uIOKAlCBTdW5nbGFzc2VzIGFuZCByZWxhdGVkIGV5ZXdlYXIg4oCUIFBhcnQgMjogRmlsdGVycyBmb3IgZGlyZWN0IG9ic2VydmF0aW9uIG9mIHRoZSBzdW4iLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIwLCJvcmRlciI6MTEsInRleHQiOiJJU08gMTIzMTItMjoyMDE1IGFwcGxpZXMgdG8gYWxsIGFmb2NhbCAocGxhbm8gcG93ZXIpIHByb2R1Y3RzIGludGVuZGVkIGZvciBkaXJlY3Qgb2JzZXJ2YXRpb24gb2YgdGhlIHN1biwgc3VjaCBhcyBzb2xhciBlY2xpcHNlIHZpZXdpbmcuIElTTyAxMjMxMi0yOjIwMTUgZG9lcyBub3QgYXBwbHkgdG8gdGhlIGZvbGxvd2luZzogYSkgICAgYWZvY2FsIChwbGFubyBwb3dlcikgc3VuZ2xhc3NlcyBhbmQgY2xpcC1vbnMgZm9yIGdlbmVyYWwgdXNlIGludGVuZGVkIGZvciBwcm90ZWN0aW9uIGFnYWluc3Qgc29sYXIgcmFkaWF0aW9uOyBiKSAgICBleWV3ZWFyIGZvciBwcm90ZWN0aW9uIGFnYWluc3QgcmFkaWF0aW9uIGZyb20gYXJ0aWZpY2lhbCBsaWdodCBzb3VyY2VzLCBzdWNoIGFzIHRob3NlIHVzZWQgaW4gc29sYXJpYTsgYykgICAgZXllIHByb3RlY3RvcnMgc3BlY2lmaWNhbGx5IGludGVuZGVkIGZvciBzcG9ydHMgKGUuZy4gc2tpIGdvZ2dsZXMgb3Igb3RoZXIgdHlwZXMpOyBkKSAgICBzdW5nbGFzc2VzIHRoYXQgaGF2ZSBiZWVuIG1lZGljYWxseSBwcmVzY3JpYmVkIGZvciBhdHRlbnVhdGluZyBzb2xhciByYWRpYXRpb247IGUpICAgIHByZXNjcmlwdGlvbiBzdW5nbGFzcyBsZW5zZXMuICIsIm9iamVjdElEIjoiNTkyODlfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+MTItMjoyMDE1IEV5ZSBhbmQgZmFjZSBwcm90ZWN0aW9uIOKAlCBTdW5nbGFzc2VzIGFuZCByZWxhdGVkIGV5ZXdlYXIg4oCUIFBhcnQgMjogRmlsdGVycyBmb3IgZGlyZWN0IG9ic2VydmF0aW9uIG9mIHRoZSBzdW4iLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjEyLTI6MjAxNSBhcHBsaWVzIHRvIGFsbCBhZm9jYWwgKHBsYW5vIHBvd2VyKSBwcm9kdWN0cyBpbnRlbmRlZCBmb3IgZGlyZWN0IG9ic2VydmF0aW9uIG9mIHRoZSBzdW4sIHN1Y2ggYXMgc29sYXIgZWNsaXBzZSB2aWV3aW5nLiA8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+MTItMjoyMDE1IGRvZXMgbm90IGFwcGx5IHRvIHRoZSBmb2xsb3dpbmc6IGEpICAgIGFmb2NhbCAocGxhbm8gcG93ZXIpIHN1bmdsYXNzZXMgYW5kIGNsaXAtb25zIGZvciBnZW5lcmFsIHVzZSBpbnRlbmRlZCBmb3IgcHJvdGVjdGlvbiBhZ2FpbnN0IHNvbGFyIHJhZGlhdGlvbjsgYikgICAgZXlld2VhciBmb3IgcHJvdGVjdGlvbiBhZ2FpbnN0IHJhZGlhdGlvbiBmcm9tIGFydGlmaWNpYWwgbGlnaHQgc291cmNlcywgc3VjaCBhcyB0aG9zZSB1c2VkIGluIHNvbGFyaWE7IGMpICAgIGV5ZSBwcm90ZWN0b3JzIHNwZWNpZmljYWxseSBpbnRlbmRlZCBmb3Igc3BvcnRzIChlLmcuIHNraSBnb2dnbGVzIG9yIG90aGVyIHR5cGVzKTsgZCkgICAgc3VuZ2xhc3NlcyB0aGF0IGhhdmUgYmVlbiBtZWRpY2FsbHkgcHJlc2NyaWJlZCBmb3IgYXR0ZW51YXRpbmcgc29sYXIgcmFkaWF0aW9uOyBlKSAgICBwcmVzY3JpcHRpb24gc3VuZ2xhc3MgbGVuc2VzLiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNC8zNS80MzUwMyIsInV1aWQiOiIzMDUxMWJkOC1hNzRhLTQzM2EtOWQ1YS01NTUxZmY4ZDg1NzAiLCJ0aXRsZSI6IklTTyAxMjMwOjIwMDcgUGhvdG9ncmFwaHkg4oCUIERldGVybWluYXRpb24gb2YgZmxhc2ggZ3VpZGUgbnVtYmVycyBmb3IgZWxlY3Ryb25pYyBmbGFzaCBlcXVpcG1lbnQiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIwLCJvcmRlciI6MTEsInRleHQiOiJJU08gMTIzMDoyMDA3IHNwZWNpZmllcyB0aGUgZGVmaW5pdGlvbiBhbmQgZGV0ZXJtaW5hdGlvbiBvZiB0aGUgSVNPIGd1aWRlIG51bWJlciBvZiBlbGVjdHJvbmljIGZsYXNoIGVxdWlwbWVudC4gSXQgZG9lcyBub3Qgc3BlY2lmeSB0aGUgZGVmaW5pdGlvbnMgYW5kIG1lYXN1cmluZyBtZXRob2RzIGZvciB0aGUgbGlnaHQgb3V0cHV0IG9mIGVsZWN0cm9uaWMgZmxhc2ggZXF1aXBtZW50LCB3aGljaCBhcmUgc3BlY2lmaWVkIGluIElTTyAyODI3LiAiLCJvYmplY3RJRCI6IjQzNTAzXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjA6MjAwNyBQaG90b2dyYXBoeSDigJQgRGV0ZXJtaW5hdGlvbiBvZiBmbGFzaCBndWlkZSBudW1iZXJzIGZvciBlbGVjdHJvbmljIGZsYXNoIGVxdWlwbWVudCIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+MDoyMDA3IHNwZWNpZmllcyB0aGUgZGVmaW5pdGlvbiBhbmQgZGV0ZXJtaW5hdGlvbiBvZiB0aGUgPGVtPklTTzwvZW0+IGd1aWRlIG51bWJlciBvZiBlbGVjdHJvbmljIGZsYXNoIGVxdWlwbWVudC4gSXQgZG9lcyBub3Qgc3BlY2lmeSB0aGUgZGVmaW5pdGlvbnMgYW5kIG1lYXN1cmluZyBtZXRob2RzIGZvciB0aGUgbGlnaHQgb3V0cHV0IG9mIGVsZWN0cm9uaWMgZmxhc2ggZXF1aXBtZW50LCB3aGljaCBhcmUgc3BlY2lmaWVkIGluIDxlbT5JU088L2VtPiAyODI3LiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMy83OC8zNzgyNyIsInV1aWQiOiI5ZmY1MTljMy0xOTU2LTQ5OTctOTFkOS0yMjI0Y2JkN2EwOWEiLCJ0aXRsZSI6IklTTyAxMjMxOToyMDA2IEFlcm9zcGFjZSDigJQgJ1AnIChsb29wIHN0eWxlKSBjbGFtcHMg4oCUIFByb2N1cmVtZW50IHNwZWNpZmljYXRpb24iLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIwLCJvcmRlciI6MTEsInRleHQiOiJJU08gMTIzMTk6MjAwNiBzcGVjaWZpZXMgdGhlIHJlcXVpcmVtZW50cyBmb3IgdGhlIHByb2N1cmVtZW50IGFuZCBxdWFsaXR5IGFzc3VyYW5jZSBvZiAnUCcgKGxvb3Agc3R5bGUpIGNsYW1wcyB1c2VkIGluIHRoZSBpbnN0YWxsYXRpb24gb2YgYWVyb3NwYWNlIGZsdWlkIHN5c3RlbXMuICIsIm9iamVjdElEIjoiMzc4MjdfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+MTk6MjAwNiBBZXJvc3BhY2Ug4oCUICdQJyAobG9vcCBzdHlsZSkgY2xhbXBzIOKAlCBQcm9jdXJlbWVudCBzcGVjaWZpY2F0aW9uIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT4xOToyMDA2IHNwZWNpZmllcyB0aGUgcmVxdWlyZW1lbnRzIGZvciB0aGUgcHJvY3VyZW1lbnQgYW5kIHF1YWxpdHkgYXNzdXJhbmNlIG9mICdQJyAobG9vcCBzdHlsZSkgY2xhbXBzIHVzZWQgaW4gdGhlIGluc3RhbGxhdGlvbiBvZiBhZXJvc3BhY2UgZmx1aWQgc3lzdGVtcy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDcvNDMvNzQzNTYiLCJ1dWlkIjoiZmQyNzM3YzctOTA0Yi00YmY1LTk4ZTYtZjk2MjI2MjlkZDIxIiwidGl0bGUiOiJJU08gMTIzODE6MjAxOSBIZWFsdGggaW5mb3JtYXRpY3Mg4oCUIEV4cGxpY2l0IHRpbWUtcmVsYXRlZCBleHByZXNzaW9ucyBmb3IgaGVhbHRoY2FyZS1zcGVjaWZpYyBwcm9ibGVtcyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMTksIm9yZGVyIjoxMSwidGV4dCI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIGEgc2V0IG9mIHJlcHJlc2VudGF0aW9uYWwgcHJpbWl0aXZlcyBhbmQgc2VtYW50aWMgcmVsYXRpb25zIG5lZWRlZCBmb3IgYW4gdW5hbWJpZ3VvdXMgcmVwcmVzZW50YXRpb24gb2YgZXhwbGljaXQgdGltZS1yZWxhdGVkIGV4cHJlc3Npb25zIGluIGhlYWx0aCBpbmZvcm1hdGljcy4gVGhpcyBkb2N1bWVudCBkb2VzIG5vdCBpbnRyb2R1Y2Ugb3IgZm9yY2UgYSBzcGVjaWZpYyBvbnRvbG9neSBvZiB0aW1lLCBub3IgZG9lcyBpdCBmb3JjZSB0aGUgdXNlIG9mIGEgZml4ZWQgcmVwcmVzZW50YXRpb24gc2NoZW1lIGZvciBzdWNoIGFuIG9udG9sb2d5LiBSYXRoZXIgdGhpcyBkb2N1bWVudCBwcm92aWRlcyBhIHNldCBvZiBwcmluY2lwbGVzIGZvciBzeW50YWN0aWMgYW5kIHNlbWFudGljIHJlcHJlc2VudGF0aW9uIHRoYXQgYWxsb3cgdGhlIGNvbXBhcmFiaWxpdHkgb2Ygc3BlY2lmaWMgb250b2xvZ2llcyBvbiB0aW1lLCBhbmQgdGhlIGV4Y2hhbmdlIG9mIHRpbWUtcmVsYXRlZCBpbmZvcm1hdGlvbiB0aGF0IGlzIGV4cHJlc3NlZCBleHBsaWNpdGx5LiBUaGlzIGRvY3VtZW50IGFwcGxpZXMgdG8gYm90aCB0aGUgcmVwcmVzZW50YXRpb24gb2YgYWN0dWFsIHBoZW5vbWVuYSBvY2N1cnJpbmcgaW4gdGhlIHJlYWwgd29ybGQgKGUuZy4gcmVnaXN0cmF0aW9ucyBpbiBtZWRpY2FsIHJlY29yZHMpIGFuZCB0byB0aGUgZGVzY3JpcHRpb24gb2YgY29uY2VwdHMgKGUuZy4gbWVkaWNhbCBrbm93bGVkZ2UgYmFzZXMpLiBUaGlzIGRvY3VtZW50IGlzIGFwcGxpY2FibGUgdG8gYSkgICAgZGV2ZWxvcGVycyBvZiBtZWRpY2FsIGluZm9ybWF0aW9uIHN5c3RlbXMgd2hlcmUgdGhlcmUgbWlnaHQgYmUgYSBuZWVkIGZvciBleHBsaWNpdCB0aW1lLXJlbGF0ZWQgY29uY2VwdHMgZm9yIGludGVybmFsIG9yZ2FuaXphdGlvbiAoZS5nLiB0ZW1wb3JhbCBkYXRhIGJhc2VzLCB0ZW1wb3JhbCByZWFzb25pbmcgc3lzdGVtcyksIGIpICAgIGluZm9ybWF0aW9uIG1vZGVsbGVycyBvciBrbm93bGVkZ2UgZW5naW5lZXJzIGJ1aWxkaW5nIG1vZGVscyBmb3IgdGhlIHN5c3RlbXMgbWVudGlvbmVkIGluIGEpLCBjKSAgICBleHBlcnRzIGludm9sdmVkIGluIHRoZSBkZXZlbG9wbWVudCBvZiBzZW1hbnRpYyBzdGFuZGFyZHMgb24gcHJlY2lzZSBzdWJkb21haW5zIGluIGhlYWx0aCBjYXJlIHdoZXJlIHRpbWUtcmVsYXRlZCBpbmZvcm1hdGlvbiBuZWVkcyB0byBiZSBjb3ZlcmVkLCAoZS5nLiBpbiB0aGUgc3R1ZHkgb2YgcGF0aG9jaHJvbm9sb2d5LCBpLmUuIHRoZSBkaXNjaXBsaW5lIGRlYWxpbmcgd2l0aCB0aGUgdGltZSBjb3Vyc2Ugb2Ygc3BlY2lmaWMgZGlzZWFzZXMpLCBhbmQgZCkgICAgZGV2ZWxvcGVycyBvZiBpbnRlcmNoYW5nZSBmb3JtYXRzIGZvciBtZXNzYWdlcyBpbiB3aGljaCB0aW1lLXJlbGF0ZWQgaW5mb3JtYXRpb24gaXMgZW1iZWRkZWQuIFRoaXMgZG9jdW1lbnQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZm9yIOKAlCAgICAgICAgICByZXByZXNlbnRpbmcgd2hhdCBpcyB0cnVlIGluIHRpbWUsIOKAlCAgICAgICAgICByZWFzb25pbmcgYWJvdXQgdGltZSwgb3Ig4oCUICAgICAgICAgIHJlcHJlc2VudGF0aW9uIG9mIG1ldHJvbG9naWNhbCB0aW1lLiAiLCJvYmplY3RJRCI6Ijc0MzU2XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjgxOjIwMTkgSGVhbHRoIGluZm9ybWF0aWNzIOKAlCBFeHBsaWNpdCB0aW1lLXJlbGF0ZWQgZXhwcmVzc2lvbnMgZm9yIGhlYWx0aGNhcmUtc3BlY2lmaWMgcHJvYmxlbXMiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgYSBzZXQgb2YgcmVwcmVzZW50YXRpb25hbCBwcmltaXRpdmVzIGFuZCBzZW1hbnRpYyByZWxhdGlvbnMgbmVlZGVkIGZvciBhbiB1bmFtYmlndW91cyByZXByZXNlbnRhdGlvbiBvZiBleHBsaWNpdCB0aW1lLXJlbGF0ZWQgZXhwcmVzc2lvbnMgaW4gaGVhbHRoIGluZm9ybWF0aWNzLiBUaGlzIGRvY3VtZW50IGRvZXMgbm90IGludHJvZHVjZSBvciBmb3JjZSBhIHNwZWNpZmljIG9udG9sb2d5IG9mIHRpbWUsIG5vciBkb2VzIGl0IGZvcmNlIHRoZSB1c2Ugb2YgYSBmaXhlZCByZXByZXNlbnRhdGlvbiBzY2hlbWUgZm9yIHN1Y2ggYW4gb250b2xvZ3kuIFJhdGhlciB0aGlzIGRvY3VtZW50IHByb3ZpZGVzIGEgc2V0IG9mIHByaW5jaXBsZXMgZm9yIHN5bnRhY3RpYyBhbmQgc2VtYW50aWMgcmVwcmVzZW50YXRpb24gdGhhdCBhbGxvdyB0aGUgY29tcGFyYWJpbGl0eSBvZiBzcGVjaWZpYyBvbnRvbG9naWVzIG9uIHRpbWUsIGFuZCB0aGUgZXhjaGFuZ2Ugb2YgdGltZS1yZWxhdGVkIGluZm9ybWF0aW9uIHRoYXQgaXMgZXhwcmVzc2VkIGV4cGxpY2l0bHkuIFRoaXMgZG9jdW1lbnQgYXBwbGllcyB0byBib3RoIHRoZSByZXByZXNlbnRhdGlvbiBvZiBhY3R1YWwgcGhlbm9tZW5hIG9jY3VycmluZyBpbiB0aGUgcmVhbCB3b3JsZCAoZS5nLiByZWdpc3RyYXRpb25zIGluIG1lZGljYWwgcmVjb3JkcykgYW5kIHRvIHRoZSBkZXNjcmlwdGlvbiBvZiBjb25jZXB0cyAoZS5nLiBtZWRpY2FsIGtub3dsZWRnZSBiYXNlcykuIFRoaXMgZG9jdW1lbnQgaXMgYXBwbGljYWJsZSB0byBhKSAgICBkZXZlbG9wZXJzIG9mIG1lZGljYWwgaW5mb3JtYXRpb24gc3lzdGVtcyB3aGVyZSB0aGVyZSBtaWdodCBiZSBhIG5lZWQgZm9yIGV4cGxpY2l0IHRpbWUtcmVsYXRlZCBjb25jZXB0cyBmb3IgaW50ZXJuYWwgb3JnYW5pemF0aW9uIChlLmcuIHRlbXBvcmFsIGRhdGEgYmFzZXMsIHRlbXBvcmFsIHJlYXNvbmluZyBzeXN0ZW1zKSwgYikgICAgaW5mb3JtYXRpb24gbW9kZWxsZXJzIG9yIGtub3dsZWRnZSBlbmdpbmVlcnMgYnVpbGRpbmcgbW9kZWxzIGZvciB0aGUgc3lzdGVtcyBtZW50aW9uZWQgaW4gYSksIGMpICAgIGV4cGVydHMgaW52b2x2ZWQgaW4gdGhlIGRldmVsb3BtZW50IG9mIHNlbWFudGljIHN0YW5kYXJkcyBvbiBwcmVjaXNlIHN1YmRvbWFpbnMgaW4gaGVhbHRoIGNhcmUgd2hlcmUgdGltZS1yZWxhdGVkIGluZm9ybWF0aW9uIG5lZWRzIHRvIGJlIGNvdmVyZWQsIChlLmcuIGluIHRoZSBzdHVkeSBvZiBwYXRob2Nocm9ub2xvZ3ksIGkuZS4gdGhlIGRpc2NpcGxpbmUgZGVhbGluZyB3aXRoIHRoZSB0aW1lIGNvdXJzZSBvZiBzcGVjaWZpYyBkaXNlYXNlcyksIGFuZCBkKSAgICBkZXZlbG9wZXJzIG9mIGludGVyY2hhbmdlIGZvcm1hdHMgZm9yIG1lc3NhZ2VzIGluIHdoaWNoIHRpbWUtcmVsYXRlZCBpbmZvcm1hdGlvbiBpcyBlbWJlZGRlZC4gVGhpcyBkb2N1bWVudCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmb3Ig4oCUICAgICAgICAgIHJlcHJlc2VudGluZyB3aGF0IGlzIHRydWUgaW4gdGltZSwg4oCUICAgICAgICAgIHJlYXNvbmluZyBhYm91dCB0aW1lLCBvciDigJQgICAgICAgICAgcmVwcmVzZW50YXRpb24gb2YgbWV0cm9sb2dpY2FsIHRpbWUuICIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzAwLzE0LzE0NzMiLCJ1dWlkIjoiOTBmMTNiMTEtNmMxZC00MTViLThhOTYtOGUxM2E2MWM0OWVjIiwidGl0bGUiOiJJU08gMTIzNzQ6MTk5NSBBZ3JpY3VsdHVyYWwgaXJyaWdhdGlvbiDigJQgV2lyaW5nIGFuZCBlcXVpcG1lbnQgZm9yIGVsZWN0cmljYWxseSBkcml2ZW4gb3IgY29udHJvbGxlZCBpcnJpZ2F0aW9uIG1hY2hpbmVzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAxOSwib3JkZXIiOjExLCJ0ZXh0IjoiUHJvdmlkZXMgZGV0YWlsZWQgaW5mb3JtYXRpb24gZm9yIHRoZSBhcHBsaWNhdGlvbiBvZiBlbGVjdHJpY2FsIGFwcGFyYXR1cyB0byBlbGVjdHJpY2FsbHkgZHJpdmVuIG9yIGNvbnRyb2xsZWQgYWdyaWN1bHR1cmFsIGlycmlnYXRpb24gbWFjaGluZXMuIENvdmVycyBhbGwgZWxlY3RyaWNhbCBlcXVpcG1lbnQgbmVjZXNzYXJ5IGZyb20gdGhlIHBvaW50IG9mIGNvbm5lY3Rpb24gb2YgZWxlY3RyaWMgcG93ZXIgdG8gdGhlIG1hY2hpbmUuQXBwbGllcyB0byBlbGVjdHJpY2FsIGVxdWlwbWVudCBmb3IgdXNlIG9uIGNpcmN1aXRzIG9wZXJhdGluZyBhdCB2b2x0YWdlcyBmcm9tIDMwIFYgdG8gNjAwIFYuIEludGVuZGVkIHRvIGltcHJvdmUgdGhlIGRlZ3JlZSBvZiBwZXJzb25hbCBzYWZldHkgaW4gb3BlcmF0aW9uIGFuZCBhcHBsaWNhdGlvbiBvZiBwcm9kdWN0cyBhbmQgbWF0ZXJpYWxzLiAiLCJvYmplY3RJRCI6IjE0NzNfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+NzQ6MTk5NSBBZ3JpY3VsdHVyYWwgaXJyaWdhdGlvbiDigJQgV2lyaW5nIGFuZCBlcXVpcG1lbnQgZm9yIGVsZWN0cmljYWxseSBkcml2ZW4gb3IgY29udHJvbGxlZCBpcnJpZ2F0aW9uIG1hY2hpbmVzIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfSwidGV4dCI6eyJ2YWx1ZSI6IlByb3ZpZGVzIGRldGFpbGVkIGluZm9ybWF0aW9uIGZvciB0aGUgYXBwbGljYXRpb24gb2YgZWxlY3RyaWNhbCBhcHBhcmF0dXMgdG8gZWxlY3RyaWNhbGx5IGRyaXZlbiBvciBjb250cm9sbGVkIGFncmljdWx0dXJhbCBpcnJpZ2F0aW9uIG1hY2hpbmVzLiBDb3ZlcnMgYWxsIGVsZWN0cmljYWwgZXF1aXBtZW50IG5lY2Vzc2FyeSBmcm9tIHRoZSBwb2ludCBvZiBjb25uZWN0aW9uIG9mIGVsZWN0cmljIHBvd2VyIHRvIHRoZSBtYWNoaW5lLkFwcGxpZXMgdG8gZWxlY3RyaWNhbCBlcXVpcG1lbnQgZm9yIHVzZSBvbiBjaXJjdWl0cyBvcGVyYXRpbmcgYXQgdm9sdGFnZXMgZnJvbSAzMCBWIHRvIDYwMCBWLiBJbnRlbmRlZCB0byBpbXByb3ZlIHRoZSBkZWdyZWUgb2YgcGVyc29uYWwgc2FmZXR5IGluIG9wZXJhdGlvbiBhbmQgYXBwbGljYXRpb24gb2YgcHJvZHVjdHMgYW5kIG1hdGVyaWFscy4gIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDAvNTgvNTg1NCIsInV1aWQiOiI1ODY5MTA5OC0wNWUzLTQ1ZGItOTUyMC02YTZlYWJhMTFiMjMiLCJ0aXRsZSI6IklTTyAxMjM3OjE5ODEgTXVzdGFyZCBzZWVkIOKAlCBTcGVjaWZpY2F0aW9uIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAxOCwib3JkZXIiOjExLCJ0ZXh0IjoiRXN0YWJsaXNoZXMgdGhlIHJlcXVpcmVtZW50cyBmb3IgdGhpcyBwcm9kdWN0LiBEZXNjcmliZXMgc2FtcGxpbmcsIG1ldGhvZHMgb2YgdGVzdCwgcGFja2luZyBhbmQgbWFya2luZy4gQW5uZXggQSBjb3ZlcnMgdGhlIGRldGVybWluYXRpb24gb2YgbG9zcyBpbiBtYXNzIGF0IDEwMyBkZWdyZWVzIGNlbnRpZ3JhZGUsIEFubmV4IEIgdGhlIGRldGVybWluYXRpb24gb2YgYWxseWwgaXNvdGhpb2N5YW5hdGUsIEFubmV4IEMgdGhlIGRldGVybWluYXRpb24gb2YgcC1oeWRyb3h5YmVuenlsIGlzb3RoaW9jeWFuYXRlIGJ5IG1lYW5zIG9mIHRoZSBjb2xvcmltZXRyaWMgbWV0aG9kLCBBbm5leCBEIHRoZSBkZXRlcm1pbmF0aW9uIG9mIHAtaHlkcm94eWJlbnp5bCBpc290aGlvY3lhbmF0ZSBieSBtZWFucyBvZiB0aGUgYXJnZW50aW1ldHJpYyBtZXRob2QgYW5kIEFubmV4IEUgaW5jbHVkZXMgcmVjb21tZW5kYXRpb25zIGNvbmNlcm5pbmcgc3RvcmFnZSBhbmQgdHJhbnNwb3J0IGNvbmRpdGlvbnMuICIsIm9iamVjdElEIjoiNTg1NF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT43OjE5ODEgTXVzdGFyZCBzZWVkIOKAlCBTcGVjaWZpY2F0aW9uIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfSwidGV4dCI6eyJ2YWx1ZSI6IkVzdGFibGlzaGVzIHRoZSByZXF1aXJlbWVudHMgZm9yIHRoaXMgcHJvZHVjdC4gRGVzY3JpYmVzIHNhbXBsaW5nLCBtZXRob2RzIG9mIHRlc3QsIHBhY2tpbmcgYW5kIG1hcmtpbmcuIEFubmV4IEEgY292ZXJzIHRoZSBkZXRlcm1pbmF0aW9uIG9mIGxvc3MgaW4gbWFzcyBhdCAxMDMgZGVncmVlcyBjZW50aWdyYWRlLCBBbm5leCBCIHRoZSBkZXRlcm1pbmF0aW9uIG9mIGFsbHlsIGlzb3RoaW9jeWFuYXRlLCBBbm5leCBDIHRoZSBkZXRlcm1pbmF0aW9uIG9mIHAtaHlkcm94eWJlbnp5bCBpc290aGlvY3lhbmF0ZSBieSBtZWFucyBvZiB0aGUgY29sb3JpbWV0cmljIG1ldGhvZCwgQW5uZXggRCB0aGUgZGV0ZXJtaW5hdGlvbiBvZiBwLWh5ZHJveHliZW56eWwgaXNvdGhpb2N5YW5hdGUgYnkgbWVhbnMgb2YgdGhlIGFyZ2VudGltZXRyaWMgbWV0aG9kIGFuZCBBbm5leCBFIGluY2x1ZGVzIHJlY29tbWVuZGF0aW9ucyBjb25jZXJuaW5nIHN0b3JhZ2UgYW5kIHRyYW5zcG9ydCBjb25kaXRpb25zLiAiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNS8xMy81MTM4OSIsInV1aWQiOiJlNWIxZTA4OC02YjFiLTRlYjgtYWI0Ni0xZmRiYjU2YTcyNGYiLCJ0aXRsZSI6IklTTyAxMjMxNToyMDEwIEFsdW1pbml1bSBveGlkZSBwcmltYXJpbHkgdXNlZCBmb3IgcHJvZHVjdGlvbiBvZiBhbHVtaW5pdW0g4oCUIE1ldGhvZCBmb3IgY2FsY3VsYXRpbmcgdGhlIEFsMk8zIGNvbnRlbnQgb2Ygc21lbHRlci1ncmFkZSBhbHVtaW5hIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAxOCwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDEyMzE1OjIwMTAgZGVzY3JpYmVzIG1ldGhvZHMgZm9yIGNhbGN1bGF0aW5nIGFuZCByZXBvcnRpbmcgdGhlIEFsMk8zIGNvbnRlbnQgb2Ygc21lbHRlci1ncmFkZSBhbHVtaW5hLCBvbiBlaXRoZXIgYSBkcnkgb3IgaWduaXRlZCBiYXNpcywgZnJvbSB0aGUgcmVzdWx0cyBvZiB0aGUgZGV0ZXJtaW5hdGlvbnMgaW4gYWNjb3JkYW5jZSB3aXRoIElTTyA4MDYgYW5kIEFTIDI4NzkuNy4gIiwib2JqZWN0SUQiOiI1MTM4OV8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT4xNToyMDEwIEFsdW1pbml1bSBveGlkZSBwcmltYXJpbHkgdXNlZCBmb3IgcHJvZHVjdGlvbiBvZiBhbHVtaW5pdW0g4oCUIE1ldGhvZCBmb3IgY2FsY3VsYXRpbmcgdGhlIEFsMk8zIGNvbnRlbnQgb2Ygc21lbHRlci1ncmFkZSBhbHVtaW5hIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT4xNToyMDEwIGRlc2NyaWJlcyBtZXRob2RzIGZvciBjYWxjdWxhdGluZyBhbmQgcmVwb3J0aW5nIHRoZSBBbDJPMyBjb250ZW50IG9mIHNtZWx0ZXItZ3JhZGUgYWx1bWluYSwgb24gZWl0aGVyIGEgZHJ5IG9yIGlnbml0ZWQgYmFzaXMsIGZyb20gdGhlIHJlc3VsdHMgb2YgdGhlIGRldGVybWluYXRpb25zIGluIGFjY29yZGFuY2Ugd2l0aCA8ZW0+SVNPPC9lbT4gODA2IGFuZCBBUyAyODc5LjcuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA1LzEzLzUxMzUwIiwidXVpZCI6ImYxNDcxODBiLWMyNGYtNDZjMS05NjE1LTFlOTIwZDNhZjBkYiIsInRpdGxlIjoiSVNPIDEyMzExOjIwMTMgUGVyc29uYWwgcHJvdGVjdGl2ZSBlcXVpcG1lbnQg4oCUIFRlc3QgbWV0aG9kcyBmb3Igc3VuZ2xhc3NlcyBhbmQgcmVsYXRlZCBleWV3ZWFyIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAxOCwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDEyMzExOjIwMTIgc3BlY2lmaWVzIHJlZmVyZW5jZSB0ZXN0IG1ldGhvZHMgZm9yIGRldGVybWluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHN1bmdsYXNzZXMgZ2l2ZW4gaW4gSVNPIDEyMzEyIChhbGwgcGFydHMpLiBJdCBpcyBhcHBsaWNhYmxlIHRvIGFsbCBzdW5nbGFzc2VzIGFuZCByZWxhdGVkIGV5ZXdlYXIuIE90aGVyIHRlc3QgbWV0aG9kcyBtYXkgYmUgdXNlZCBpZiBzaG93biB0byBiZSBlcXVpdmFsZW50LiAiLCJvYmplY3RJRCI6IjUxMzUwXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjExOjIwMTMgUGVyc29uYWwgcHJvdGVjdGl2ZSBlcXVpcG1lbnQg4oCUIFRlc3QgbWV0aG9kcyBmb3Igc3VuZ2xhc3NlcyBhbmQgcmVsYXRlZCBleWV3ZWFyIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT4xMToyMDEyIHNwZWNpZmllcyByZWZlcmVuY2UgdGVzdCBtZXRob2RzIGZvciBkZXRlcm1pbmluZyB0aGUgcHJvcGVydGllcyBvZiBzdW5nbGFzc2VzIGdpdmVuIGluIDxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT4xMiAoYWxsIHBhcnRzKS4gSXQgaXMgYXBwbGljYWJsZSB0byBhbGwgc3VuZ2xhc3NlcyBhbmQgcmVsYXRlZCBleWV3ZWFyLiBPdGhlciB0ZXN0IG1ldGhvZHMgbWF5IGJlIHVzZWQgaWYgc2hvd24gdG8gYmUgZXF1aXZhbGVudC4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDQvNTgvNDU4MDMiLCJ1dWlkIjoiNThlNDg5YWQtNDYxNC00NDVhLWIxYTgtZTgwNzRjMmQ1NmM2IiwidGl0bGUiOiJJU08gMTIzNTctMToxOTk5L0NvciAxOjIwMDcgQ29tbWVyY2lhbCByb2FkIHZlaGljbGVzIOKAlCBEcmF3YmFyIGNvdXBsaW5ncyBhbmQgZXllcyBmb3IgcmlnaWQgZHJhd2JhcnMg4oCUIFBhcnQgMTogU3RyZW5ndGggdGVzdHMgZm9yIGdlbmVyYWwgY2FyZ28gY2VudHJlLWF4bGUgdHJhaWxlcnMg4oCUIFRlY2huaWNhbCBDb3JyaWdlbmR1bSAxIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAwNywib3JkZXIiOjExLCJvYmplY3RJRCI6IjQ1ODAzXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjU3LTE6MTk5OS9Db3IgMToyMDA3IENvbW1lcmNpYWwgcm9hZCB2ZWhpY2xlcyDigJQgRHJhd2JhciBjb3VwbGluZ3MgYW5kIGV5ZXMgZm9yIHJpZ2lkIGRyYXdiYXJzIOKAlCBQYXJ0IDE6IFN0cmVuZ3RoIHRlc3RzIGZvciBnZW5lcmFsIGNhcmdvIGNlbnRyZS1heGxlIHRyYWlsZXJzIOKAlCBUZWNobmljYWwgQ29ycmlnZW5kdW0gMSIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA2LzcxLzY3MTUxIiwidXVpZCI6ImRmYzQzYWMxLWM4NmEtNDhkMS05N2U2LTc4MmIyOTdhYmViYSIsInRpdGxlIjoiSVNPIDEyMzEyLTE6MjAxMy9BbWQgMToyMDE1IEV5ZSBhbmQgZmFjZSBwcm90ZWN0aW9uIOKAlCBTdW5nbGFzc2VzIGFuZCByZWxhdGVkIGV5ZXdlYXIg4oCUIFBhcnQgMTogU3VuZ2xhc3NlcyBmb3IgZ2VuZXJhbCB1c2Ug4oCUIEFtZW5kbWVudCAxIiwic3RhdHVzIjoiV2l0aGRyYXduIiwieWVhciI6MjAyMiwib3JkZXIiOjEwMCwib2JqZWN0SUQiOiI2NzE1MV8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT4xMi0xOjIwMTMvQW1kIDE6MjAxNSBFeWUgYW5kIGZhY2UgcHJvdGVjdGlvbiDigJQgU3VuZ2xhc3NlcyBhbmQgcmVsYXRlZCBleWV3ZWFyIOKAlCBQYXJ0IDE6IFN1bmdsYXNzZXMgZm9yIGdlbmVyYWwgdXNlIOKAlCBBbWVuZG1lbnQgMSIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA1LzEzLzUxMzkxIiwidXVpZCI6ImQxYjM3MjkzLTlmNGUtNGE5OS1iMGViLWI4NzNhZTIwOWI5ZiIsInRpdGxlIjoiSVNPIDEyMzQ0OjIwMTAgVGhlcm1hbCBpbnN1bGF0aW5nIHByb2R1Y3RzIGZvciBidWlsZGluZyBhcHBsaWNhdGlvbnMg4oCUIERldGVybWluYXRpb24gb2YgYmVuZGluZyBiZWhhdmlvdXIiLCJzdGF0dXMiOiJXaXRoZHJhd24iLCJ5ZWFyIjoyMDIyLCJvcmRlciI6MTAwLCJ0ZXh0IjoiSVNPIDEyMzQ0OjIwMTAgc3BlY2lmaWVzIHRoZSBlcXVpcG1lbnQgYW5kIHByb2NlZHVyZXMgZm9yIGRldGVybWluaW5nIHRoZSBiZW5kaW5nIGJlaGF2aW91ciBvZiBmdWxsLXNpemUgcHJvZHVjdHMgKE1ldGhvZCBBKSBhbmQgdGVzdCBzcGVjaW1lbnMgKE1ldGhvZCBCKSB1bmRlciB0aGUgYWN0aW9uIG9mIHRocmVlLXBvaW50IGxvYWRpbmcuIEl0IGlzIGFwcGxpY2FibGUgdG8gdGhlcm1hbCBpbnN1bGF0aW5nIHByb2R1Y3RzIGZvciBidWlsZGluZyBhcHBsaWNhdGlvbnMuIFRoZSB0ZXN0IGlzIGRlc2lnbmVkIHRvIGRldGVybWluZSB0aGUgYmVuZGluZyBzdHJlbmd0aCBvZiBwcm9kdWN0cyBhbmQgdGhlaXIgZGVmbGVjdGlvbiBhdCBhIGdpdmVuIGxvYWQuIFRoZSBtZXRob2QgY2FuIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIHRoZSByZXNpc3RhbmNlIG9mIHRoZSBwcm9kdWN0IHRvIGJlbmRpbmcgc3RyZXNzZXMgZHVyaW5nIHRyYW5zcG9ydCBhbmQgYXBwbGljYXRpb24uICIsIm9iamVjdElEIjoiNTEzOTFfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+NDQ6MjAxMCBUaGVybWFsIGluc3VsYXRpbmcgcHJvZHVjdHMgZm9yIGJ1aWxkaW5nIGFwcGxpY2F0aW9ucyDigJQgRGV0ZXJtaW5hdGlvbiBvZiBiZW5kaW5nIGJlaGF2aW91ciIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+NDQ6MjAxMCBzcGVjaWZpZXMgdGhlIGVxdWlwbWVudCBhbmQgcHJvY2VkdXJlcyBmb3IgZGV0ZXJtaW5pbmcgdGhlIGJlbmRpbmcgYmVoYXZpb3VyIG9mIGZ1bGwtc2l6ZSBwcm9kdWN0cyAoTWV0aG9kIEEpIGFuZCB0ZXN0IHNwZWNpbWVucyAoTWV0aG9kIEIpIHVuZGVyIHRoZSBhY3Rpb24gb2YgdGhyZWUtcG9pbnQgbG9hZGluZy4gSXQgaXMgYXBwbGljYWJsZSB0byB0aGVybWFsIGluc3VsYXRpbmcgcHJvZHVjdHMgZm9yIGJ1aWxkaW5nIGFwcGxpY2F0aW9ucy4gVGhlIHRlc3QgaXMgZGVzaWduZWQgdG8gZGV0ZXJtaW5lIHRoZSBiZW5kaW5nIHN0cmVuZ3RoIG9mIHByb2R1Y3RzIGFuZCB0aGVpciBkZWZsZWN0aW9uIGF0IGEgZ2l2ZW4gbG9hZC4gVGhlIG1ldGhvZCBjYW4gYmUgdXNlZCB0byBkZXRlcm1pbmUgdGhlIHJlc2lzdGFuY2Ugb2YgdGhlIHByb2R1Y3QgdG8gYmVuZGluZyBzdHJlc3NlcyBkdXJpbmcgdHJhbnNwb3J0IGFuZCBhcHBsaWNhdGlvbi4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDUvMTMvNTEzNTEiLCJ1dWlkIjoiZDc1YjM4ZTgtM2IxMi00Mjg1LWI1NTktODA4ZDVhNjY0NDg1IiwidGl0bGUiOiJJU08gMTIzMTItMToyMDEzIEV5ZSBhbmQgZmFjZSBwcm90ZWN0aW9uIOKAlCBTdW5nbGFzc2VzIGFuZCByZWxhdGVkIGV5ZXdlYXIg4oCUIFBhcnQgMTogU3VuZ2xhc3NlcyBmb3IgZ2VuZXJhbCB1c2UiLCJzdGF0dXMiOiJXaXRoZHJhd24iLCJ5ZWFyIjoyMDIyLCJvcmRlciI6MTAwLCJ0ZXh0IjoiSVNPIDEyMzEyLTE6MjAxMiBpcyBhcHBsaWNhYmxlIHRvIGFsbCBhZm9jYWwgKHBsYW5vIHBvd2VyKSBzdW5nbGFzc2VzIGFuZCBjbGlwLW9ucyBmb3IgZ2VuZXJhbCB1c2UsIGluY2x1ZGluZyByb2FkIHVzZSBhbmQgZHJpdmluZywgaW50ZW5kZWQgZm9yIHByb3RlY3Rpb24gYWdhaW5zdCBzb2xhciByYWRpYXRpb24uICIsIm9iamVjdElEIjoiNTEzNTFfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+MTItMToyMDEzIEV5ZSBhbmQgZmFjZSBwcm90ZWN0aW9uIOKAlCBTdW5nbGFzc2VzIGFuZCByZWxhdGVkIGV5ZXdlYXIg4oCUIFBhcnQgMTogU3VuZ2xhc3NlcyBmb3IgZ2VuZXJhbCB1c2UiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjEyLTE6MjAxMiBpcyBhcHBsaWNhYmxlIHRvIGFsbCBhZm9jYWwgKHBsYW5vIHBvd2VyKSBzdW5nbGFzc2VzIGFuZCBjbGlwLW9ucyBmb3IgZ2VuZXJhbCB1c2UsIGluY2x1ZGluZyByb2FkIHVzZSBhbmQgZHJpdmluZywgaW50ZW5kZWQgZm9yIHByb3RlY3Rpb24gYWdhaW5zdCBzb2xhciByYWRpYXRpb24uICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA1LzI5LzUyOTY2IiwidXVpZCI6IjQ3YTE2OTJhLTU1MmYtNDlmYS04OGI4LWQ5MzBiZGY0MGIxNyIsInRpdGxlIjoiSVNPIDEyMzQ1OjIwMTMgRGllc2VsIGVuZ2luZXMg4oCUIENsZWFubGluZXNzIGFzc2Vzc21lbnQgb2YgZnVlbCBpbmplY3Rpb24gZXF1aXBtZW50Iiwic3RhdHVzIjoiV2l0aGRyYXduIiwieWVhciI6MjAyMSwib3JkZXIiOjEwMCwidGV4dCI6IklTTyAxMjM0NToyMDEzIHNwZWNpZmllcyBjbGVhbmxpbmVzcyBhc3Nlc3NtZW50IHByb2NlZHVyZXMgZm9yIGV2YWx1YXRpbmcgdGhlIGFtb3VudCBvZiBkZWJyaXMgZm91bmQgd2l0aGluIHRoZSBjbGVhbiBzaWRlIG9mIGRpZXNlbCBmdWVsIGluamVjdGlvbiBhc3NlbWJsaWVzLCB3aGljaCBjb3VsZCBsZWFkIHRvIGEgcmVkdWN0aW9uIGluIHRoZSBzeXN0ZW0ncyBvcGVyYXRpb25hbCBlZmZlY3RpdmVuZXNzLiBXaGlsZSBvdGhlciBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkcywgZS5nLiB0aGUgSVNPIDE2MjMyIHNlcmllcywgcmVsYXRlIHRvIGNsZWFubGluZXNzIG9mIGNvbXBvbmVudHMgdXNlZCBpbiByb2FkIHZlaGljbGUgZmx1aWQgY2lyY3VpdHMsIElTTyAxMjM0NToyMDEzIGlzIGZvY3VzZWQgb24gZGllc2VsIGZ1ZWwgaW5qZWN0aW9uIGFzc2VtYmxpZXMgYXMgc3VwcGxpZWQgdG8gZGllc2VsIGVuZ2luZSBtYW51ZmFjdHVyZXJzIG9yIHRoZSBzZXJ2aWNlIG1hcmtldC4gIiwib2JqZWN0SUQiOiI1Mjk2Nl8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT40NToyMDEzIERpZXNlbCBlbmdpbmVzIOKAlCBDbGVhbmxpbmVzcyBhc3Nlc3NtZW50IG9mIGZ1ZWwgaW5qZWN0aW9uIGVxdWlwbWVudCIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+NDU6MjAxMyBzcGVjaWZpZXMgY2xlYW5saW5lc3MgYXNzZXNzbWVudCBwcm9jZWR1cmVzIGZvciBldmFsdWF0aW5nIHRoZSBhbW91bnQgb2YgZGVicmlzIGZvdW5kIHdpdGhpbiB0aGUgY2xlYW4gc2lkZSBvZiBkaWVzZWwgZnVlbCBpbmplY3Rpb24gYXNzZW1ibGllcywgd2hpY2ggY291bGQgbGVhZCB0byBhIHJlZHVjdGlvbiBpbiB0aGUgc3lzdGVtJ3Mgb3BlcmF0aW9uYWwgZWZmZWN0aXZlbmVzcy4gV2hpbGUgb3RoZXIgSW50ZXJuYXRpb25hbCBTdGFuZGFyZHMsIGUuZy4gdGhlIDxlbT5JU088L2VtPiAxNjIzMiBzZXJpZXMsIHJlbGF0ZSB0byBjbGVhbmxpbmVzcyBvZiBjb21wb25lbnRzIHVzZWQgaW4gcm9hZCB2ZWhpY2xlIGZsdWlkIGNpcmN1aXRzLCA8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+NDU6MjAxMyBpcyBmb2N1c2VkIG9uIGRpZXNlbCBmdWVsIGluamVjdGlvbiBhc3NlbWJsaWVzIGFzIHN1cHBsaWVkIHRvIGRpZXNlbCBlbmdpbmUgbWFudWZhY3R1cmVycyBvciB0aGUgc2VydmljZSBtYXJrZXQuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzAzLzQzLzM0MzUzIiwidXVpZCI6IjZlMjZiZTIwLWIyMGMtNGExMC04NDVlLTAwOWM0ZDAwMWI4NCIsInRpdGxlIjoiSVNPIDEyMzUzLTE6MjAwMiBSb2FkIHZlaGljbGVzIOKAlCBUcmFmZmljIGFjY2lkZW50IGFuYWx5c2lzIOKAlCBQYXJ0IDE6IFZvY2FidWxhcnkiLCJzdGF0dXMiOiJXaXRoZHJhd24iLCJ5ZWFyIjoyMDIwLCJvcmRlciI6MTAwLCJ0ZXh0IjoiVGhpcyBwYXJ0IG9mIElTTyAxMjM1MyBlc3RhYmxpc2hlcyBhIHRlcm1pbm9sb2d5IHJlbGF0aW5nIHRvIHRoZSBpbnZlc3RpZ2F0aW9uIGFuZCBhbmFseXNpcyBvZiByb2FkIHRyYWZmaWMgYWNjaWRlbnRzIGFuZCB0byB0aGUgYXBwbGljYXRpb24gb2YgYWNjaWRlbnQgZGF0YS4gIiwib2JqZWN0SUQiOiIzNDM1M18wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT41My0xOjIwMDIgUm9hZCB2ZWhpY2xlcyDigJQgVHJhZmZpYyBhY2NpZGVudCBhbmFseXNpcyDigJQgUGFydCAxOiBWb2NhYnVsYXJ5IiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfSwidGV4dCI6eyJ2YWx1ZSI6IlRoaXMgcGFydCBvZiA8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+NTMgZXN0YWJsaXNoZXMgYSB0ZXJtaW5vbG9neSByZWxhdGluZyB0byB0aGUgaW52ZXN0aWdhdGlvbiBhbmQgYW5hbHlzaXMgb2Ygcm9hZCB0cmFmZmljIGFjY2lkZW50cyBhbmQgdG8gdGhlIGFwcGxpY2F0aW9uIG9mIGFjY2lkZW50IGRhdGEuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzAyLzEwLzIxMDkwIiwidXVpZCI6ImEyYmQ2M2Y2LWNlMjEtNDExNi05NmJmLTg5ZmI3NmJkZTA4MiIsInRpdGxlIjoiSVNPIDEyMzA4OjE5OTQgUGxhaW4gYmVhcmluZ3Mg4oCUIFF1YWxpdHkgYXNzdXJhbmNlIOKAlCBTYW1wbGUgdHlwZXMg4oCUIERlZmluaXRpb25zLCBhcHBsaWNhdGlvbnMgYW5kIHRlc3RpbmciLCJzdGF0dXMiOiJXaXRoZHJhd24iLCJ5ZWFyIjoyMDE3LCJvcmRlciI6MTAwLCJ0ZXh0IjoiRGVmaW5lcyBkaWZmZXJlbnQgdHlwZXMgb2YgcGxhaW4gYmVhcmluZyBzYW1wbGVzIHN1Y2ggYXMgYXJlIGV4Y2hhbmdlZCBiZXR3ZWVuIHB1cmNoYXNlciBhbmQgbWFudWZhY3R1cmVyOiBzYW1wbGVzIHVzZWQgZm9yIHRlc3RzIGFuZCBleGFtaW5hdGlvbnMgd2hpY2ggYXJlIGNhcnJpZWQgb3V0IGluIHRoZSBleHBlcmltZW50YWwgc3RhZ2UgYW5kIHBpbG90IGxvdCBzdGFnZTsgc2FtcGxlcyB1c2VkIHRvIHByb3ZlIHRoYXQgdGhlIHF1YWxpdHkgaXMgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBxdWFsaXR5IHJlcXVpcmVtZW50cyAoZGltZW5zaW9ucywgbWF0ZXJpYWwgYW5kIHBlcmZvcm1hbmNlIHNwZWNpZmljYXRpb24pOyBzYW1wbGVzIHdoaWNoIGdpdmUgc2VsZWN0aXZlIGluZm9ybWF0aW9uIGFib3V0IHBhcnRpY3VsYXIgcXVhbGl0eSBjaGFyYWN0ZXJpc3RpY3MuICIsIm9iamVjdElEIjoiMjEwOTBfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+MDg6MTk5NCBQbGFpbiBiZWFyaW5ncyDigJQgUXVhbGl0eSBhc3N1cmFuY2Ug4oCUIFNhbXBsZSB0eXBlcyDigJQgRGVmaW5pdGlvbnMsIGFwcGxpY2F0aW9ucyBhbmQgdGVzdGluZyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX0sInRleHQiOnsidmFsdWUiOiJEZWZpbmVzIGRpZmZlcmVudCB0eXBlcyBvZiBwbGFpbiBiZWFyaW5nIHNhbXBsZXMgc3VjaCBhcyBhcmUgZXhjaGFuZ2VkIGJldHdlZW4gcHVyY2hhc2VyIGFuZCBtYW51ZmFjdHVyZXI6IHNhbXBsZXMgdXNlZCBmb3IgdGVzdHMgYW5kIGV4YW1pbmF0aW9ucyB3aGljaCBhcmUgY2FycmllZCBvdXQgaW4gdGhlIGV4cGVyaW1lbnRhbCBzdGFnZSBhbmQgcGlsb3QgbG90IHN0YWdlOyBzYW1wbGVzIHVzZWQgdG8gcHJvdmUgdGhhdCB0aGUgcXVhbGl0eSBpcyBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIHF1YWxpdHkgcmVxdWlyZW1lbnRzIChkaW1lbnNpb25zLCBtYXRlcmlhbCBhbmQgcGVyZm9ybWFuY2Ugc3BlY2lmaWNhdGlvbik7IHNhbXBsZXMgd2hpY2ggZ2l2ZSBzZWxlY3RpdmUgaW5mb3JtYXRpb24gYWJvdXQgcGFydGljdWxhciBxdWFsaXR5IGNoYXJhY3RlcmlzdGljcy4gIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDEvNTMvMTUzNjkiLCJ1dWlkIjoiYmEwYTE2OWYtMjAzNC00NTgzLTk0MjUtMGFhYTMyZjI3N2RlIiwidGl0bGUiOiJJU08gMTIzMDM6MTk5NSBQbGFpbiBiZWFyaW5ncyDigJQgUXVhbGl0eSBjaGFyYWN0ZXJpc3RpY3Mg4oCUIENhbGN1bGF0aW9uIG9mIG1hY2hpbmUgYW5kIHByb2Nlc3MgY2FwYWJpbGl0aWVzIiwic3RhdHVzIjoiV2l0aGRyYXduIiwieWVhciI6MjAxNywib3JkZXIiOjEwMCwib2JqZWN0SUQiOiIxNTM2OV8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT4wMzoxOTk1IFBsYWluIGJlYXJpbmdzIOKAlCBRdWFsaXR5IGNoYXJhY3RlcmlzdGljcyDigJQgQ2FsY3VsYXRpb24gb2YgbWFjaGluZSBhbmQgcHJvY2VzcyBjYXBhYmlsaXRpZXMiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMS81My8xNTM2OCIsInV1aWQiOiJhOGFkNTFmNS0xMWE4LTRiN2UtYWZhMi0wZDQ0YTE5MjQwZWUiLCJ0aXRsZSI6IklTTyAxMjMwMjoxOTkzIFBsYWluIGJlYXJpbmdzIOKAlCBRdWFsaXR5IGNoYXJhY3RlcmlzdGljcyDigJQgU3RhdGlzdGljYWwgcHJvY2VzcyBjb250cm9sIChTUEMpIiwic3RhdHVzIjoiV2l0aGRyYXduIiwieWVhciI6MjAxNywib3JkZXIiOjEwMCwidGV4dCI6IlNwZWNpZmllcyBmb3IgcGxhaW4gYmVhcmluZ3MgKGV4Y2VwdCB0aGljay13YWxsZWQgaGFsZi1iZWFyaW5ncykgdGhvc2UgcXVhbGl0eSBjaGFyYWN0ZXJpc3RpY3MgaW4gYWNjb3JkYW5jZSB3aXRoIElTTyAxMjMwMSB3aGljaCBjYW4gYmUgdXNlZCB0byByZWd1bGF0ZSBhbmQgY29udHJvbCBhIHByb2R1Y3Rpb24gcHJvY2VzcyBvbiB0aGUgYmFzaXMgb2Ygc3RhdGlzdGljYWwgcHJvY2VzcyBjb250cm9sLiBDb3ZlcnMgZGltZW5zaW9uYWwgdmFyaWFibGVzIGJ1dCBkb2VzIG5vdCB0YWtlIGFjY291bnQgb2YgYXR0cmlidXRlcy4gIiwib2JqZWN0SUQiOiIxNTM2OF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT4wMjoxOTkzIFBsYWluIGJlYXJpbmdzIOKAlCBRdWFsaXR5IGNoYXJhY3RlcmlzdGljcyDigJQgU3RhdGlzdGljYWwgcHJvY2VzcyBjb250cm9sIChTUEMpIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfSwidGV4dCI6eyJ2YWx1ZSI6IlNwZWNpZmllcyBmb3IgcGxhaW4gYmVhcmluZ3MgKGV4Y2VwdCB0aGljay13YWxsZWQgaGFsZi1iZWFyaW5ncykgdGhvc2UgcXVhbGl0eSBjaGFyYWN0ZXJpc3RpY3MgaW4gYWNjb3JkYW5jZSB3aXRoIDxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT4wMSB3aGljaCBjYW4gYmUgdXNlZCB0byByZWd1bGF0ZSBhbmQgY29udHJvbCBhIHByb2R1Y3Rpb24gcHJvY2VzcyBvbiB0aGUgYmFzaXMgb2Ygc3RhdGlzdGljYWwgcHJvY2VzcyBjb250cm9sLiBDb3ZlcnMgZGltZW5zaW9uYWwgdmFyaWFibGVzIGJ1dCBkb2VzIG5vdCB0YWtlIGFjY291bnQgb2YgYXR0cmlidXRlcy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDAvNTgvNTg1MSIsInV1aWQiOiJhMDczODEzNy1hNGU5LTQ2MjktOTYzNS1lNjY3NGNhNjBjMzgiLCJ0aXRsZSI6IklTTyAxMjMyOjE5NzYgQWx1bWluaXVtIG94aWRlIHByaW1hcmlseSB1c2VkIGZvciB0aGUgcHJvZHVjdGlvbiBvZiBhbHVtaW5pdW0g4oCUIERldGVybWluYXRpb24gb2Ygc2lsaWNhIGNvbnRlbnQg4oCUIFJlZHVjZWQgbW9seWJkb3NpbGljYXRlIHNwZWN0cm9waG90b21ldHJpYyBtZXRob2QiLCJzdGF0dXMiOiJXaXRoZHJhd24iLCJ5ZWFyIjoyMDE2LCJvcmRlciI6MTAwLCJ0ZXh0IjoiVGhlIG1ldGhvZCBpcyBhcHBsaWNhYmxlIHRvIHByb2R1Y3RzIGhhdmluZyBhIHNpbGljYSBjb250ZW50IGJldHdlZW4gMC4wMDUgJSAobS9tKSBhbmQgMC4wMjUgJSAobS9tKSBwcm92aWRlZCB0aGF0IHRoZSBjb250ZW50IG9mIHBob3NwaG9ydXMgcGVudG94aWRlIHBsdXMgdmFuYWRpdW0gcGVudG94aWRlIGRvZXMgbm90IGV4Y2VlZCAwLjAyICUgKG0vbSkuIFRoZSBwcmluY2lwbGUgb2YgdGhlIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGUgZm9ybWF0aW9uIG9mIG94aWRpemVkIG1vbHliZG9zaWxpY2F0ZSAoeWVsbG93KSB1bmRlciB3ZWxsLWRlZmluZWQgY29uZGl0aW9ucyBvZiBhY2lkaXR5LCBjb25jZW50cmF0aW9uIG9mIHJlYWdlbnRzLCB0ZW1wZXJhdHVyZSBhbmQgdGltZS4gU2VsZWN0aXZlIHJlZHVjdGlvbiBvZiB0aGUgY29tcGxleCBpbiBhIGhpZ2hseSBhY2lkaWMgbWVkaXVtIG9mIHN1bHBodXJpYyBhY2lkIGFuZCBpbiB0aGUgcHJlc2VuY2Ugb2YgdGFydGFyaWMgYWNpZC4gU3BlY3Ryb3Bob3RvbWV0cmljIG1lYXN1cmVtZW50IG9mIHRoZSByZWR1Y2VkIGNvbG91cmVkIGNvbXBsZXggYXQgYSB3YXZlbGVuZ3RoIG9mIGFib3V0IDgxNSBubS4gLSBSZXBsYWNlcyBJU08gUmVjb21tZW5kYXRpb24gUiAxMjMyLTE5NzAuICIsIm9iamVjdElEIjoiNTg1MV8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT4yOjE5NzYgQWx1bWluaXVtIG94aWRlIHByaW1hcmlseSB1c2VkIGZvciB0aGUgcHJvZHVjdGlvbiBvZiBhbHVtaW5pdW0g4oCUIERldGVybWluYXRpb24gb2Ygc2lsaWNhIGNvbnRlbnQg4oCUIFJlZHVjZWQgbW9seWJkb3NpbGljYXRlIHNwZWN0cm9waG90b21ldHJpYyBtZXRob2QiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhlIG1ldGhvZCBpcyBhcHBsaWNhYmxlIHRvIHByb2R1Y3RzIGhhdmluZyBhIHNpbGljYSBjb250ZW50IGJldHdlZW4gMC4wMDUgJSAobS9tKSBhbmQgMC4wMjUgJSAobS9tKSBwcm92aWRlZCB0aGF0IHRoZSBjb250ZW50IG9mIHBob3NwaG9ydXMgcGVudG94aWRlIHBsdXMgdmFuYWRpdW0gcGVudG94aWRlIGRvZXMgbm90IGV4Y2VlZCAwLjAyICUgKG0vbSkuIFRoZSBwcmluY2lwbGUgb2YgdGhlIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGUgZm9ybWF0aW9uIG9mIG94aWRpemVkIG1vbHliZG9zaWxpY2F0ZSAoeWVsbG93KSB1bmRlciB3ZWxsLWRlZmluZWQgY29uZGl0aW9ucyBvZiBhY2lkaXR5LCBjb25jZW50cmF0aW9uIG9mIHJlYWdlbnRzLCB0ZW1wZXJhdHVyZSBhbmQgdGltZS4gU2VsZWN0aXZlIHJlZHVjdGlvbiBvZiB0aGUgY29tcGxleCBpbiBhIGhpZ2hseSBhY2lkaWMgbWVkaXVtIG9mIHN1bHBodXJpYyBhY2lkIGFuZCBpbiB0aGUgcHJlc2VuY2Ugb2YgdGFydGFyaWMgYWNpZC4gU3BlY3Ryb3Bob3RvbWV0cmljIG1lYXN1cmVtZW50IG9mIHRoZSByZWR1Y2VkIGNvbG91cmVkIGNvbXBsZXggYXQgYSB3YXZlbGVuZ3RoIG9mIGFib3V0IDgxNSBubS4gLSBSZXBsYWNlcyA8ZW0+SVNPPC9lbT4gUmVjb21tZW5kYXRpb24gUiA8ZW0+MTIzPC9lbT4yLTE5NzAuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzAzLzIyLzMyMjUzIiwidXVpZCI6IjM1MjYyYWU1LWRlMWUtNDg0OC1hZDA3LWRkNmZlOGRjNWZiMSIsInRpdGxlIjoiSVNPIDEyMzMzOjIwMDAgQWVyb3NwYWNlIOKAlCBDb25zdGFudCBkaXNwbGFjZW1lbnQgaHlkcmF1bGljIG1vdG9ycyDigJQgR2VuZXJhbCBzcGVjaWZpY2F0aW9ucyBmb3IgMzUgMDAwIGtQYSBzeXN0ZW1zIiwic3RhdHVzIjoiV2l0aGRyYXduIiwieWVhciI6MjAxNiwib3JkZXIiOjEwMCwib2JqZWN0SUQiOiIzMjI1M18wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT4zMzoyMDAwIEFlcm9zcGFjZSDigJQgQ29uc3RhbnQgZGlzcGxhY2VtZW50IGh5ZHJhdWxpYyBtb3RvcnMg4oCUIEdlbmVyYWwgc3BlY2lmaWNhdGlvbnMgZm9yIDM1IDAwMCBrUGEgc3lzdGVtcyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzAwLzE5LzE5OTkiLCJ1dWlkIjoiOGY4YjEwMWYtMGJjYi00YWYzLWE4MGUtZDI2OWY2NDljMjRhIiwidGl0bGUiOiJJU08gMTIzMzQ6MjAwMCBBZXJvc3BhY2Ug4oCUIEh5ZHJhdWxpYywgcHJlc3N1cmUtY29tcGVuc2F0ZWQsIHZhcmlhYmxlIGRlbGl2ZXJ5IHB1bXBzIOKAlCBHZW5lcmFsIHJlcXVpcmVtZW50IGZvciAzNSAwMDAga1BhIHN5c3RlbXMiLCJzdGF0dXMiOiJXaXRoZHJhd24iLCJ5ZWFyIjoyMDE2LCJvcmRlciI6MTAwLCJvYmplY3RJRCI6IjE5OTlfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+MzQ6MjAwMCBBZXJvc3BhY2Ug4oCUIEh5ZHJhdWxpYywgcHJlc3N1cmUtY29tcGVuc2F0ZWQsIHZhcmlhYmxlIGRlbGl2ZXJ5IHB1bXBzIOKAlCBHZW5lcmFsIHJlcXVpcmVtZW50IGZvciAzNSAwMDAga1BhIHN5c3RlbXMiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMy81NC8zNTQ4NCIsInV1aWQiOiJlZDg4NGI4My1kZjllLTQxODktYTdmOC1lODEyOTkwN2M3NjIiLCJ0aXRsZSI6IklTTyAxMjM0NToyMDAyIERpZXNlbCBlbmdpbmVzIOKAlCBDbGVhbmxpbmVzcyBhc3Nlc3NtZW50IG9mIGZ1ZWwgaW5qZWN0aW9uIGVxdWlwbWVudCIsInN0YXR1cyI6IldpdGhkcmF3biIsInllYXIiOjIwMTMsIm9yZGVyIjoxMDAsInRleHQiOiJJU08gMTIzNDUgc3BlY2lmaWVzIGNsZWFubGluZXNzIGFzc2Vzc21lbnQgcHJvY2VkdXJlcyBmb3IgZXZhbHVhdGluZyB0aGUgYW1vdW50IG9mIGRlYnJpcyBmb3VuZCB3aXRoaW4gdGhlIGNvbnN0aXR1ZW50IHBhcnRzIG9mIGEgZGllc2VsIGZ1ZWwgaW5qZWN0aW9uIHN5c3RlbSB0aGF0IGNvdWxkIGxlYWQgdG8gYSByZWR1Y3Rpb24gaW4gdGhlIHN5c3RlbSdzIG9wZXJhdGlvbmFsIGVmZmVjdGl2ZW5lc3MuIEl0IGlzIG1haW5seSBjb25jZXJuZWQgd2l0aCBuZXcgZXF1aXBtZW50IG5vdCB5ZXQgZml0dGVkIHRvIGFuIGVuZ2luZSwgYW5kIGlzIHRoZXJlZm9yZSBhaW1lZCBwcmltYXJpbHkgYXQgZW5naW5lIGFuZCBmdWVsIGluamVjdGlvbiBlcXVpcG1lbnQgbWFudWZhY3R1cmVycy4gIiwib2JqZWN0SUQiOiIzNTQ4NF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT40NToyMDAyIERpZXNlbCBlbmdpbmVzIOKAlCBDbGVhbmxpbmVzcyBhc3Nlc3NtZW50IG9mIGZ1ZWwgaW5qZWN0aW9uIGVxdWlwbWVudCIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+NDUgc3BlY2lmaWVzIGNsZWFubGluZXNzIGFzc2Vzc21lbnQgcHJvY2VkdXJlcyBmb3IgZXZhbHVhdGluZyB0aGUgYW1vdW50IG9mIGRlYnJpcyBmb3VuZCB3aXRoaW4gdGhlIGNvbnN0aXR1ZW50IHBhcnRzIG9mIGEgZGllc2VsIGZ1ZWwgaW5qZWN0aW9uIHN5c3RlbSB0aGF0IGNvdWxkIGxlYWQgdG8gYSByZWR1Y3Rpb24gaW4gdGhlIHN5c3RlbSdzIG9wZXJhdGlvbmFsIGVmZmVjdGl2ZW5lc3MuIEl0IGlzIG1haW5seSBjb25jZXJuZWQgd2l0aCBuZXcgZXF1aXBtZW50IG5vdCB5ZXQgZml0dGVkIHRvIGFuIGVuZ2luZSwgYW5kIGlzIHRoZXJlZm9yZSBhaW1lZCBwcmltYXJpbHkgYXQgZW5naW5lIGFuZCBmdWVsIGluamVjdGlvbiBlcXVpcG1lbnQgbWFudWZhY3R1cmVycy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDAvNTgvNTg0OSIsInV1aWQiOiJhMTFiMTMyYS00NjUxLTQ4OGQtYWMwOS0xMWU3ODAxY2ZjNDciLCJ0aXRsZSI6IklTTyAxMjMwOjE5OTIgUGhvdG9ncmFwaHkg4oCUIERldGVybWluYXRpb24gb2YgZmxhc2ggZ3VpZGUgbnVtYmVycyIsInN0YXR1cyI6IldpdGhkcmF3biIsInllYXIiOjIwMDcsIm9yZGVyIjoxMDAsInRleHQiOiJTcGVjaWZpZXMgYSBtZXRob2QgZm9yIG1lYXN1cmluZyB0aGUgcmVmbGVjdG9yIGZhY3Rvci4gQ29udGFpbnMgZm9ybXVsYWUgZm9yIGNhbGN1bGF0aW5nIHRoZSBJU08gZ3VpZGUgbnVtYmVyIGZvciBmbGFzaCBsYW1wcyAod2l0aCBhbmQgd2l0aG91dCBpbnRlZ3JhbCBmYWN0b3JzIHJlc3AuKS4gR2l2ZXMgdGVybXMgYW5kIGRlZmluaXRpb25zLiAiLCJvYmplY3RJRCI6IjU4NDlfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+MDoxOTkyIFBob3RvZ3JhcGh5IOKAlCBEZXRlcm1pbmF0aW9uIG9mIGZsYXNoIGd1aWRlIG51bWJlcnMiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiU3BlY2lmaWVzIGEgbWV0aG9kIGZvciBtZWFzdXJpbmcgdGhlIHJlZmxlY3RvciBmYWN0b3IuIENvbnRhaW5zIGZvcm11bGFlIGZvciBjYWxjdWxhdGluZyB0aGUgPGVtPklTTzwvZW0+IGd1aWRlIG51bWJlciBmb3IgZmxhc2ggbGFtcHMgKHdpdGggYW5kIHdpdGhvdXQgaW50ZWdyYWwgZmFjdG9ycyByZXNwLikuIEdpdmVzIHRlcm1zIGFuZCBkZWZpbml0aW9ucy4gIiwibWF0Y2hMZXZlbCI6InBhcnRpYWwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDIvNTAvMjUwNjQiLCJ1dWlkIjoiOGMzNzAwNjMtNjUwYS00NTI5LTk3MjctNmZhY2JjNjc2YTVhIiwidGl0bGUiOiJJU08gMTIzMDE6MTk5Mi9Db3IgMToxOTk1IFBsYWluIGJlYXJpbmdzIOKAlCBRdWFsaXR5IGNvbnRyb2wgdGVjaG5pcXVlcyBhbmQgaW5zcGVjdGlvbiBvZiBnZW9tZXRyaWNhbCBhbmQgbWF0ZXJpYWwgcXVhbGl0eSBjaGFyYWN0ZXJpc3RpY3Mg4oCUIFRlY2huaWNhbCBDb3JyaWdlbmR1bSAxIiwic3RhdHVzIjoiV2l0aGRyYXduIiwieWVhciI6MjAwNywib3JkZXIiOjEwMCwidGV4dCI6IkNvbnRhaW5zIHNvbWUgbWlub3IgYW1lbmRtZW50cy4gIiwib2JqZWN0SUQiOiIyNTA2NF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT4wMToxOTkyL0NvciAxOjE5OTUgUGxhaW4gYmVhcmluZ3Mg4oCUIFF1YWxpdHkgY29udHJvbCB0ZWNobmlxdWVzIGFuZCBpbnNwZWN0aW9uIG9mIGdlb21ldHJpY2FsIGFuZCBtYXRlcmlhbCBxdWFsaXR5IGNoYXJhY3RlcmlzdGljcyDigJQgVGVjaG5pY2FsIENvcnJpZ2VuZHVtIDEiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiQ29udGFpbnMgc29tZSBtaW5vciBhbWVuZG1lbnRzLiAiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMi8yMi8yMjI4NCIsInV1aWQiOiIyOTE0MTRiZC0zMTM0LTRkYjItOTNiYi02NjljYTZhYjBmMTYiLCJ0aXRsZSI6IklTTyAxMjMwNy0yOjIwMDAgUGxhaW4gYmVhcmluZ3Mg4oCUIENoZWNraW5nIG9mIHdyYXBwZWQgYnVzaGVzIOKAlCBQYXJ0IDI6IENoZWNraW5nIHRoZSBpbnNpZGUgZGlhbWV0ZXIiLCJzdGF0dXMiOiJXaXRoZHJhd24iLCJ5ZWFyIjoyMDA3LCJvcmRlciI6MTAwLCJvYmplY3RJRCI6IjIyMjg0XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjA3LTI6MjAwMCBQbGFpbiBiZWFyaW5ncyDigJQgQ2hlY2tpbmcgb2Ygd3JhcHBlZCBidXNoZXMg4oCUIFBhcnQgMjogQ2hlY2tpbmcgdGhlIGluc2lkZSBkaWFtZXRlciIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzAxLzc3LzE3NzgzIiwidXVpZCI6ImZmZGJkNzQ2LTNhMTYtNDViNy04OTIyLWVhMzU5NTllNTY3MSIsInRpdGxlIjoiSVNPIDEyMzA2OjE5OTQgUGxhaW4gYmVhcmluZ3Mg4oCUIE1lYXN1cmVtZW50IG9mIHdhbGwgdGhpY2tuZXNzIG9mIHRoaW4td2FsbGVkIGhhbGYtYmVhcmluZ3MgYW5kIHRoaW4td2FsbGVkIGJ1c2hlcyIsInN0YXR1cyI6IldpdGhkcmF3biIsInllYXIiOjIwMDcsIm9yZGVyIjoxMDAsInRleHQiOiJEZXNjcmliZXMgaW4gYWNjb3JkYW5jZSB3aXRoIElTTyAxMjMwMSB0aGUgY2hlY2tpbmcgbWV0aG9kcyAobGluZSBtZWFzdXJlbWVudCBhcm91bmQgdGhlIGNpcmN1bWZlcmVuY2UsIGxpbmUgbWVhc3VyZW1lbnQgaW4gdGhlIGF4aWFsIGRpcmVjdGlvbiwgcG9pbnQgbWVhc3VyZW1lbnQpIGFuZCByZXF1aXJlbWVudHMgZm9yIG1lYXN1cmluZyBlcXVpcG1lbnQuIElzIG5vdCBhcHBsaWNhYmxlIHRvIHRoZXJtb3BsYXN0aWMgYnVzaGVzLiAiLCJvYmplY3RJRCI6IjE3NzgzXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjA2OjE5OTQgUGxhaW4gYmVhcmluZ3Mg4oCUIE1lYXN1cmVtZW50IG9mIHdhbGwgdGhpY2tuZXNzIG9mIHRoaW4td2FsbGVkIGhhbGYtYmVhcmluZ3MgYW5kIHRoaW4td2FsbGVkIGJ1c2hlcyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX0sInRleHQiOnsidmFsdWUiOiJEZXNjcmliZXMgaW4gYWNjb3JkYW5jZSB3aXRoIDxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT4wMSB0aGUgY2hlY2tpbmcgbWV0aG9kcyAobGluZSBtZWFzdXJlbWVudCBhcm91bmQgdGhlIGNpcmN1bWZlcmVuY2UsIGxpbmUgbWVhc3VyZW1lbnQgaW4gdGhlIGF4aWFsIGRpcmVjdGlvbiwgcG9pbnQgbWVhc3VyZW1lbnQpIGFuZCByZXF1aXJlbWVudHMgZm9yIG1lYXN1cmluZyBlcXVpcG1lbnQuIElzIG5vdCBhcHBsaWNhYmxlIHRvIHRoZXJtb3BsYXN0aWMgYnVzaGVzLiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMS81NC8xNTQwMyIsInV1aWQiOiJhMmFiNjA2Ni0xN2Q0LTQ2MzEtYmVlNy1mOTA5ZjlmZWY4MGUiLCJ0aXRsZSI6IklTTyAxMjMwNy0xOjE5OTQgUGxhaW4gYmVhcmluZ3Mg4oCUIFdyYXBwZWQgYnVzaGVzIOKAlCBQYXJ0IDE6IENoZWNraW5nIHRoZSBvdXRzaWRlIGRpYW1ldGVyIiwic3RhdHVzIjoiV2l0aGRyYXduIiwieWVhciI6MjAwNywib3JkZXIiOjEwMCwidGV4dCI6IlNwZWNpZmllcywgaW4gYWNjb3JkYW5jZSB3aXRoIElTTyAxMjMwMSwgdGhlIGNoZWNraW5nIG9mIHRoZSBvdXRzaWRlIGRpYW1ldGVyIG9mIHdyYXBwZWQgYnVzaGVzIChtZXRob2RzIEEgYW5kIEIgc3BlY2lmaWVkIGluIElTTyAzNTQ3KSBhbmQgZGVzY3JpYmVzIHRoZSBuZWNlc3NhcnkgY2hlY2tpbmcgbWV0aG9kcyBhbmQgbWVhc3VyaW5nIGVxdWlwbWVudC4gQ2hlY2tpbmcgb2YgdGhlIG91dHNpZGUgZGlhbWV0ZXIgb2Ygd3JhcHBlZCBidXNoZXMgY2FuIG9ubHkgYmUgY2FycmllZCBvdXQgdW5kZXIgYSBjb25zdHJhaW5pbmcgbG9hZCBieSB1c2Ugb2Ygc3BlY2lhbGl6ZWQgbWVhc3VyaW5nIGVxdWlwbWVudC4gVGhlIGRpbWVuc2lvbnMgYW5kIHRvbGVyYW5jZXMgb2Ygd3JhcHBlZCBidXNoZXMgYXJlIGdpdmVuIGluIElTTyAzNTQ3LiBDaGVja2luZyB0aGUgd2FsbCB0aGlja25lc3MgaXMgdGhlIHN1YmplY3Qgb2YgSVNPIDEyMzA2LiAiLCJvYmplY3RJRCI6IjE1NDAzXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjA3LTE6MTk5NCBQbGFpbiBiZWFyaW5ncyDigJQgV3JhcHBlZCBidXNoZXMg4oCUIFBhcnQgMTogQ2hlY2tpbmcgdGhlIG91dHNpZGUgZGlhbWV0ZXIiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiU3BlY2lmaWVzLCBpbiBhY2NvcmRhbmNlIHdpdGggPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjAxLCB0aGUgY2hlY2tpbmcgb2YgdGhlIG91dHNpZGUgZGlhbWV0ZXIgb2Ygd3JhcHBlZCBidXNoZXMgKG1ldGhvZHMgQSBhbmQgQiBzcGVjaWZpZWQgaW4gPGVtPklTTzwvZW0+IDM1NDcpIGFuZCBkZXNjcmliZXMgdGhlIG5lY2Vzc2FyeSBjaGVja2luZyBtZXRob2RzIGFuZCBtZWFzdXJpbmcgZXF1aXBtZW50LiBDaGVja2luZyBvZiB0aGUgb3V0c2lkZSBkaWFtZXRlciBvZiB3cmFwcGVkIGJ1c2hlcyBjYW4gb25seSBiZSBjYXJyaWVkIG91dCB1bmRlciBhIGNvbnN0cmFpbmluZyBsb2FkIGJ5IHVzZSBvZiBzcGVjaWFsaXplZCBtZWFzdXJpbmcgZXF1aXBtZW50LiBUaGUgZGltZW5zaW9ucyBhbmQgdG9sZXJhbmNlcyBvZiB3cmFwcGVkIGJ1c2hlcyBhcmUgZ2l2ZW4gaW4gPGVtPklTTzwvZW0+IDM1NDcuIENoZWNraW5nIHRoZSB3YWxsIHRoaWNrbmVzcyBpcyB0aGUgc3ViamVjdCBvZiA8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+MDYuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzAxLzUzLzE1MzY3IiwidXVpZCI6IjMyYjViM2VkLTNlNjEtNDNjNC1iMjVlLTU5ODJhNGQ4ZDQ4ZCIsInRpdGxlIjoiSVNPIDEyMzAxOjE5OTIgUGxhaW4gYmVhcmluZ3Mg4oCUIFF1YWxpdHkgY29udHJvbCB0ZWNobmlxdWVzIGFuZCBpbnNwZWN0aW9uIG9mIGdlb21ldHJpY2FsIGFuZCBtYXRlcmlhbCBxdWFsaXR5IGNoYXJhY3RlcmlzdGljcyIsInN0YXR1cyI6IldpdGhkcmF3biIsInllYXIiOjIwMDcsIm9yZGVyIjoxMDAsInRleHQiOiJBcHBsaWVzIHRvIG1ldGFsbGljIHRoaW4td2FsbGVkIGhhbGYtYmVhcmluZ3MgKElTTyAzNTQ4KSwgbWV0YWxsaWMgdGhpbi13YWxsZWQgZmxhbmdlZCBiZWFyaW5ncyAoSVNPIDY4NjQpLCBtZXRhbGxpYyB0aGljay13YWxsZWQgaGFsZi1iZWFyaW5ncyAod2l0aCBhbmQgd2l0aG91dCBmbGFuZ2UpLCB3cmFwcGVkIGJ1c2hlcyAoSVNPIDM1NDcpLCB1bnNwbGl0IG1ldGFsbGljIGJ1c2hlcyAod2l0aCBhbmQgd2l0aG91dCBmbGFuZ2UpIChJU08gNDM3OSksIHRoZXJtb3BsYXN0aWMgYnVzaGVzICh3aXRoIGFuZCB3aXRob3V0IGZsYW5nZSksIHJpbmctdHlwZSB0aHJ1c3Qgd2FzaGVycyBhbmQgcHJlc3NlZCBiaW1ldGFsbGljIGhhbGYtdGhydXN0IHdhc2hlcnMgKElTTyA2NTI1IGFuZCA2NTI2KSwgYW5kIHBsYWluIGJlYXJpbmdzIG1hZGUgZnJvbSBzaW50ZXJlZCBtYXRlcmlhbCAoSVNPIDI3OTUpLiBBbm5leCBBIGRlYWxzIHdpdGggY2FsY3VsYXRpb24gb2YgdGFuZ2VudGlhbCBsb2FkLiAiLCJvYmplY3RJRCI6IjE1MzY3XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjAxOjE5OTIgUGxhaW4gYmVhcmluZ3Mg4oCUIFF1YWxpdHkgY29udHJvbCB0ZWNobmlxdWVzIGFuZCBpbnNwZWN0aW9uIG9mIGdlb21ldHJpY2FsIGFuZCBtYXRlcmlhbCBxdWFsaXR5IGNoYXJhY3RlcmlzdGljcyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX0sInRleHQiOnsidmFsdWUiOiJBcHBsaWVzIHRvIG1ldGFsbGljIHRoaW4td2FsbGVkIGhhbGYtYmVhcmluZ3MgKDxlbT5JU088L2VtPiAzNTQ4KSwgbWV0YWxsaWMgdGhpbi13YWxsZWQgZmxhbmdlZCBiZWFyaW5ncyAoPGVtPklTTzwvZW0+IDY4NjQpLCBtZXRhbGxpYyB0aGljay13YWxsZWQgaGFsZi1iZWFyaW5ncyAod2l0aCBhbmQgd2l0aG91dCBmbGFuZ2UpLCB3cmFwcGVkIGJ1c2hlcyAoPGVtPklTTzwvZW0+IDM1NDcpLCB1bnNwbGl0IG1ldGFsbGljIGJ1c2hlcyAod2l0aCBhbmQgd2l0aG91dCBmbGFuZ2UpICg8ZW0+SVNPPC9lbT4gNDM3OSksIHRoZXJtb3BsYXN0aWMgYnVzaGVzICh3aXRoIGFuZCB3aXRob3V0IGZsYW5nZSksIHJpbmctdHlwZSB0aHJ1c3Qgd2FzaGVycyBhbmQgcHJlc3NlZCBiaW1ldGFsbGljIGhhbGYtdGhydXN0IHdhc2hlcnMgKDxlbT5JU088L2VtPiA2NTI1IGFuZCA2NTI2KSwgYW5kIHBsYWluIGJlYXJpbmdzIG1hZGUgZnJvbSBzaW50ZXJlZCBtYXRlcmlhbCAoPGVtPklTTzwvZW0+IDI3OTUpLiBBbm5leCBBIGRlYWxzIHdpdGggY2FsY3VsYXRpb24gb2YgdGFuZ2VudGlhbCBsb2FkLiAiLCJtYXRjaExldmVsIjoicGFydGlhbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMC81OC81ODUzIiwidXVpZCI6IjI2ZmYwOWY0LTJmMTEtNDZmNS04NDljLTlmZDEzMjRjMmQ4MSIsInRpdGxlIjoiSVNPIDEyMzQ6MTk3NiBTcGxpdCBwaW5zIOKAlCBNZXRyaWMgc2VyaWVzIiwic3RhdHVzIjoiV2l0aGRyYXduIiwieWVhciI6MTk5Nywib3JkZXIiOjEwMCwib2JqZWN0SUQiOiI1ODUzXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjQ6MTk3NiBTcGxpdCBwaW5zIOKAlCBNZXRyaWMgc2VyaWVzIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDAvNTgvNTg0OCIsInV1aWQiOiI3ZDAwYWRlNS00NmMyLTQ5YTQtOGIwZi01ODc4MzgyOTEyYzMiLCJ0aXRsZSI6IklTTyAxMjMwOjE5NzMgUGhvdG9ncmFwaHkg4oCUIERldGVybWluYXRpb24gb2YgZmxhc2ggZ3VpZGUgbnVtYmVycyIsInN0YXR1cyI6IldpdGhkcmF3biIsInllYXIiOjE5OTIsIm9yZGVyIjoxMDAsIm9iamVjdElEIjoiNTg0OF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT4wOjE5NzMgUGhvdG9ncmFwaHkg4oCUIERldGVybWluYXRpb24gb2YgZmxhc2ggZ3VpZGUgbnVtYmVycyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzAwLzU4LzU4NTIiLCJ1dWlkIjoiN2VjZGU3NzMtMzU0NS00OWRkLTk2ODctZTRmNjhhMGU0MDI0IiwidGl0bGUiOiJJU08gMTIzMzoxOTc1IFBsYXN0aWNzIOKAlCBEZXRlcm1pbmF0aW9uIG9mIHZpc2Nvc2l0eSBudW1iZXIgb2YgbWV0aHlsIG1ldGhhY3J5bGF0ZSBwb2x5bWVycyBhbmQgY29wb2x5bWVycyBpbiBkaWx1dGUgc29sdXRpb24iLCJzdGF0dXMiOiJXaXRoZHJhd24iLCJ5ZWFyIjoxOTkwLCJvcmRlciI6MTAwLCJvYmplY3RJRCI6IjU4NTJfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+MzoxOTc1IFBsYXN0aWNzIOKAlCBEZXRlcm1pbmF0aW9uIG9mIHZpc2Nvc2l0eSBudW1iZXIgb2YgbWV0aHlsIG1ldGhhY3J5bGF0ZSBwb2x5bWVycyBhbmQgY29wb2x5bWVycyBpbiBkaWx1dGUgc29sdXRpb24iLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wOC80Ni84NDY1MiIsInV1aWQiOiI3NTY5MGEzNC04OGQ4LTRiYzItOTI0MS02MzEwNmI1YzQwNWYiLCJ0aXRsZSI6IklTTy9DRCAxMjMwMSBQbGFpbiBiZWFyaW5ncyDigJQgUXVhbGl0eSBjb250cm9sIHRlY2huaXF1ZXMgYW5kIGluc3BlY3Rpb24gb2YgZ2VvbWV0cmljYWwgYW5kIG1hdGVyaWFsIHF1YWxpdHkgY2hhcmFjdGVyaXN0aWNzIiwic3RhdHVzIjoiVW5kZXIgZGV2ZWxvcG1lbnQiLCJ5ZWFyIjoyMDIyLCJvcmRlciI6MTIsInRleHQiOiJJU08gMTIzMDE6MjAwNyBzcGVjaWZpZXMgcXVhbGl0eSBjb250cm9sIHRlY2huaXF1ZXMgYW5kIGluc3BlY3Rpb24gb2YgdGhlIGdlb21ldHJpY2FsIGFuZCBtYXRlcmlhbCBxdWFsaXR5IGNoYXJhY3RlcmlzdGljcyBvZiB0aGUgZm9sbG93aW5nIHR5cGVzIG9mIHBsYWluIGJlYXJpbmdzOiB0aGluLXdhbGxlZCBoYWxmLWJlYXJpbmdzIHdpdGggb3Igd2l0aG91dCBmbGFuZ2UsIGFzIHNwZWNpZmllZCBpbiBJU08gMzU0ODsgbWV0YWxsaWMgdGhpY2std2FsbGVkIGhhbGYtYmVhcmluZ3MgKHdpdGggYW5kIHdpdGhvdXQgZmxhbmdlKSB0aGF0IGFyZSBtYW51ZmFjdHVyZWQgYXMgaGFsdmVzIGJ1dCB0aGF0IGFyZSBuZWNlc3NhcmlseSBpbnRlcmNoYW5nZWFibGUgYW5kIGhhdmUgdGhlIHJhdGlvIHMgMyA6IEQgbyA+IDAsMTE7IHdyYXBwZWQgYnVzaGVzLCBhcyBzcGVjaWZpZWQgaW4gSVNPIDM1NDc7IHVuc3BsaXQgbWV0YWxsaWMgYnVzaGVzICh3aXRoIGFuZCB3aXRob3V0IGZsYW5nZSkgbWFkZSBmcm9tIHNvbGlkIGFuZCBtdWx0aWxheWVyIG1hdGVyaWFscyBhbmQgd2l0aCBvdXRzaWRlIGRpYW1ldGVycyB1cCB0byAyMzAgbW07IHNvbGlkIHBvbHltZXIgYnVzaGVzICh3aXRoIGFuZCB3aXRob3V0IGZsYW5nZSkgd2l0aCBpbnNpZGUgZGlhbWV0ZXJzIHVwIHRvIDIwMCBtbTsgcmluZy10eXBlIHRocnVzdCB3YXNoZXJzIGFuZCBwcmVzc2VkIGJpbWV0YWxsaWMgaGFsZi10aHJ1c3Qgd2FzaGVycywgYXMgc3BlY2lmaWVkIGluIElTTyA2NTI1IGFuZCBJU08gNjUyNiwgcmVzcGVjdGl2ZWx5OyBhbmQgYnVzaGVzIG1hZGUgZnJvbSBzaW50ZXJlZCBtYXRlcmlhbCwgYXMgc3BlY2lmaWVkIGluIElTTyAyNzk1LiAiLCJvYmplY3RJRCI6Ijg0NjUyXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+L0NEIDxlbT4xMjM8L2VtPjAxIFBsYWluIGJlYXJpbmdzIOKAlCBRdWFsaXR5IGNvbnRyb2wgdGVjaG5pcXVlcyBhbmQgaW5zcGVjdGlvbiBvZiBnZW9tZXRyaWNhbCBhbmQgbWF0ZXJpYWwgcXVhbGl0eSBjaGFyYWN0ZXJpc3RpY3MiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjAxOjIwMDcgc3BlY2lmaWVzIHF1YWxpdHkgY29udHJvbCB0ZWNobmlxdWVzIGFuZCBpbnNwZWN0aW9uIG9mIHRoZSBnZW9tZXRyaWNhbCBhbmQgbWF0ZXJpYWwgcXVhbGl0eSBjaGFyYWN0ZXJpc3RpY3Mgb2YgdGhlIGZvbGxvd2luZyB0eXBlcyBvZiBwbGFpbiBiZWFyaW5nczogdGhpbi13YWxsZWQgaGFsZi1iZWFyaW5ncyB3aXRoIG9yIHdpdGhvdXQgZmxhbmdlLCBhcyBzcGVjaWZpZWQgaW4gPGVtPklTTzwvZW0+IDM1NDg7IG1ldGFsbGljIHRoaWNrLXdhbGxlZCBoYWxmLWJlYXJpbmdzICh3aXRoIGFuZCB3aXRob3V0IGZsYW5nZSkgdGhhdCBhcmUgbWFudWZhY3R1cmVkIGFzIGhhbHZlcyBidXQgdGhhdCBhcmUgbmVjZXNzYXJpbHkgaW50ZXJjaGFuZ2VhYmxlIGFuZCBoYXZlIHRoZSByYXRpbyBzIDMgOiBEIG8gPiAwLDExOyB3cmFwcGVkIGJ1c2hlcywgYXMgc3BlY2lmaWVkIGluIDxlbT5JU088L2VtPiAzNTQ3OyB1bnNwbGl0IG1ldGFsbGljIGJ1c2hlcyAod2l0aCBhbmQgd2l0aG91dCBmbGFuZ2UpIG1hZGUgZnJvbSBzb2xpZCBhbmQgbXVsdGlsYXllciBtYXRlcmlhbHMgYW5kIHdpdGggb3V0c2lkZSBkaWFtZXRlcnMgdXAgdG8gMjMwIG1tOyBzb2xpZCBwb2x5bWVyIGJ1c2hlcyAod2l0aCBhbmQgd2l0aG91dCBmbGFuZ2UpIHdpdGggaW5zaWRlIGRpYW1ldGVycyB1cCB0byAyMDAgbW07IHJpbmctdHlwZSB0aHJ1c3Qgd2FzaGVycyBhbmQgcHJlc3NlZCBiaW1ldGFsbGljIGhhbGYtdGhydXN0IHdhc2hlcnMsIGFzIHNwZWNpZmllZCBpbiA8ZW0+SVNPPC9lbT4gNjUyNSBhbmQgPGVtPklTTzwvZW0+IDY1MjYsIHJlc3BlY3RpdmVseTsgYW5kIGJ1c2hlcyBtYWRlIGZyb20gc2ludGVyZWQgbWF0ZXJpYWwsIGFzIHNwZWNpZmllZCBpbiA8ZW0+SVNPPC9lbT4gMjc5NS4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDcvNTcvNzU3NDUiLCJ1dWlkIjoiZjBhMzhmZWUtNmEyZS00YmQ2LTgxMDItMzViZWVmNmJlNzVlIiwidGl0bGUiOiJJU08gMzU0Ny03OjIwMjAgUGxhaW4gYmVhcmluZ3Mg4oCUIFdyYXBwZWQgYnVzaGVzIOKAlCBQYXJ0IDc6IE1lYXN1cmVtZW50IG9mIHdhbGwgdGhpY2tuZXNzIG9mIHRoaW4td2FsbGVkIGJ1c2hlcyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjAsIm9yZGVyIjoxMSwidGV4dCI6IlRoaXMgZG9jdW1lbnQgZGVzY3JpYmVzLCBmb2xsb3dpbmcgSVNPIDEyMzAxLCB0aGUgY2hlY2tpbmcgbWV0aG9kcyBhbmQgbWVhc3VyaW5nIGVxdWlwbWVudCB1c2VkIGZvciBtZWFzdXJpbmcgdGhlIHRvdGFsIHdhbGwgdGhpY2tuZXNzIG9mIHRoaW4td2FsbGVkIGJ1c2hlcyBpbiB0aGUgZmluaXNoZWQgc3RhdGUuIE5PVEUgICAgQWxsIGRpbWVuc2lvbnMgaW4gdGhpcyBkb2N1bWVudCBhcmUgZ2l2ZW4gaW4gbWlsbGltZXRyZXMuICIsIm9iamVjdElEIjoiNzU3NDVfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gMzU0Ny03OjIwMjAgUGxhaW4gYmVhcmluZ3Mg4oCUIFdyYXBwZWQgYnVzaGVzIOKAlCBQYXJ0IDc6IE1lYXN1cmVtZW50IG9mIHdhbGwgdGhpY2tuZXNzIG9mIHRoaW4td2FsbGVkIGJ1c2hlcyIsIm1hdGNoTGV2ZWwiOiJwYXJ0aWFsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iXX0sInRleHQiOnsidmFsdWUiOiJUaGlzIGRvY3VtZW50IGRlc2NyaWJlcywgZm9sbG93aW5nIDxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT4wMSwgdGhlIGNoZWNraW5nIG1ldGhvZHMgYW5kIG1lYXN1cmluZyBlcXVpcG1lbnQgdXNlZCBmb3IgbWVhc3VyaW5nIHRoZSB0b3RhbCB3YWxsIHRoaWNrbmVzcyBvZiB0aGluLXdhbGxlZCBidXNoZXMgaW4gdGhlIGZpbmlzaGVkIHN0YXRlLiBOT1RFICAgIEFsbCBkaW1lbnNpb25zIGluIHRoaXMgZG9jdW1lbnQgYXJlIGdpdmVuIGluIG1pbGxpbWV0cmVzLiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNy81Ny83NTc0NCIsInV1aWQiOiI1YTBlM2FmNy0xNmNlLTQ3YzItYWNlOS1hMWU0MTAyMjNmMTEiLCJ0aXRsZSI6IklTTyAzNTQ3LTY6MjAyMCBQbGFpbiBiZWFyaW5ncyDigJQgV3JhcHBlZCBidXNoZXMg4oCUIFBhcnQgNjogQ2hlY2tpbmcgdGhlIGluc2lkZSBkaWFtZXRlciIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjAsIm9yZGVyIjoxMSwidGV4dCI6IlRoZSBkb2N1bWVudCBzcGVjaWZpZXMsIGZvbGxvd2luZyBJU08gMTIzMDEsIHRoZSBjaGVja2luZyBvZiB0aGUgaW5zaWRlIGRpYW1ldGVyIG9mIHdyYXBwZWQgYnVzaGVzIChzZWUgSVNPIDM1NDfigJEyOjIwMTcsIG1ldGhvZCBDKSBhbmQgZGVzY3JpYmVzIHRoZSBuZWNlc3NhcnkgY2hlY2tpbmcgbWV0aG9kcyBhbmQgbWVhc3VyaW5nIGVxdWlwbWVudC4gTk9URSAxICBBbGwgZGltZW5zaW9ucyBpbiB0aGlzIGRvY3VtZW50IGFyZSBnaXZlbiBpbiBtaWxsaW1ldHJlcyBleGNlcHQgd2hlcmUgb3RoZXJ3aXNlIG5vdGVkL2Rlc2lnbmF0ZWQuIE5PVEUgMiAgVGhlIGRpbWVuc2lvbnMgYW5kIHRvbGVyYW5jZXMgb2Ygd3JhcHBlZCBidXNoZXMgYXJlIGdpdmVuIGluIElTTyAzNTQ34oCRMS4gTk9URSAzICBDaGVja2luZyBvZiB0aGUgd2FsbCB0aGlja25lc3MgaXMgdGhlIHN1YmplY3Qgb2YgSVNPIDM1NDfigJE3LiBOT1RFIDQgIENoZWNraW5nIG9mIHRoZSBvdXRzaWRlIGRpYW1ldGVyIG9mIHdyYXBwZWQgYnVzaGVzIGlzIHRoZSBzdWJqZWN0IG9mIElTTyAzNTQ34oCRNS4gIiwib2JqZWN0SUQiOiI3NTc0NF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiAzNTQ3LTY6MjAyMCBQbGFpbiBiZWFyaW5ncyDigJQgV3JhcHBlZCBidXNoZXMg4oCUIFBhcnQgNjogQ2hlY2tpbmcgdGhlIGluc2lkZSBkaWFtZXRlciIsIm1hdGNoTGV2ZWwiOiJwYXJ0aWFsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iXX0sInRleHQiOnsidmFsdWUiOiJUaGUgZG9jdW1lbnQgc3BlY2lmaWVzLCBmb2xsb3dpbmcgPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjAxLCB0aGUgY2hlY2tpbmcgb2YgdGhlIGluc2lkZSBkaWFtZXRlciBvZiB3cmFwcGVkIGJ1c2hlcyAoc2VlIDxlbT5JU088L2VtPiAzNTQ34oCRMjoyMDE3LCBtZXRob2QgQykgYW5kIGRlc2NyaWJlcyB0aGUgbmVjZXNzYXJ5IGNoZWNraW5nIG1ldGhvZHMgYW5kIG1lYXN1cmluZyBlcXVpcG1lbnQuIE5PVEUgMSAgQWxsIGRpbWVuc2lvbnMgaW4gdGhpcyBkb2N1bWVudCBhcmUgZ2l2ZW4gaW4gbWlsbGltZXRyZXMgZXhjZXB0IHdoZXJlIG90aGVyd2lzZSBub3RlZC9kZXNpZ25hdGVkLiBOT1RFIDIgIFRoZSBkaW1lbnNpb25zIGFuZCB0b2xlcmFuY2VzIG9mIHdyYXBwZWQgYnVzaGVzIGFyZSBnaXZlbiBpbiA8ZW0+SVNPPC9lbT4gMzU0N+KAkTEuIE5PVEUgMyAgQ2hlY2tpbmcgb2YgdGhlIHdhbGwgdGhpY2tuZXNzIGlzIHRoZSBzdWJqZWN0IG9mIDxlbT5JU088L2VtPiAzNTQ34oCRNy4gTk9URSA0ICBDaGVja2luZyBvZiB0aGUgb3V0c2lkZSBkaWFtZXRlciBvZiB3cmFwcGVkIGJ1c2hlcyBpcyB0aGUgc3ViamVjdCBvZiA8ZW0+SVNPPC9lbT4gMzU0N+KAkTUuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA3LzU3Lzc1NzQzIiwidXVpZCI6ImZkYTY4OGU2LTkzZTgtNDdjMi05NmU0LTUxNTM1ODhiNmM3YiIsInRpdGxlIjoiSVNPIDM1NDctNToyMDIwIFBsYWluIGJlYXJpbmdzIOKAlCBXcmFwcGVkIGJ1c2hlcyDigJQgUGFydCA1OiBDaGVja2luZyB0aGUgb3V0c2lkZSBkaWFtZXRlciIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjAsIm9yZGVyIjoxMSwidGV4dCI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzLCBmb2xsb3dpbmcgSVNPIDEyMzAxLCB0aGUgY2hlY2tpbmcgb2YgdGhlIG91dHNpZGUgZGlhbWV0ZXIgb2Ygd3JhcHBlZCBidXNoZXMgKElTTyAzNTQ34oCRMjoyMDE3LCBtZXRob2RzIEEsIEIgYW5kIEQpIGFuZCBkZXNjcmliZXMgdGhlIG5lY2Vzc2FyeSBjaGVja2luZyBtZXRob2RzIGFuZCBtZWFzdXJpbmcgZXF1aXBtZW50LiBOT1RFICAgIFRoZSBkaW1lbnNpb25zIGFuZCB0b2xlcmFuY2VzIG9mIHdyYXBwZWQgYnVzaGVzIGFyZSBnaXZlbiBpbiBJU08gMzU0N+KAkTEuIENoZWNraW5nIHRoZSB3YWxsIHRoaWNrbmVzcyBpcyB0aGUgc3ViamVjdCBvZiBJU08gMzU0N+KAkTcuICIsIm9iamVjdElEIjoiNzU3NDNfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gMzU0Ny01OjIwMjAgUGxhaW4gYmVhcmluZ3Mg4oCUIFdyYXBwZWQgYnVzaGVzIOKAlCBQYXJ0IDU6IENoZWNraW5nIHRoZSBvdXRzaWRlIGRpYW1ldGVyIiwibWF0Y2hMZXZlbCI6InBhcnRpYWwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyJdfSwidGV4dCI6eyJ2YWx1ZSI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzLCBmb2xsb3dpbmcgPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjAxLCB0aGUgY2hlY2tpbmcgb2YgdGhlIG91dHNpZGUgZGlhbWV0ZXIgb2Ygd3JhcHBlZCBidXNoZXMgKDxlbT5JU088L2VtPiAzNTQ34oCRMjoyMDE3LCBtZXRob2RzIEEsIEIgYW5kIEQpIGFuZCBkZXNjcmliZXMgdGhlIG5lY2Vzc2FyeSBjaGVja2luZyBtZXRob2RzIGFuZCBtZWFzdXJpbmcgZXF1aXBtZW50LiBOT1RFICAgIFRoZSBkaW1lbnNpb25zIGFuZCB0b2xlcmFuY2VzIG9mIHdyYXBwZWQgYnVzaGVzIGFyZSBnaXZlbiBpbiA8ZW0+SVNPPC9lbT4gMzU0N+KAkTEuIENoZWNraW5nIHRoZSB3YWxsIHRoaWNrbmVzcyBpcyB0aGUgc3ViamVjdCBvZiA8ZW0+SVNPPC9lbT4gMzU0N+KAkTcuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA3LzcxLzc3MTE3IiwidXVpZCI6IjI3M2MwYTMxLTI4ODMtNGQzYi1iNTY4LThjODFmNWQ3NzFmYiIsInRpdGxlIjoiSVNPIDM1NDgtMzoyMDIzIFBsYWluIGJlYXJpbmdzIOKAlCBUaGluLXdhbGxlZCBoYWxmIGJlYXJpbmdzIHdpdGggb3Igd2l0aG91dCBmbGFuZ2Ug4oCUIFBhcnQgMzogRGV0ZXJtaW5hdGlvbiBvZiB0aGUgcGVyaXBoZXJhbCBsZW5ndGgiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIzLCJvcmRlciI6MTEsInRleHQiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcywgYWNjb3JkaW5nIHRvIElTTyDCoCAxMjMwMSAsIHRoZSBjaGVja2luZyBvZiB0aGUgcGVyaXBoZXJhbCBsZW5ndGggb2YgdGhpbi13YWxsZWQgaGFsZiBiZWFyaW5ncyB3aXRoIG9yIHdpdGhvdXQgZmxhbmdlLCBhbmQgZGVzY3JpYmVzIHRoZSBuZWNlc3NhcnkgY2hlY2tpbmcgbWV0aG9kcyBhbmQgbWVhc3VyaW5nIGVxdWlwbWVudC4gVGhpbi13YWxsZWQgaGFsZiBiZWFyaW5ncyBhcmUgZmxleGlibGUgYW5kLCBpbiB0aGUgZnJlZSBjb25kaXRpb24sIGRvIG5vdCBjb25mb3JtIHRvIGEgY3lsaW5kcmljYWwgcHJvZmlsZS4gVGhpcyBpcyBvbmUgcmVhc29uIHRoZSBwZXJpcGhlcmFsIGxlbmd0aCBvZiB0aGUgaGFsZiBiZWFyaW5ncyBjYW4gb25seSBiZSBtZWFzdXJlZCB1bmRlciBhIGNvbnN0cmFpbmluZyBsb2FkIGJ5IHVzZSBvZiBzcGVjaWFsaXplZCBtZWFzdXJpbmcgZXF1aXBtZW50LiBJbiBhZGRpdGlvbiwgbWVhc3VyaW5nIGVxdWlwbWVudCBkaWZmZXJlbnQgZnJvbSB0aGF0IGlsbHVzdHJhdGVkIGluIHRoaXMgZG9jdW1lbnQgY2FuIGJlIHVzZWQsIHByb3ZpZGVkIHRoZSBtZWFzdXJpbmcgYWNjdXJhY3kgb2YgdGhlIGVxdWlwbWVudCBpcyBjb25zaXN0ZW50IHdpdGggdGhlIHNwZWNpZmljYXRpb25zIGdpdmVuIGluIENsYXVzZcKgMTcgLiBUaGlzIGRvY3VtZW50IGRvZXMgbm90IGluY2x1ZGUgdGhlIG1lYXN1cmVtZW50IG9mIHRoZSBwYXJ0aW5nIGxpbmUgdGFwZXIuIFRoaXMgZG9jdW1lbnQgYXBwbGllcyB0byB0aGluLXdhbGxlZCBoYWxmIGJlYXJpbmdzLCB0aGUgc3BlY2lmaWNhdGlvbnMgb2Ygd2hpY2ggYXJlIGdpdmVuIGluIElTTyDCoCAzNTQ4IOKAkSAxIC4gIiwib2JqZWN0SUQiOiI3NzExN18wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiAzNTQ4LTM6MjAyMyBQbGFpbiBiZWFyaW5ncyDigJQgVGhpbi13YWxsZWQgaGFsZiBiZWFyaW5ncyB3aXRoIG9yIHdpdGhvdXQgZmxhbmdlIOKAlCBQYXJ0IDM6IERldGVybWluYXRpb24gb2YgdGhlIHBlcmlwaGVyYWwgbGVuZ3RoIiwibWF0Y2hMZXZlbCI6InBhcnRpYWwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyJdfSwidGV4dCI6eyJ2YWx1ZSI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzLCBhY2NvcmRpbmcgdG8gPGVtPklTTzwvZW0+IMKgIDxlbT4xMjM8L2VtPjAxICwgdGhlIGNoZWNraW5nIG9mIHRoZSBwZXJpcGhlcmFsIGxlbmd0aCBvZiB0aGluLXdhbGxlZCBoYWxmIGJlYXJpbmdzIHdpdGggb3Igd2l0aG91dCBmbGFuZ2UsIGFuZCBkZXNjcmliZXMgdGhlIG5lY2Vzc2FyeSBjaGVja2luZyBtZXRob2RzIGFuZCBtZWFzdXJpbmcgZXF1aXBtZW50LiBUaGluLXdhbGxlZCBoYWxmIGJlYXJpbmdzIGFyZSBmbGV4aWJsZSBhbmQsIGluIHRoZSBmcmVlIGNvbmRpdGlvbiwgZG8gbm90IGNvbmZvcm0gdG8gYSBjeWxpbmRyaWNhbCBwcm9maWxlLiBUaGlzIGlzIG9uZSByZWFzb24gdGhlIHBlcmlwaGVyYWwgbGVuZ3RoIG9mIHRoZSBoYWxmIGJlYXJpbmdzIGNhbiBvbmx5IGJlIG1lYXN1cmVkIHVuZGVyIGEgY29uc3RyYWluaW5nIGxvYWQgYnkgdXNlIG9mIHNwZWNpYWxpemVkIG1lYXN1cmluZyBlcXVpcG1lbnQuIEluIGFkZGl0aW9uLCBtZWFzdXJpbmcgZXF1aXBtZW50IGRpZmZlcmVudCBmcm9tIHRoYXQgaWxsdXN0cmF0ZWQgaW4gdGhpcyBkb2N1bWVudCBjYW4gYmUgdXNlZCwgcHJvdmlkZWQgdGhlIG1lYXN1cmluZyBhY2N1cmFjeSBvZiB0aGUgZXF1aXBtZW50IGlzIGNvbnNpc3RlbnQgd2l0aCB0aGUgc3BlY2lmaWNhdGlvbnMgZ2l2ZW4gaW4gQ2xhdXNlwqAxNyAuIFRoaXMgZG9jdW1lbnQgZG9lcyBub3QgaW5jbHVkZSB0aGUgbWVhc3VyZW1lbnQgb2YgdGhlIHBhcnRpbmcgbGluZSB0YXBlci4gVGhpcyBkb2N1bWVudCBhcHBsaWVzIHRvIHRoaW4td2FsbGVkIGhhbGYgYmVhcmluZ3MsIHRoZSBzcGVjaWZpY2F0aW9ucyBvZiB3aGljaCBhcmUgZ2l2ZW4gaW4gPGVtPklTTzwvZW0+IMKgIDM1NDgg4oCRIDEgLiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNy81Ni83NTY4MSIsInV1aWQiOiI2YWIxZmJmNS00YTk3LTRhMTUtOTMwZi01OGYwOWMxZmQyMzEiLCJ0aXRsZSI6IklTTyAzNTQ4LTI6MjAyMCBQbGFpbiBiZWFyaW5ncyDigJQgVGhpbi13YWxsZWQgaGFsZiBiZWFyaW5ncyB3aXRoIG9yIHdpdGhvdXQgZmxhbmdlIOKAlCBQYXJ0IDI6IE1lYXN1cmVtZW50IG9mIHdhbGwgdGhpY2tuZXNzIGFuZCBmbGFuZ2UgdGhpY2tuZXNzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMCwib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgaW4gYWNjb3JkYW5jZSB3aXRoIElTTyAxMjMwMSB0aGUgY2hlY2tpbmcgb2YgdGhlIHdhbGwtdGhpY2tuZXNzIG9mIHRoaW4td2FsbGVkIGhhbGYgYmVhcmluZ3Mgd2l0aCBvciB3aXRob3V0IGZsYW5nZSBhbmQgZGVzY3JpYmVzIHRoZSBuZWNlc3NhcnkgY2hlY2tpbmcgbWV0aG9kcyBhbmQgbWVhc3VyaW5nIGVxdWlwbWVudC4gSXQgYXBwbGllcyB0byBhIG1heGltdW0gYmVhcmluZyBkaWFtZXRlciBvZiAxNTAgbW0uIEl0IGNhbiBiZSBhcHBsaWVkIHRvIGEgYmlnZ2VyIGRpYW1ldGVyLCBwcm92aWRlZCB0aGF0IHRoZXJlIGlzIGFuIGFncmVlbWVudCBiZXR3ZWVuIHRoZSBzdXBwbGllciBhbmQgdGhlIHVzZXIuICIsIm9iamVjdElEIjoiNzU2ODFfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gMzU0OC0yOjIwMjAgUGxhaW4gYmVhcmluZ3Mg4oCUIFRoaW4td2FsbGVkIGhhbGYgYmVhcmluZ3Mgd2l0aCBvciB3aXRob3V0IGZsYW5nZSDigJQgUGFydCAyOiBNZWFzdXJlbWVudCBvZiB3YWxsIHRoaWNrbmVzcyBhbmQgZmxhbmdlIHRoaWNrbmVzcyIsIm1hdGNoTGV2ZWwiOiJwYXJ0aWFsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iXX0sInRleHQiOnsidmFsdWUiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyBpbiBhY2NvcmRhbmNlIHdpdGggPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjAxIHRoZSBjaGVja2luZyBvZiB0aGUgd2FsbC10aGlja25lc3Mgb2YgdGhpbi13YWxsZWQgaGFsZiBiZWFyaW5ncyB3aXRoIG9yIHdpdGhvdXQgZmxhbmdlIGFuZCBkZXNjcmliZXMgdGhlIG5lY2Vzc2FyeSBjaGVja2luZyBtZXRob2RzIGFuZCBtZWFzdXJpbmcgZXF1aXBtZW50LiBJdCBhcHBsaWVzIHRvIGEgbWF4aW11bSBiZWFyaW5nIGRpYW1ldGVyIG9mIDE1MCBtbS4gSXQgY2FuIGJlIGFwcGxpZWQgdG8gYSBiaWdnZXIgZGlhbWV0ZXIsIHByb3ZpZGVkIHRoYXQgdGhlcmUgaXMgYW4gYWdyZWVtZW50IGJldHdlZW4gdGhlIHN1cHBsaWVyIGFuZCB0aGUgdXNlci4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDQvMTMvNDEzMzciLCJ1dWlkIjoiYjA1YmI1MjgtYzExMC00YTc4LWE2MmItYWRmYjUyYjM5Y2QxIiwidGl0bGUiOiJJU08gMzU0Ny03OjIwMDcgUGxhaW4gYmVhcmluZ3Mg4oCUIFdyYXBwZWQgYnVzaGVzIOKAlCBQYXJ0IDc6IE1lYXN1cmVtZW50IG9mIHdhbGwgdGhpY2tuZXNzIG9mIHRoaW4td2FsbGVkIGJ1c2hlcyIsInN0YXR1cyI6IldpdGhkcmF3biIsInllYXIiOjIwMjAsIm9yZGVyIjoxMDAsInRleHQiOiJJU08gMzU0NzoyMDA3IGRlc2NyaWJlcywgZm9sbG93aW5nIElTTyAxMjMwMSwgdGhlIGNoZWNraW5nIG1ldGhvZHMgYW5kIG1lYXN1cmluZyBlcXVpcG1lbnQgdXNlZCBmb3IgbWVhc3VyaW5nIHRoZSB0b3RhbCB3YWxsIHRoaWNrbmVzcyBvZiB0aGluLXdhbGxlZCBidXNoZXMgaW4gdGhlIGZpbmlzaGVkIHN0YXRlLiAiLCJvYmplY3RJRCI6IjQxMzM3XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDM1NDctNzoyMDA3IFBsYWluIGJlYXJpbmdzIOKAlCBXcmFwcGVkIGJ1c2hlcyDigJQgUGFydCA3OiBNZWFzdXJlbWVudCBvZiB3YWxsIHRoaWNrbmVzcyBvZiB0aGluLXdhbGxlZCBidXNoZXMiLCJtYXRjaExldmVsIjoicGFydGlhbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIl19LCJ0ZXh0Ijp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDM1NDc6MjAwNyBkZXNjcmliZXMsIGZvbGxvd2luZyA8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+MDEsIHRoZSBjaGVja2luZyBtZXRob2RzIGFuZCBtZWFzdXJpbmcgZXF1aXBtZW50IHVzZWQgZm9yIG1lYXN1cmluZyB0aGUgdG90YWwgd2FsbCB0aGlja25lc3Mgb2YgdGhpbi13YWxsZWQgYnVzaGVzIGluIHRoZSBmaW5pc2hlZCBzdGF0ZS4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDQvMTMvNDEzMzYiLCJ1dWlkIjoiMTZhOWE1YjQtOWQzZi00MGE0LTg0MGUtNDQ5YzJjMjc4ZGRhIiwidGl0bGUiOiJJU08gMzU0Ny02OjIwMDcgUGxhaW4gYmVhcmluZ3Mg4oCUIFdyYXBwZWQgYnVzaGVzIOKAlCBQYXJ0IDY6IENoZWNraW5nIHRoZSBpbnNpZGUgZGlhbWV0ZXIiLCJzdGF0dXMiOiJXaXRoZHJhd24iLCJ5ZWFyIjoyMDIwLCJvcmRlciI6MTAwLCJ0ZXh0IjoiSVNPIDM1NDctNjoyMDA3IHNwZWNpZmllcywgZm9sbG93aW5nIElTTyAxMjMwMSwgdGhlIGNoZWNraW5nIG9mIHRoZSBpbnNpZGUgZGlhbWV0ZXIgb2Ygd3JhcHBlZCBidXNoZXMgYW5kIGRlc2NyaWJlcyB0aGUgbmVjZXNzYXJ5IGNoZWNraW5nIG1ldGhvZHMgYW5kIG1lYXN1cmluZyBlcXVpcG1lbnQuIFdyYXBwZWQgYnVzaGVzIGluIHRoZSBmcmVlIGNvbmRpdGlvbiBhcmUgZmxleGlibGUsIGJ1dCBhZnRlciBpbnNlcnRpb24gdGhleSBhZGFwdCBsYXJnZWx5IHRvIHRoZSBzaGFwZSBvZiB0aGUgaG91c2luZyBib3JlIGR1ZSB0byB0aGUgaW50ZXJmZXJlbmNlIGJldHdlZW4gdGhlIG91dHNpZGUgZGlhbWV0ZXIgb2YgdGhlIGJ1c2ggYW5kIHRoZSBob3VzaW5nIGJvcmUuICIsIm9iamVjdElEIjoiNDEzMzZfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gMzU0Ny02OjIwMDcgUGxhaW4gYmVhcmluZ3Mg4oCUIFdyYXBwZWQgYnVzaGVzIOKAlCBQYXJ0IDY6IENoZWNraW5nIHRoZSBpbnNpZGUgZGlhbWV0ZXIiLCJtYXRjaExldmVsIjoicGFydGlhbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIl19LCJ0ZXh0Ijp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDM1NDctNjoyMDA3IHNwZWNpZmllcywgZm9sbG93aW5nIDxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT4wMSwgdGhlIGNoZWNraW5nIG9mIHRoZSBpbnNpZGUgZGlhbWV0ZXIgb2Ygd3JhcHBlZCBidXNoZXMgYW5kIGRlc2NyaWJlcyB0aGUgbmVjZXNzYXJ5IGNoZWNraW5nIG1ldGhvZHMgYW5kIG1lYXN1cmluZyBlcXVpcG1lbnQuIFdyYXBwZWQgYnVzaGVzIGluIHRoZSBmcmVlIGNvbmRpdGlvbiBhcmUgZmxleGlibGUsIGJ1dCBhZnRlciBpbnNlcnRpb24gdGhleSBhZGFwdCBsYXJnZWx5IHRvIHRoZSBzaGFwZSBvZiB0aGUgaG91c2luZyBib3JlIGR1ZSB0byB0aGUgaW50ZXJmZXJlbmNlIGJldHdlZW4gdGhlIG91dHNpZGUgZGlhbWV0ZXIgb2YgdGhlIGJ1c2ggYW5kIHRoZSBob3VzaW5nIGJvcmUuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA0LzEzLzQxMzM0IiwidXVpZCI6ImRiMDc4NjQyLTYyODctNDcyYS04NDE1LTE4OGM0YTg4MThjMCIsInRpdGxlIjoiSVNPIDM1NDctNToyMDA3IFBsYWluIGJlYXJpbmdzIOKAlCBXcmFwcGVkIGJ1c2hlcyDigJQgUGFydCA1OiBDaGVja2luZyB0aGUgb3V0c2lkZSBkaWFtZXRlciIsInN0YXR1cyI6IldpdGhkcmF3biIsInllYXIiOjIwMjAsIm9yZGVyIjoxMDAsInRleHQiOiJJU08gMzU0Ny01OjIwMDcgc3BlY2lmaWVzLCBmb2xsb3dpbmcgSVNPIDEyMzAxLCB0aGUgY2hlY2tpbmcgb2YgdGhlIG91dHNpZGUgZGlhbWV0ZXIgb2Ygd3JhcHBlZCBidXNoZXMgKElTTyAzNTQ3LTI6MjAwNiwgbWV0aG9kcyBBLCBCIGFuZCBEKSBhbmQgZGVzY3JpYmVzIHRoZSBuZWNlc3NhcnkgY2hlY2tpbmcgbWV0aG9kcyBhbmQgbWVhc3VyaW5nIGVxdWlwbWVudC4gV3JhcHBlZCBidXNoZXMgaW4gdGhlIGZyZWUgY29uZGl0aW9uIGFyZSBmbGV4aWJsZSwgYnV0IGFmdGVyIGluc2VydGlvbiB0aGV5IGFkYXB0IGxhcmdlbHkgdG8gdGhlIHNoYXBlIG9mIHRoZSBob3VzaW5nIGJvcmUgZHVlIHRvIHRoZSBvdmVyc2l6ZSBiZXR3ZWVuIHRoZSBvdXRzaWRlIGRpYW1ldGVyIG9mIHRoZSBidXNoIGFuZCB0aGUgaG91c2luZyBib3JlLiBGb3IgdGhpcyByZWFzb24sIGNoZWNraW5nIG9mIHRoZSBvdXRzaWRlIGRpYW1ldGVyIG9mIHdyYXBwZWQgYnVzaGVzIGNhbiBvbmx5IGJlIGNhcnJpZWQgb3V0IHVuZGVyIGEgY29uc3RyYWluaW5nIGxvYWQgYnkgdXNlIG9mIHNwZWNpYWxpemVkIG1lYXN1cmluZyBlcXVpcG1lbnQuICIsIm9iamVjdElEIjoiNDEzMzRfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gMzU0Ny01OjIwMDcgUGxhaW4gYmVhcmluZ3Mg4oCUIFdyYXBwZWQgYnVzaGVzIOKAlCBQYXJ0IDU6IENoZWNraW5nIHRoZSBvdXRzaWRlIGRpYW1ldGVyIiwibWF0Y2hMZXZlbCI6InBhcnRpYWwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiAzNTQ3LTU6MjAwNyBzcGVjaWZpZXMsIGZvbGxvd2luZyA8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+MDEsIHRoZSBjaGVja2luZyBvZiB0aGUgb3V0c2lkZSBkaWFtZXRlciBvZiB3cmFwcGVkIGJ1c2hlcyAoPGVtPklTTzwvZW0+IDM1NDctMjoyMDA2LCBtZXRob2RzIEEsIEIgYW5kIEQpIGFuZCBkZXNjcmliZXMgdGhlIG5lY2Vzc2FyeSBjaGVja2luZyBtZXRob2RzIGFuZCBtZWFzdXJpbmcgZXF1aXBtZW50LiBXcmFwcGVkIGJ1c2hlcyBpbiB0aGUgZnJlZSBjb25kaXRpb24gYXJlIGZsZXhpYmxlLCBidXQgYWZ0ZXIgaW5zZXJ0aW9uIHRoZXkgYWRhcHQgbGFyZ2VseSB0byB0aGUgc2hhcGUgb2YgdGhlIGhvdXNpbmcgYm9yZSBkdWUgdG8gdGhlIG92ZXJzaXplIGJldHdlZW4gdGhlIG91dHNpZGUgZGlhbWV0ZXIgb2YgdGhlIGJ1c2ggYW5kIHRoZSBob3VzaW5nIGJvcmUuIEZvciB0aGlzIHJlYXNvbiwgY2hlY2tpbmcgb2YgdGhlIG91dHNpZGUgZGlhbWV0ZXIgb2Ygd3JhcHBlZCBidXNoZXMgY2FuIG9ubHkgYmUgY2FycmllZCBvdXQgdW5kZXIgYSBjb25zdHJhaW5pbmcgbG9hZCBieSB1c2Ugb2Ygc3BlY2lhbGl6ZWQgbWVhc3VyaW5nIGVxdWlwbWVudC4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDUvNjcvNTY3MDkiLCJ1dWlkIjoiNDM5NTlhMTEtYjczYi00MjJlLTlhMzAtZDY4MWFmZjU0ODJlIiwidGl0bGUiOiJJU08gMzU0OC0zOjIwMTIgUGxhaW4gYmVhcmluZ3Mg4oCUIFRoaW4td2FsbGVkIGhhbGYgYmVhcmluZ3Mgd2l0aCBvciB3aXRob3V0IGZsYW5nZSDigJQgUGFydCAzOiBNZWFzdXJlbWVudCBvZiBwZXJpcGhlcmFsIGxlbmd0aCIsInN0YXR1cyI6IldpdGhkcmF3biIsInllYXIiOjIwMjMsIm9yZGVyIjoxMDAsInRleHQiOiJUaGlzIHBhcnQgb2YgSVNPIDM1NDggc3BlY2lmaWVzLCBhY2NvcmRpbmcgdG8gSVNPIDEyMzAxLCB0aGUgY2hlY2tpbmcgb2YgdGhlIHBlcmlwaGVyYWwgbGVuZ3RoIG9mIHRoaW4td2FsbGVkIGhhbGYgYmVhcmluZ3Mgd2l0aCBvciB3aXRob3V0IGZsYW5nZSwgYW5kIGRlc2NyaWJlcyB0aGUgbmVjZXNzYXJ5IGNoZWNraW5nIG1ldGhvZHMgYW5kIG1lYXN1cmluZyBlcXVpcG1lbnQuIFRoaW4td2FsbGVkIGhhbGYgYmVhcmluZ3MgYXJlIGZsZXhpYmxlIGFuZCwgaW4gdGhlIGZyZWUgY29uZGl0aW9uLCBkbyBub3QgY29uZm9ybSB0byBhIGN5bGluZHJpY2FsIHByb2ZpbGUuIFRoaXMgaXMgb25lIHJlYXNvbiB0aGUgcGVyaXBoZXJhbCBsZW5ndGggb2YgdGhlIGhhbGYgYmVhcmluZ3MgY2FuIG9ubHkgYmUgbWVhc3VyZWQgdW5kZXIgYSBjb25zdHJhaW5pbmcgbG9hZCBieSB1c2Ugb2Ygc3BlY2lhbGl6ZWQgbWVhc3VyaW5nIGVxdWlwbWVudC4gSW4gYWRkaXRpb24sIG1lYXN1cmluZyBlcXVpcG1lbnQgZGlmZmVyZW50IGZyb20gdGhhdCBpbGx1c3RyYXRlZCBpbiB0aGlzIHBhcnQgb2YgSVNPIDM1NDggY2FuIGJlIHVzZWQsIHByb3ZpZGVkIHRoZSBtZWFzdXJpbmcgYWNjdXJhY3kgb2YgdGhlIGVxdWlwbWVudCBpcyBjb25zaXN0ZW50IHdpdGggdGhlIHNwZWNpZmljYXRpb25zIGdpdmVuIGluIENsYXVzZSAxNy4gVGhpcyBwYXJ0IG9mIElTTyAzNTQ4IGRvZXMgbm90IGluY2x1ZGUgbWVhc3VyZW1lbnQgb2YgdGhlIHBhcnRpbmcgbGluZSB0YXBlci4gVGhpcyBwYXJ0IG9mIElTTyAzNTQ4IGFwcGxpZXMgdG8gdGhpbi13YWxsZWQgaGFsZiBiZWFyaW5ncywgdGhlIHNwZWNpZmljYXRpb25zIG9mIHdoaWNoIGFyZSBnaXZlbiBpbiBJU08gMzU0OC0xICIsIm9iamVjdElEIjoiNTY3MDlfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gMzU0OC0zOjIwMTIgUGxhaW4gYmVhcmluZ3Mg4oCUIFRoaW4td2FsbGVkIGhhbGYgYmVhcmluZ3Mgd2l0aCBvciB3aXRob3V0IGZsYW5nZSDigJQgUGFydCAzOiBNZWFzdXJlbWVudCBvZiBwZXJpcGhlcmFsIGxlbmd0aCIsIm1hdGNoTGV2ZWwiOiJwYXJ0aWFsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iXX0sInRleHQiOnsidmFsdWUiOiJUaGlzIHBhcnQgb2YgPGVtPklTTzwvZW0+IDM1NDggc3BlY2lmaWVzLCBhY2NvcmRpbmcgdG8gPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjAxLCB0aGUgY2hlY2tpbmcgb2YgdGhlIHBlcmlwaGVyYWwgbGVuZ3RoIG9mIHRoaW4td2FsbGVkIGhhbGYgYmVhcmluZ3Mgd2l0aCBvciB3aXRob3V0IGZsYW5nZSwgYW5kIGRlc2NyaWJlcyB0aGUgbmVjZXNzYXJ5IGNoZWNraW5nIG1ldGhvZHMgYW5kIG1lYXN1cmluZyBlcXVpcG1lbnQuIFRoaW4td2FsbGVkIGhhbGYgYmVhcmluZ3MgYXJlIGZsZXhpYmxlIGFuZCwgaW4gdGhlIGZyZWUgY29uZGl0aW9uLCBkbyBub3QgY29uZm9ybSB0byBhIGN5bGluZHJpY2FsIHByb2ZpbGUuIFRoaXMgaXMgb25lIHJlYXNvbiB0aGUgcGVyaXBoZXJhbCBsZW5ndGggb2YgdGhlIGhhbGYgYmVhcmluZ3MgY2FuIG9ubHkgYmUgbWVhc3VyZWQgdW5kZXIgYSBjb25zdHJhaW5pbmcgbG9hZCBieSB1c2Ugb2Ygc3BlY2lhbGl6ZWQgbWVhc3VyaW5nIGVxdWlwbWVudC4gSW4gYWRkaXRpb24sIG1lYXN1cmluZyBlcXVpcG1lbnQgZGlmZmVyZW50IGZyb20gdGhhdCBpbGx1c3RyYXRlZCBpbiB0aGlzIHBhcnQgb2YgPGVtPklTTzwvZW0+IDM1NDggY2FuIGJlIHVzZWQsIHByb3ZpZGVkIHRoZSBtZWFzdXJpbmcgYWNjdXJhY3kgb2YgdGhlIGVxdWlwbWVudCBpcyBjb25zaXN0ZW50IHdpdGggdGhlIHNwZWNpZmljYXRpb25zIGdpdmVuIGluIENsYXVzZSAxNy4gVGhpcyBwYXJ0IG9mIDxlbT5JU088L2VtPiAzNTQ4IGRvZXMgbm90IGluY2x1ZGUgbWVhc3VyZW1lbnQgb2YgdGhlIHBhcnRpbmcgbGluZSB0YXBlci4gVGhpcyBwYXJ0IG9mIDxlbT5JU088L2VtPiAzNTQ4IGFwcGxpZXMgdG8gdGhpbi13YWxsZWQgaGFsZiBiZWFyaW5ncywgdGhlIHNwZWNpZmljYXRpb25zIG9mIHdoaWNoIGFyZSBnaXZlbiBpbiA8ZW0+SVNPPC9lbT4gMzU0OC0xICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA0LzQ0LzQ0NDAwIiwidXVpZCI6IjIyYzM3OWQwLWNjZDUtNGNkZS1hMzE0LTAwNmNkZjFkY2RhMiIsInRpdGxlIjoiSVNPIDM1NDgtMjoyMDA5IFBsYWluIGJlYXJpbmdzIOKAlCBUaGluLXdhbGxlZCBoYWxmIGJlYXJpbmdzIHdpdGggb3Igd2l0aG91dCBmbGFuZ2Ug4oCUIFBhcnQgMjogTWVhc3VyZW1lbnQgb2Ygd2FsbCB0aGlja25lc3MgYW5kIGZsYW5nZSB0aGlja25lc3MiLCJzdGF0dXMiOiJXaXRoZHJhd24iLCJ5ZWFyIjoyMDIwLCJvcmRlciI6MTAwLCJ0ZXh0IjoiSVNPIDM1NDgtMjoyMDA5IHNwZWNpZmllcywgaW4gYWNjb3JkYW5jZSB3aXRoIElTTyAxMjMwMSwgdGhlIGNoZWNraW5nIG9mIHRoZSB3YWxsLXRoaWNrbmVzcyBvZiB0aGluLXdhbGxlZCBoYWxmIGJlYXJpbmdzIHdpdGggb3Igd2l0aG91dCBmbGFuZ2UgYW5kIGRlc2NyaWJlcyB0aGUgcmVxdWlyZWQgY2hlY2tpbmcgbWV0aG9kcyBhbmQgbWVhc3VyaW5nIGVxdWlwbWVudC4gSXQgYXBwbGllcyB0byBhIG1heGltdW0gYmVhcmluZyBkaWFtZXRlciBvZiAxNTAgbW0uIElmIElTTyAzNTQ4LTI6MjAwOSBpcyBhcHBsaWVkIHRvIGEgZ3JlYXRlciBkaWFtZXRlciwgYW4gYWdyZWVtZW50IGNhbiBiZSBmb3JtdWxhdGVkIGJldHdlZW4gdGhlIHN1cHBsaWVyIGFuZCB0aGUgdXNlci4gIiwib2JqZWN0SUQiOiI0NDQwMF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiAzNTQ4LTI6MjAwOSBQbGFpbiBiZWFyaW5ncyDigJQgVGhpbi13YWxsZWQgaGFsZiBiZWFyaW5ncyB3aXRoIG9yIHdpdGhvdXQgZmxhbmdlIOKAlCBQYXJ0IDI6IE1lYXN1cmVtZW50IG9mIHdhbGwgdGhpY2tuZXNzIGFuZCBmbGFuZ2UgdGhpY2tuZXNzIiwibWF0Y2hMZXZlbCI6InBhcnRpYWwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiAzNTQ4LTI6MjAwOSBzcGVjaWZpZXMsIGluIGFjY29yZGFuY2Ugd2l0aCA8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+MDEsIHRoZSBjaGVja2luZyBvZiB0aGUgd2FsbC10aGlja25lc3Mgb2YgdGhpbi13YWxsZWQgaGFsZiBiZWFyaW5ncyB3aXRoIG9yIHdpdGhvdXQgZmxhbmdlIGFuZCBkZXNjcmliZXMgdGhlIHJlcXVpcmVkIGNoZWNraW5nIG1ldGhvZHMgYW5kIG1lYXN1cmluZyBlcXVpcG1lbnQuIEl0IGFwcGxpZXMgdG8gYSBtYXhpbXVtIGJlYXJpbmcgZGlhbWV0ZXIgb2YgMTUwIG1tLiBJZiA8ZW0+SVNPPC9lbT4gMzU0OC0yOjIwMDkgaXMgYXBwbGllZCB0byBhIGdyZWF0ZXIgZGlhbWV0ZXIsIGFuIGFncmVlbWVudCBjYW4gYmUgZm9ybXVsYXRlZCBiZXR3ZWVuIHRoZSBzdXBwbGllciBhbmQgdGhlIHVzZXIuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA1LzcxLzU3MTAwIiwidXVpZCI6ImNiYzliZjNlLTI0NzYtNDZkOC04ZTBkLTlhODU2Zjg3YTBmOCIsInRpdGxlIjoiSVNPL1RSIDEyMzUzLTM6MjAxMyBSb2FkIHZlaGljbGVzIOKAlCBUcmFmZmljIGFjY2lkZW50IGFuYWx5c2lzIOKAlCBQYXJ0IDM6IEd1aWRlbGluZXMgZm9yIHRoZSBpbnRlcnByZXRhdGlvbiBvZiByZWNvcmRlZCBjcmFzaCBwdWxzZSBkYXRhIHRvIGRldGVybWluZSBpbXBhY3Qgc2V2ZXJpdHkiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIyLCJvcmRlciI6MTEsInRleHQiOiJJU08vVFIgMTIzNTMtMzoyMDEzIGRlc2NyaWJlcyB0aGUgZGV0ZXJtaW5hdGlvbiBvZiBpbXBhY3Qgc2V2ZXJpdHkgaW4gcm9hZCB2ZWhpY2xlIGFjY2lkZW50cyBhcyBkZWZpbmVkIGluIElTTyAxMjM1My0yLCBiYXNlZCBvbiByZWNvcmRlZCBhY2NlbGVyYXRpb24gYW5kIHZlbG9jaXR5IGRhdGEgYW5kIGRlcml2ZWQgcGFyYW1ldGVycyBmcm9tIHZlaGljbGUgY3Jhc2ggcHVsc2UgcmVjb3JkZXJzIG9yIGV2ZW50IGRhdGEgcmVjb3JkZXJzLCBpbmNsdWRpbmcgZGF0YSBmcm9tIHNlbGYtY29udGFpbmVkIGRldmljZXMgb3IgdmVoaWNsZSBpbnRlZ3JhdGVkIGZ1bmN0aW9uYWxpdGllcy4gIiwib2JqZWN0SUQiOiI1NzEwMF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPi9UUiA8ZW0+MTIzPC9lbT41My0zOjIwMTMgUm9hZCB2ZWhpY2xlcyDigJQgVHJhZmZpYyBhY2NpZGVudCBhbmFseXNpcyDigJQgUGFydCAzOiBHdWlkZWxpbmVzIGZvciB0aGUgaW50ZXJwcmV0YXRpb24gb2YgcmVjb3JkZWQgY3Jhc2ggcHVsc2UgZGF0YSB0byBkZXRlcm1pbmUgaW1wYWN0IHNldmVyaXR5IiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPi9UUiA8ZW0+MTIzPC9lbT41My0zOjIwMTMgZGVzY3JpYmVzIHRoZSBkZXRlcm1pbmF0aW9uIG9mIGltcGFjdCBzZXZlcml0eSBpbiByb2FkIHZlaGljbGUgYWNjaWRlbnRzIGFzIGRlZmluZWQgaW4gPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjUzLTIsIGJhc2VkIG9uIHJlY29yZGVkIGFjY2VsZXJhdGlvbiBhbmQgdmVsb2NpdHkgZGF0YSBhbmQgZGVyaXZlZCBwYXJhbWV0ZXJzIGZyb20gdmVoaWNsZSBjcmFzaCBwdWxzZSByZWNvcmRlcnMgb3IgZXZlbnQgZGF0YSByZWNvcmRlcnMsIGluY2x1ZGluZyBkYXRhIGZyb20gc2VsZi1jb250YWluZWQgZGV2aWNlcyBvciB2ZWhpY2xlIGludGVncmF0ZWQgZnVuY3Rpb25hbGl0aWVzLiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMS83NC8xNzQzMSIsInV1aWQiOiI2ZjU1YjU2Mi1lZjIyLTQxZTEtYmYwMC0yNmU3ZDQzMmUzODYiLCJ0aXRsZSI6IklTTyA5NjE4OjE5OTYgQWVyb3NwYWNlIOKAlCBOdXRzLCBoZXhhZ29uYWwsIHNsb3R0ZWQgKGNhc3RlbGxhdGVkKSwgcmVkdWNlZCBoZWlnaHQsIG5vcm1hbCBhY3Jvc3MgZmxhdHMsIHdpdGggTUogdGhyZWFkcywgY2xhc3NpZmljYXRpb25zOiA0NTAgTVBhIChhdCBhbWJpZW50IHRlbXBlcmF0dXJlKS8xMjAgZGVncmVlcyBDLCA0NTAgTVBhIChhdCBhbWJpZW50IHRlbXBlcmF0dXJlKS8yMzUgZGVncmVlcyBDLCA2MDAgTVBhIChhdCBhbWJpZW50IHRlbXBlcmF0dXJlKS80MjUgZGVncmVlcyBDLCA5MDAgTVBhIChhdCBhbWJpZW50IHRlbXBlcmF0dXJlKS8yMzUgZGVncmVlcyBDLCA5MDAgTVBhIChhdCBhbWJpZW50IHRlbXBlcmF0dXJlKS8zMTUgZGVncmVlcyBDLCA5MDAgTVBhIChhdCBhbWJpZW50IHRlbXBlcmF0dXJlKS82NTAgZGVncmVlcyBDLCAxIDEwMCBNUGEgKGF0IGFtYmllbnQgdGVtcGVyYXR1cmUpLzIzNSBkZWdyZWVzIEMsIDEgMTAwIE1QYSAoYXQgYW1iaWVudCB0ZW1wZXJhdHVyZSkvNzMwIGRlZ3JlZXMgQyBhbmQgMSAyNTAgTVBhIChhdCBhbWJpZW50IHRlbXBlcmF0dXJlKS82MDAgZGVncmVlcyBDIOKAlCBEaW1lbnNpb25zIiwic3RhdHVzIjoiV2l0aGRyYXduIiwieWVhciI6MjAxNiwib3JkZXIiOjEwMCwidGV4dCI6IlNwZWNpZmllcyB0aGUgZGltZW5zaW9ucyBvZiBoZXhhZ29uIHNsb3R0ZWQgbnV0cyBvZiBzZXZlcmFsIGNsYXNzaWZpY2F0aW9ucywgcmVkdWNlZCBoZWlnaHQsIHdpdGggTUogdGhyZWFkcy4gSW50ZW5kZWQgdG8gYmUgdXNlZCB3aXRoIHNwbGl0IHBpbnMgaW4gY29uZm9ybWl0eSB3aXRoIElTTyAxMjM0LiAiLCJvYmplY3RJRCI6IjE3NDMxXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDk2MTg6MTk5NiBBZXJvc3BhY2Ug4oCUIE51dHMsIGhleGFnb25hbCwgc2xvdHRlZCAoY2FzdGVsbGF0ZWQpLCByZWR1Y2VkIGhlaWdodCwgbm9ybWFsIGFjcm9zcyBmbGF0cywgd2l0aCBNSiB0aHJlYWRzLCBjbGFzc2lmaWNhdGlvbnM6IDQ1MCBNUGEgKGF0IGFtYmllbnQgdGVtcGVyYXR1cmUpLzEyMCBkZWdyZWVzIEMsIDQ1MCBNUGEgKGF0IGFtYmllbnQgdGVtcGVyYXR1cmUpLzIzNSBkZWdyZWVzIEMsIDYwMCBNUGEgKGF0IGFtYmllbnQgdGVtcGVyYXR1cmUpLzQyNSBkZWdyZWVzIEMsIDkwMCBNUGEgKGF0IGFtYmllbnQgdGVtcGVyYXR1cmUpLzIzNSBkZWdyZWVzIEMsIDkwMCBNUGEgKGF0IGFtYmllbnQgdGVtcGVyYXR1cmUpLzMxNSBkZWdyZWVzIEMsIDkwMCBNUGEgKGF0IGFtYmllbnQgdGVtcGVyYXR1cmUpLzY1MCBkZWdyZWVzIEMsIDEgMTAwIE1QYSAoYXQgYW1iaWVudCB0ZW1wZXJhdHVyZSkvMjM1IGRlZ3JlZXMgQywgMSAxMDAgTVBhIChhdCBhbWJpZW50IHRlbXBlcmF0dXJlKS83MzAgZGVncmVlcyBDIGFuZCAxIDI1MCBNUGEgKGF0IGFtYmllbnQgdGVtcGVyYXR1cmUpLzYwMCBkZWdyZWVzIEMg4oCUIERpbWVuc2lvbnMiLCJtYXRjaExldmVsIjoicGFydGlhbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIl19LCJ0ZXh0Ijp7InZhbHVlIjoiU3BlY2lmaWVzIHRoZSBkaW1lbnNpb25zIG9mIGhleGFnb24gc2xvdHRlZCBudXRzIG9mIHNldmVyYWwgY2xhc3NpZmljYXRpb25zLCByZWR1Y2VkIGhlaWdodCwgd2l0aCBNSiB0aHJlYWRzLiBJbnRlbmRlZCB0byBiZSB1c2VkIHdpdGggc3BsaXQgcGlucyBpbiBjb25mb3JtaXR5IHdpdGggPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjQuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA3LzQ2Lzc0NjU4IiwidXVpZCI6ImQ1MzQ2M2I1LWFmNjEtNDg1Yi04NjkyLWU2ZGJjZWMwNWQzMCIsInRpdGxlIjoiSVNPIDEwODQ4LTU6MjAyMCBBY291c3RpY3Mg4oCUIExhYm9yYXRvcnkgYW5kIGZpZWxkIG1lYXN1cmVtZW50IG9mIHRoZSBmbGFua2luZyB0cmFuc21pc3Npb24gZm9yIGFpcmJvcm5lLCBpbXBhY3QgYW5kIGJ1aWxkaW5nIHNlcnZpY2UgZXF1aXBtZW50IHNvdW5kIGJldHdlZW4gYWRqb2luaW5nIHJvb21zIOKAlCBQYXJ0IDU6IFJhZGlhdGlvbiBlZmZpY2llbmNpZXMgb2YgYnVpbGRpbmcgZWxlbWVudHMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIwLCJvcmRlciI6MTEsInRleHQiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyBtZWFzdXJlbWVudCBtZXRob2RzIHRvIGNoYXJhY3Rlcml6ZSBpbiB0aGUgbGFib3JhdG9yeSB0aGUgYWNvdXN0aWMgcmFkaWF0aW9uIG9mIGEgYnVpbGRpbmcgZWxlbWVudCB3aGVuIGl0IGlzIGRpcmVjdGx5IGV4Y2l0ZWQgYnkgYW4gYWlyYm9ybmUgb3Igc3RydWN0dXJlLWJvcm5lIHNvdXJjZS4gSXQgaXMgYXBwbGljYWJsZSB0byBzaW5nbGUtbGVhZiBhbmQgZG91YmxlLWxlYWYgZWxlbWVudHMgKHNlZSBJU08gMTIzNTQtMToyMDE3IEFubmV4IEYsIEYyKS4gVGhlIG1lYXN1cmVkIHF1YW50aXR5IGNhbiBiZSB1c2VkIGFzIGlucHV0IGRhdGEgZm9yIHByZWRpY3Rpb24gbWV0aG9kcywgc3VjaCBhcyBJU08gMTIzNTQtMSBhbmQgSVNPIDEyMzU0LTIsIHRvIGNvbXBhcmUgcHJvZHVjdHMsIG9yIHRvIGV4cHJlc3MgYSByZXF1aXJlbWVudC4gIiwib2JqZWN0SUQiOiI3NDY1OF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiAxMDg0OC01OjIwMjAgQWNvdXN0aWNzIOKAlCBMYWJvcmF0b3J5IGFuZCBmaWVsZCBtZWFzdXJlbWVudCBvZiB0aGUgZmxhbmtpbmcgdHJhbnNtaXNzaW9uIGZvciBhaXJib3JuZSwgaW1wYWN0IGFuZCBidWlsZGluZyBzZXJ2aWNlIGVxdWlwbWVudCBzb3VuZCBiZXR3ZWVuIGFkam9pbmluZyByb29tcyDigJQgUGFydCA1OiBSYWRpYXRpb24gZWZmaWNpZW5jaWVzIG9mIGJ1aWxkaW5nIGVsZW1lbnRzIiwibWF0Y2hMZXZlbCI6InBhcnRpYWwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyJdfSwidGV4dCI6eyJ2YWx1ZSI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIG1lYXN1cmVtZW50IG1ldGhvZHMgdG8gY2hhcmFjdGVyaXplIGluIHRoZSBsYWJvcmF0b3J5IHRoZSBhY291c3RpYyByYWRpYXRpb24gb2YgYSBidWlsZGluZyBlbGVtZW50IHdoZW4gaXQgaXMgZGlyZWN0bHkgZXhjaXRlZCBieSBhbiBhaXJib3JuZSBvciBzdHJ1Y3R1cmUtYm9ybmUgc291cmNlLiBJdCBpcyBhcHBsaWNhYmxlIHRvIHNpbmdsZS1sZWFmIGFuZCBkb3VibGUtbGVhZiBlbGVtZW50cyAoc2VlIDxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT41NC0xOjIwMTcgQW5uZXggRiwgRjIpLiBUaGUgbWVhc3VyZWQgcXVhbnRpdHkgY2FuIGJlIHVzZWQgYXMgaW5wdXQgZGF0YSBmb3IgcHJlZGljdGlvbiBtZXRob2RzLCBzdWNoIGFzIDxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT41NC0xIGFuZCA8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+NTQtMiwgdG8gY29tcGFyZSBwcm9kdWN0cywgb3IgdG8gZXhwcmVzcyBhIHJlcXVpcmVtZW50LiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNi83Mi82NzIyNyIsInV1aWQiOiJmYWY0NTQ4Mi1iMGE3LTQyZTktYjUzMi02MzIyMDA0ZDVlYmYiLCJ0aXRsZSI6IklTTyAxMDg0OC0yOjIwMTcgQWNvdXN0aWNzIOKAlCBMYWJvcmF0b3J5IGFuZCBmaWVsZCBtZWFzdXJlbWVudCBvZiBmbGFua2luZyB0cmFuc21pc3Npb24gZm9yIGFpcmJvcm5lLCBpbXBhY3QgYW5kIGJ1aWxkaW5nIHNlcnZpY2UgZXF1aXBtZW50IHNvdW5kIGJldHdlZW4gYWRqb2luaW5nIHJvb21zIOKAlCBQYXJ0IDI6IEFwcGxpY2F0aW9uIHRvIFR5cGUgQiBlbGVtZW50cyB3aGVuIHRoZSBqdW5jdGlvbiBoYXMgYSBzbWFsbCBpbmZsdWVuY2UiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIyLCJvcmRlciI6MTEsInRleHQiOiJJU08gMTA4NDggKGFsbCBwYXJ0cykgc3BlY2lmaWVzIG1lYXN1cmVtZW50IG1ldGhvZHMgdG8gY2hhcmFjdGVyaXplIHRoZSBmbGFua2luZyB0cmFuc21pc3Npb24gb2Ygb25lIG9yIHNldmVyYWwgYnVpbGRpbmcgY29tcG9uZW50cy4gVGhpcyBkb2N1bWVudCBjb25zaWRlcnMgb25seSBsYWJvcmF0b3J5IG1lYXN1cmVtZW50cy4gVGhlIG1lYXN1cmVkIHF1YW50aXRpZXMgY2FuIGJlIHVzZWQgdG8gY29tcGFyZSBkaWZmZXJlbnQgcHJvZHVjdHMsIG9yIHRvIGV4cHJlc3MgYSByZXF1aXJlbWVudCwgb3IgYXMgaW5wdXQgZGF0YSBmb3IgcHJlZGljdGlvbiBtZXRob2RzLCBzdWNoIGFzIElTTyAxMjM1NOKAkTEgYW5kIElTTyAxMjM1NOKAkTIuIEhvd2V2ZXIsIHRoZSBtZWFzdXJlZCBxdWFudGl0aWVzIERuLGYsIExuLGYgYW5kIExuZTAsZiBvbmx5IHJlcHJlc2VudCB0aGUgcGVyZm9ybWFuY2Ugd2l0aCB0aGUgZGltZW5zaW9ucyBmb3IgdGhlIHRlc3Qgc3BlY2ltZW5zIGRlc2NyaWJlZCBpbiB0aGlzIGRvY3VtZW50LiBJU08gMTA4NDgtMjoyMDE3IGlzIHJlZmVycmVkIHRvIGluIElTTyAxMDg0OOKAkTE6MjAxNywgNC41IGFzIGJlaW5nIGEgc3VwcG9ydGluZyBwYXJ0IG9mIHRoZSBmcmFtZSBkb2N1bWVudC4gSXQgYXBwbGllcyB0byBUeXBlIEIgZWxlbWVudHMgYXMgZGVmaW5lZCBpbiBJU08gMTA4NDjigJExLCBzdWNoIGFzIHN1c3BlbmRlZCBjZWlsaW5ncywgYWNjZXNzIGZsb29ycywgbGlnaHQgdW5pbnRlcnJ1cHRlZCBmYcOnYWRlcyBvciBmbG9hdGluZyBmbG9vcnMuIFRoZSB0cmFuc21pc3Npb24gZnJvbSBvbmUgcm9vbSB0byBhbm90aGVyIGNhbiBvY2N1ciBzaW11bHRhbmVvdXNseSB0aHJvdWdoIHRoZSB0ZXN0IGVsZW1lbnQgYW5kIHZpYSB0aGUgcGxlbnVtIChpZiBhbnkpLiBGb3IgbWVhc3VyZW1lbnRzIG1hZGUgYWNjb3JkaW5nIHRvIHRoaXMgZG9jdW1lbnQsIHRoZSB0b3RhbCBzb3VuZCB0cmFuc21pc3Npb24gaXMgZGV0ZXJtaW5lZCBhbmQgaXQgaXMgbm90IHBvc3NpYmxlIHRvIHNlcGFyYXRlIHRoZSB0d28ga2luZHMgb2YgdHJhbnNtaXNzaW9uLiAiLCJvYmplY3RJRCI6IjY3MjI3XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDEwODQ4LTI6MjAxNyBBY291c3RpY3Mg4oCUIExhYm9yYXRvcnkgYW5kIGZpZWxkIG1lYXN1cmVtZW50IG9mIGZsYW5raW5nIHRyYW5zbWlzc2lvbiBmb3IgYWlyYm9ybmUsIGltcGFjdCBhbmQgYnVpbGRpbmcgc2VydmljZSBlcXVpcG1lbnQgc291bmQgYmV0d2VlbiBhZGpvaW5pbmcgcm9vbXMg4oCUIFBhcnQgMjogQXBwbGljYXRpb24gdG8gVHlwZSBCIGVsZW1lbnRzIHdoZW4gdGhlIGp1bmN0aW9uIGhhcyBhIHNtYWxsIGluZmx1ZW5jZSIsIm1hdGNoTGV2ZWwiOiJwYXJ0aWFsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gMTA4NDggKGFsbCBwYXJ0cykgc3BlY2lmaWVzIG1lYXN1cmVtZW50IG1ldGhvZHMgdG8gY2hhcmFjdGVyaXplIHRoZSBmbGFua2luZyB0cmFuc21pc3Npb24gb2Ygb25lIG9yIHNldmVyYWwgYnVpbGRpbmcgY29tcG9uZW50cy4gVGhpcyBkb2N1bWVudCBjb25zaWRlcnMgb25seSBsYWJvcmF0b3J5IG1lYXN1cmVtZW50cy4gVGhlIG1lYXN1cmVkIHF1YW50aXRpZXMgY2FuIGJlIHVzZWQgdG8gY29tcGFyZSBkaWZmZXJlbnQgcHJvZHVjdHMsIG9yIHRvIGV4cHJlc3MgYSByZXF1aXJlbWVudCwgb3IgYXMgaW5wdXQgZGF0YSBmb3IgcHJlZGljdGlvbiBtZXRob2RzLCBzdWNoIGFzIDxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT41NOKAkTEgYW5kIDxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT41NOKAkTIuIEhvd2V2ZXIsIHRoZSBtZWFzdXJlZCBxdWFudGl0aWVzIERuLGYsIExuLGYgYW5kIExuZTAsZiBvbmx5IHJlcHJlc2VudCB0aGUgcGVyZm9ybWFuY2Ugd2l0aCB0aGUgZGltZW5zaW9ucyBmb3IgdGhlIHRlc3Qgc3BlY2ltZW5zIGRlc2NyaWJlZCBpbiB0aGlzIGRvY3VtZW50LiA8ZW0+SVNPPC9lbT4gMTA4NDgtMjoyMDE3IGlzIHJlZmVycmVkIHRvIGluIDxlbT5JU088L2VtPiAxMDg0OOKAkTE6MjAxNywgNC41IGFzIGJlaW5nIGEgc3VwcG9ydGluZyBwYXJ0IG9mIHRoZSBmcmFtZSBkb2N1bWVudC4gSXQgYXBwbGllcyB0byBUeXBlIEIgZWxlbWVudHMgYXMgZGVmaW5lZCBpbiA8ZW0+SVNPPC9lbT4gMTA4NDjigJExLCBzdWNoIGFzIHN1c3BlbmRlZCBjZWlsaW5ncywgYWNjZXNzIGZsb29ycywgbGlnaHQgdW5pbnRlcnJ1cHRlZCBmYcOnYWRlcyBvciBmbG9hdGluZyBmbG9vcnMuIFRoZSB0cmFuc21pc3Npb24gZnJvbSBvbmUgcm9vbSB0byBhbm90aGVyIGNhbiBvY2N1ciBzaW11bHRhbmVvdXNseSB0aHJvdWdoIHRoZSB0ZXN0IGVsZW1lbnQgYW5kIHZpYSB0aGUgcGxlbnVtIChpZiBhbnkpLiBGb3IgbWVhc3VyZW1lbnRzIG1hZGUgYWNjb3JkaW5nIHRvIHRoaXMgZG9jdW1lbnQsIHRoZSB0b3RhbCBzb3VuZCB0cmFuc21pc3Npb24gaXMgZGV0ZXJtaW5lZCBhbmQgaXQgaXMgbm90IHBvc3NpYmxlIHRvIHNlcGFyYXRlIHRoZSB0d28ga2luZHMgb2YgdHJhbnNtaXNzaW9uLiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMy83NC8zNzQ3NCIsInV1aWQiOiIxMTNmM2RmOS1hMDJjLTQ4NTUtYjBmMC0xNmVlMWQ3YmEyMzYiLCJ0aXRsZSI6IklTTy9UUiA3ODYxOjIwMDMgUm9hZCB2ZWhpY2xlcyDigJQgSW5qdXJ5IHJpc2sgY3VydmVzIGZvciBldmFsdWF0aW9uIG9mIG9jY3VwYW50IHByb3RlY3Rpb24gaW4gZnJvbnRhbCBpbXBhY3QiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDAzLCJvcmRlciI6MTEsInRleHQiOiJJU08vVFIgNzg2MToyMDAyIHByZXNlbnRzIGluanVyeSByaXNrIGN1cnZlcyB0aGF0IGNhbiBiZSB1c2VkIGZvciBpbmp1cnkgcmlzayBhc3Nlc3NtZW50IGluIHRoZSBldmFsdWF0aW9uIG9mIG9jY3VwYW50IHByb3RlY3Rpb24gaW4gcm9hZC12ZWhpY2xlIGZyb250YWwgaW1wYWN0LiBUaGUgbWVhc3VyZW1lbnRzIHdlcmUgbWFkZSBvbiBmcm9udGFsLWltcGFjdCBjcmFzaCB0ZXN0IGR1bW1pZXMgd2hpY2ggcHJlc2VudCBhY2NlcHRhYmxlIGxldmVscyBvZiBiaW9maWRlbGl0eSByZXNwb25zZSBpbiBhY2NvcmRhbmNlIHdpdGggSVNPIDEyMzQ5LTEgYW5kIElTTyAxMjM0OS0yIGFuZCB3aGljaCBhcmUgdXNlZCBpbiB0aGUgZnJvbnRhbC1pbXBhY3QgdGVzdCBwcm9jZWR1cmVzIG9mIGV4aXN0aW5nIEludGVybmF0aW9uYWwgU3RhbmRhcmRzLiAiLCJvYmplY3RJRCI6IjM3NDc0XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+L1RSIDc4NjE6MjAwMyBSb2FkIHZlaGljbGVzIOKAlCBJbmp1cnkgcmlzayBjdXJ2ZXMgZm9yIGV2YWx1YXRpb24gb2Ygb2NjdXBhbnQgcHJvdGVjdGlvbiBpbiBmcm9udGFsIGltcGFjdCIsIm1hdGNoTGV2ZWwiOiJwYXJ0aWFsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4vVFIgNzg2MToyMDAyIHByZXNlbnRzIGluanVyeSByaXNrIGN1cnZlcyB0aGF0IGNhbiBiZSB1c2VkIGZvciBpbmp1cnkgcmlzayBhc3Nlc3NtZW50IGluIHRoZSBldmFsdWF0aW9uIG9mIG9jY3VwYW50IHByb3RlY3Rpb24gaW4gcm9hZC12ZWhpY2xlIGZyb250YWwgaW1wYWN0LiBUaGUgbWVhc3VyZW1lbnRzIHdlcmUgbWFkZSBvbiBmcm9udGFsLWltcGFjdCBjcmFzaCB0ZXN0IGR1bW1pZXMgd2hpY2ggcHJlc2VudCBhY2NlcHRhYmxlIGxldmVscyBvZiBiaW9maWRlbGl0eSByZXNwb25zZSBpbiBhY2NvcmRhbmNlIHdpdGggPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjQ5LTEgYW5kIDxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT40OS0yIGFuZCB3aGljaCBhcmUgdXNlZCBpbiB0aGUgZnJvbnRhbC1pbXBhY3QgdGVzdCBwcm9jZWR1cmVzIG9mIGV4aXN0aW5nIEludGVybmF0aW9uYWwgU3RhbmRhcmRzLiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMS82OC8xNjg0NiIsInV1aWQiOiJlMzM1Y2NkNy1lNGFmLTRiMzYtYTIxOC02YjJlYWJiNTM1OWQiLCJ0aXRsZSI6IklTTyA5MjE4OjIwMDIgQWVyb3NwYWNlIOKAlCBXYXNoZXJzLCBmbGF0LCBmb3IgcHVsbGV5cywgaW4gYWxsb3kgc3RlZWwgYW5kIGNhZG1pdW0gcGxhdGVkIG9yIGluIGNvcnJvc2lvbi1yZXNpc3RhbnQgc3RlZWwgYW5kIHBhc3NpdmF0ZWQg4oCUIERpbWVuc2lvbnMgYW5kIG1hc3NlcyIsInN0YXR1cyI6IldpdGhkcmF3biIsInllYXIiOjIwMjMsIm9yZGVyIjoxMDAsInRleHQiOiJJU08gOTIxODoyMDAyIHNwZWNpZmllcyB0aGUgY2hhcmFjdGVyaXN0aWNzIG9mIGZsYXQgd2FzaGVycyBpbiBhbGxveSBzdGVlbCBhbmQgY2FkbWl1bSBwbGF0ZWQgKGNsYXNzaWZpY2F0aW9uIDkwMCBNUGEvMjM1IMKwQykgb3IgaW4gY29ycm9zaW9uLXJlc2lzdGFudCBzdGVlbCBhbmQgcGFzc2l2YXRlZCAoY2xhc3NpZmljYXRpb24gOTAwIE1QYS80NTAgwrBDKS4gSVNPIDkyMTg6MjAwMiBpcyBhcHBsaWNhYmxlIHRvIHdhc2hlcnMgdXNlZCB3aXRoIElTTyA5MjE5IGJvbHRzLCBkaWFtZXRlciBjb2RlIDA1MCBhbmQgMDYwLCBJU08gOTIxNiBudXRzIGFuZCBJU08gMTIzNCBzcGxpdCBwaW5zIGluIHRoZSBhc3NlbWJseSBvZiBJU08gNzkzOSBwdWxsZXlzLiBJU08gOTIxODoyMDAyIGlzIGFsc28gYXBwbGljYWJsZSB0byB3YXNoZXJzIGluIHRoZSBhc3NlbWJseSBvZiBhaXJmcmFtZSByb2xsaW5nIGJlYXJpbmdzIG9yIHNwaGVyaWNhbCBiZWFyaW5ncy4gIiwib2JqZWN0SUQiOiIxNjg0Nl8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA5MjE4OjIwMDIgQWVyb3NwYWNlIOKAlCBXYXNoZXJzLCBmbGF0LCBmb3IgcHVsbGV5cywgaW4gYWxsb3kgc3RlZWwgYW5kIGNhZG1pdW0gcGxhdGVkIG9yIGluIGNvcnJvc2lvbi1yZXNpc3RhbnQgc3RlZWwgYW5kIHBhc3NpdmF0ZWQg4oCUIERpbWVuc2lvbnMgYW5kIG1hc3NlcyIsIm1hdGNoTGV2ZWwiOiJwYXJ0aWFsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gOTIxODoyMDAyIHNwZWNpZmllcyB0aGUgY2hhcmFjdGVyaXN0aWNzIG9mIGZsYXQgd2FzaGVycyBpbiBhbGxveSBzdGVlbCBhbmQgY2FkbWl1bSBwbGF0ZWQgKGNsYXNzaWZpY2F0aW9uIDkwMCBNUGEvMjM1IMKwQykgb3IgaW4gY29ycm9zaW9uLXJlc2lzdGFudCBzdGVlbCBhbmQgcGFzc2l2YXRlZCAoY2xhc3NpZmljYXRpb24gOTAwIE1QYS80NTAgwrBDKS4gPGVtPklTTzwvZW0+IDkyMTg6MjAwMiBpcyBhcHBsaWNhYmxlIHRvIHdhc2hlcnMgdXNlZCB3aXRoIDxlbT5JU088L2VtPiA5MjE5IGJvbHRzLCBkaWFtZXRlciBjb2RlIDA1MCBhbmQgMDYwLCA8ZW0+SVNPPC9lbT4gOTIxNiBudXRzIGFuZCA8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+NCBzcGxpdCBwaW5zIGluIHRoZSBhc3NlbWJseSBvZiA8ZW0+SVNPPC9lbT4gNzkzOSBwdWxsZXlzLiA8ZW0+SVNPPC9lbT4gOTIxODoyMDAyIGlzIGFsc28gYXBwbGljYWJsZSB0byB3YXNoZXJzIGluIHRoZSBhc3NlbWJseSBvZiBhaXJmcmFtZSByb2xsaW5nIGJlYXJpbmdzIG9yIHNwaGVyaWNhbCBiZWFyaW5ncy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDEvNjgvMTY4NDUiLCJ1dWlkIjoiMjVjZGMxMTYtMzFjYi00YWNkLWEwYTItNmJhNzkzMDY5NTA3IiwidGl0bGUiOiJJU08gOTIxNzoyMDAyIEFlcm9zcGFjZSDigJQgV2FzaGVycywgY2hhbWZlcmVkLCB3aXRoIGNvdW50ZXJib3JlLCBmb3IgcHVsbGV5cywgaW4gYWxsb3kgc3RlZWwgYW5kIGNhZG1pdW0gcGxhdGVkIG9yIGluIGNvcnJvc2lvbi1yZXNpc3RhbnQgc3RlZWwgYW5kIHBhc3NpdmF0ZWQg4oCUIERpbWVuc2lvbnMgYW5kIG1hc3NlcyIsInN0YXR1cyI6IldpdGhkcmF3biIsInllYXIiOjIwMjMsIm9yZGVyIjoxMDAsInRleHQiOiJJU08gOTIxNzoyMDAyIHNwZWNpZmllcyB0aGUgY2hhcmFjdGVyaXN0aWNzIG9mIGNoYW1mZXJlZCB3YXNoZXJzIHdpdGggY291bnRlcmJvcmUgaW4gYWxsb3kgc3RlZWwgYW5kIGNhZG1pdW0gcGxhdGVkIChjbGFzc2lmaWNhdGlvbiA5MDAgTVBhLzIzNSDCsEMpIG9yIGluIGNvcnJvc2lvbi1yZXNpc3RhbnQgc3RlZWwgYW5kIHBhc3NpdmF0ZWQgKGNsYXNzaWZpY2F0aW9uIDkwMCBNUGEvNDUwIMKwQykuIElTTyA5MjE3OjIwMDIgaXMgYXBwbGljYWJsZSB0byB3YXNoZXJzIHVzZWQgd2l0aCBJU08gOTIxOSBib2x0cywgZGlhbWV0ZXIgY29kZSAwODAgdG8gMjUwLCBJU08gOTIxNiBudXRzIGFuZCBJU08gMTIzNCBzcGxpdCBwaW5zIGluIHRoZSBhc3NlbWJseSBvZiBJU08gNzkzOSBwdWxsZXlzLiBJU08gOTIxNzoyMDAyIGlzIGFsc28gYXBwbGljYWJsZSB0byB3YXNoZXJzIGluIHRoZSBhc3NlbWJseSBvZiBhaXJmcmFtZSByb2xsaW5nIGJlYXJpbmdzIG9yIHNwaGVyaWNhbCBiZWFyaW5ncy4gIiwib2JqZWN0SUQiOiIxNjg0NV8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA5MjE3OjIwMDIgQWVyb3NwYWNlIOKAlCBXYXNoZXJzLCBjaGFtZmVyZWQsIHdpdGggY291bnRlcmJvcmUsIGZvciBwdWxsZXlzLCBpbiBhbGxveSBzdGVlbCBhbmQgY2FkbWl1bSBwbGF0ZWQgb3IgaW4gY29ycm9zaW9uLXJlc2lzdGFudCBzdGVlbCBhbmQgcGFzc2l2YXRlZCDigJQgRGltZW5zaW9ucyBhbmQgbWFzc2VzIiwibWF0Y2hMZXZlbCI6InBhcnRpYWwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA5MjE3OjIwMDIgc3BlY2lmaWVzIHRoZSBjaGFyYWN0ZXJpc3RpY3Mgb2YgY2hhbWZlcmVkIHdhc2hlcnMgd2l0aCBjb3VudGVyYm9yZSBpbiBhbGxveSBzdGVlbCBhbmQgY2FkbWl1bSBwbGF0ZWQgKGNsYXNzaWZpY2F0aW9uIDkwMCBNUGEvMjM1IMKwQykgb3IgaW4gY29ycm9zaW9uLXJlc2lzdGFudCBzdGVlbCBhbmQgcGFzc2l2YXRlZCAoY2xhc3NpZmljYXRpb24gOTAwIE1QYS80NTAgwrBDKS4gPGVtPklTTzwvZW0+IDkyMTc6MjAwMiBpcyBhcHBsaWNhYmxlIHRvIHdhc2hlcnMgdXNlZCB3aXRoIDxlbT5JU088L2VtPiA5MjE5IGJvbHRzLCBkaWFtZXRlciBjb2RlIDA4MCB0byAyNTAsIDxlbT5JU088L2VtPiA5MjE2IG51dHMgYW5kIDxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT40IHNwbGl0IHBpbnMgaW4gdGhlIGFzc2VtYmx5IG9mIDxlbT5JU088L2VtPiA3OTM5IHB1bGxleXMuIDxlbT5JU088L2VtPiA5MjE3OjIwMDIgaXMgYWxzbyBhcHBsaWNhYmxlIHRvIHdhc2hlcnMgaW4gdGhlIGFzc2VtYmx5IG9mIGFpcmZyYW1lIHJvbGxpbmcgYmVhcmluZ3Mgb3Igc3BoZXJpY2FsIGJlYXJpbmdzLiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMS82OC8xNjg0NCIsInV1aWQiOiI0NjU5OTNkNC0zZWNjLTQ3YjktOGYzNy02YmQzMzIxYjliMmMiLCJ0aXRsZSI6IklTTyA5MjE2OjIwMDIgQWVyb3NwYWNlIOKAlCBOdXRzLCBoZXhhZ29uYWwsIHNsb3R0ZWQgKGNhc3RlbGxhdGVkKSwgZm9yIHB1bGxleXMsIGluIGFsbG95IHN0ZWVsIGFuZCBjYWRtaXVtIHBsYXRlZCBvciBpbiBjb3Jyb3Npb24tcmVzaXN0YW50IHN0ZWVsIGFuZCBwYXNzaXZhdGVkIOKAlCBEaW1lbnNpb25zIGFuZCBtYXNzZXMiLCJzdGF0dXMiOiJXaXRoZHJhd24iLCJ5ZWFyIjoyMDIzLCJvcmRlciI6MTAwLCJ0ZXh0IjoiSVNPIDkyMTY6MjAwMiBzcGVjaWZpZXMgdGhlIGNoYXJhY3RlcmlzdGljcyBvZiBudXRzLCBoZXhhZ29uYWwsIHNsb3R0ZWQvY2FzdGVsbGF0ZWQsIG9mIHJlZHVjZWQgaGVpZ2h0IGFuZCByZWR1Y2VkIHdpZHRoIGFjcm9zcyBmbGF0cywgaW4gYWxsb3kgc3RlZWwgYW5kIGNhZG1pdW0gcGxhdGVkIChjbGFzc2lmaWNhdGlvbiA5MDAgTVBhLzIzNSDCsEMpIG9yIGluIGNvcnJvc2lvbi1yZXNpc3RhbnQgc3RlZWwgYW5kIHBhc3NpdmF0ZWQgKGNsYXNzaWZpY2F0aW9uIDkwMCBNUGEvNDUwIMKwQykuIElTTyA5MjE2OjIwMDIgaXMgYXBwbGljYWJsZSB0byBudXRzIHVzZWQgd2l0aCBJU08gOTIxOSBib2x0cywgSVNPIDkyMTcgYW5kIElTTyA5MjE4IHdhc2hlcnMsIGFuZCBJU08gMTIzNCBzcGxpdCBwaW5zIGluIHRoZSBhc3NlbWJseSBvZiBJU08gNzkzOSBwdWxsZXlzLiBJU08gOTIxNjoyMDAyIGlzIGFsc28gYXBwbGljYWJsZSB0byBudXRzIGluIHRoZSBhc3NlbWJseSBvZiBhaXJmcmFtZSByb2xsaW5nIGJlYXJpbmdzIG9yIHNwaGVyaWNhbCBiZWFyaW5ncy4gIiwib2JqZWN0SUQiOiIxNjg0NF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA5MjE2OjIwMDIgQWVyb3NwYWNlIOKAlCBOdXRzLCBoZXhhZ29uYWwsIHNsb3R0ZWQgKGNhc3RlbGxhdGVkKSwgZm9yIHB1bGxleXMsIGluIGFsbG95IHN0ZWVsIGFuZCBjYWRtaXVtIHBsYXRlZCBvciBpbiBjb3Jyb3Npb24tcmVzaXN0YW50IHN0ZWVsIGFuZCBwYXNzaXZhdGVkIOKAlCBEaW1lbnNpb25zIGFuZCBtYXNzZXMiLCJtYXRjaExldmVsIjoicGFydGlhbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIl19LCJ0ZXh0Ijp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDkyMTY6MjAwMiBzcGVjaWZpZXMgdGhlIGNoYXJhY3RlcmlzdGljcyBvZiBudXRzLCBoZXhhZ29uYWwsIHNsb3R0ZWQvY2FzdGVsbGF0ZWQsIG9mIHJlZHVjZWQgaGVpZ2h0IGFuZCByZWR1Y2VkIHdpZHRoIGFjcm9zcyBmbGF0cywgaW4gYWxsb3kgc3RlZWwgYW5kIGNhZG1pdW0gcGxhdGVkIChjbGFzc2lmaWNhdGlvbiA5MDAgTVBhLzIzNSDCsEMpIG9yIGluIGNvcnJvc2lvbi1yZXNpc3RhbnQgc3RlZWwgYW5kIHBhc3NpdmF0ZWQgKGNsYXNzaWZpY2F0aW9uIDkwMCBNUGEvNDUwIMKwQykuIDxlbT5JU088L2VtPiA5MjE2OjIwMDIgaXMgYXBwbGljYWJsZSB0byBudXRzIHVzZWQgd2l0aCA8ZW0+SVNPPC9lbT4gOTIxOSBib2x0cywgPGVtPklTTzwvZW0+IDkyMTcgYW5kIDxlbT5JU088L2VtPiA5MjE4IHdhc2hlcnMsIGFuZCA8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+NCBzcGxpdCBwaW5zIGluIHRoZSBhc3NlbWJseSBvZiA8ZW0+SVNPPC9lbT4gNzkzOSBwdWxsZXlzLiA8ZW0+SVNPPC9lbT4gOTIxNjoyMDAyIGlzIGFsc28gYXBwbGljYWJsZSB0byBudXRzIGluIHRoZSBhc3NlbWJseSBvZiBhaXJmcmFtZSByb2xsaW5nIGJlYXJpbmdzIG9yIHNwaGVyaWNhbCBiZWFyaW5ncy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDEvNjgvMTY4NDciLCJ1dWlkIjoiOWZmYWIyMTEtZGU2MC00ZmFhLWE2MWMtMmI0OTBjMDRkYmIzIiwidGl0bGUiOiJJU08gOTIxOToyMDAyIEFlcm9zcGFjZSDigJQgQm9sdHMsIHRoaW4gaGV4YWdvbmFsIGhlYWQsIGZvciBwdWxsZXlzLCBjbG9zZSB0b2xlcmFuY2Ugc2hhbmssIHNob3J0IHRocmVhZCwgaW4gYWxsb3kgc3RlZWwgYW5kIGNhZG1pdW0gcGxhdGVkIG9yIGluIHRpdGFuaXVtIGFsbG95IGFuZCBNb1MyIGx1YnJpY2F0ZWQgb3IgaW4gY29ycm9zaW9uLXJlc2lzdGFudCBzdGVlbCBhbmQgcGFzc2l2YXRlZCDigJQgRGltZW5zaW9ucyBhbmQgbWFzc2VzIiwic3RhdHVzIjoiV2l0aGRyYXduIiwieWVhciI6MjAyMywib3JkZXIiOjEwMCwidGV4dCI6IklTTyA5MjE5OjIwMDIgc3BlY2lmaWVzIHRoZSBjaGFyYWN0ZXJpc3RpY3Mgb2YgYm9sdHMgZm9yIHB1bGxleXMsIHdpdGggdGhpbiBoZXhhZ29uYWwgaGVhZCwgY2xvc2UgdG9sZXJhbmNlIHNoYW5rIGFuZCBzaG9ydCB0aHJlYWQsIGluIGFsbG95IHN0ZWVsIGFuZCBjYWRtaXVtIHBsYXRlZCAoY2xhc3NpZmljYXRpb24gMSAxMDAgTVBhLzIzNSDCsEMpLCBpbiB0aXRhbml1bSBhbGxveSBhbmQgTW9TIDIgbHVicmljYXRlZCAoY2xhc3NpZmljYXRpb24gMSAxMDAgTVBhLzMxNSDCsEMpIG9yIGluIGNvcnJvc2lvbi1yZXNpc3RhbnQgc3RlZWwgYW5kIHBhc3NpdmF0ZWQuIElTTyA5MjE5OjIwMDIgaXMgYXBwbGljYWJsZSB0byBib2x0cyB1c2VkIHdpdGggSVNPIDkyMTcgYW5kIElTTyA5MjE4IHdhc2hlcnMsIElTTyA5MjE2IG51dHMgYW5kIElTTyAxMjM0IHNwbGludCBwaW5zLiAiLCJvYmplY3RJRCI6IjE2ODQ3XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDkyMTk6MjAwMiBBZXJvc3BhY2Ug4oCUIEJvbHRzLCB0aGluIGhleGFnb25hbCBoZWFkLCBmb3IgcHVsbGV5cywgY2xvc2UgdG9sZXJhbmNlIHNoYW5rLCBzaG9ydCB0aHJlYWQsIGluIGFsbG95IHN0ZWVsIGFuZCBjYWRtaXVtIHBsYXRlZCBvciBpbiB0aXRhbml1bSBhbGxveSBhbmQgTW9TMiBsdWJyaWNhdGVkIG9yIGluIGNvcnJvc2lvbi1yZXNpc3RhbnQgc3RlZWwgYW5kIHBhc3NpdmF0ZWQg4oCUIERpbWVuc2lvbnMgYW5kIG1hc3NlcyIsIm1hdGNoTGV2ZWwiOiJwYXJ0aWFsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gOTIxOToyMDAyIHNwZWNpZmllcyB0aGUgY2hhcmFjdGVyaXN0aWNzIG9mIGJvbHRzIGZvciBwdWxsZXlzLCB3aXRoIHRoaW4gaGV4YWdvbmFsIGhlYWQsIGNsb3NlIHRvbGVyYW5jZSBzaGFuayBhbmQgc2hvcnQgdGhyZWFkLCBpbiBhbGxveSBzdGVlbCBhbmQgY2FkbWl1bSBwbGF0ZWQgKGNsYXNzaWZpY2F0aW9uIDEgMTAwIE1QYS8yMzUgwrBDKSwgaW4gdGl0YW5pdW0gYWxsb3kgYW5kIE1vUyAyIGx1YnJpY2F0ZWQgKGNsYXNzaWZpY2F0aW9uIDEgMTAwIE1QYS8zMTUgwrBDKSBvciBpbiBjb3Jyb3Npb24tcmVzaXN0YW50IHN0ZWVsIGFuZCBwYXNzaXZhdGVkLiA8ZW0+SVNPPC9lbT4gOTIxOToyMDAyIGlzIGFwcGxpY2FibGUgdG8gYm9sdHMgdXNlZCB3aXRoIDxlbT5JU088L2VtPiA5MjE3IGFuZCA8ZW0+SVNPPC9lbT4gOTIxOCB3YXNoZXJzLCA8ZW0+SVNPPC9lbT4gOTIxNiBudXRzIGFuZCA8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+NCBzcGxpbnQgcGlucy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDYvNjMvNjYzMTkiLCJ1dWlkIjoiZDQ5ZjgzNWUtMTRhNS00N2YxLThlNTQtYWQ0NTg2OWRhZjQ4IiwidGl0bGUiOiJJU08gOTYxODoyMDE2IEFlcm9zcGFjZSDigJQgTnV0cywgaGV4YWdvbmFsLCBzbG90dGVkIChjYXN0ZWxsYXRlZCksIHJlZHVjZWQgaGVpZ2h0LCBub3JtYWwgYWNyb3NzIGZsYXRzLCB3aXRoIE1KIHRocmVhZHMsIGNsYXNzaWZpY2F0aW9uczogNDUwIE1QYSAoYXQgYW1iaWVudCB0ZW1wZXJhdHVyZSkvMTIwIGRlZ3JlZXMgQywgNDUwIE1QYSAoYXQgYW1iaWVudCB0ZW1wZXJhdHVyZSkvMjM1IGRlZ3JlZXMgQywgNjAwIE1QYSAoYXQgYW1iaWVudCB0ZW1wZXJhdHVyZSkvNDI1IGRlZ3JlZXMgQywgOTAwIE1QYSAoYXQgYW1iaWVudCB0ZW1wZXJhdHVyZSkvMjM1IGRlZ3JlZXMgQywgOTAwIE1QYSAoYXQgYW1iaWVudCB0ZW1wZXJhdHVyZSkvMzE1IGRlZ3JlZXMgQywgOTAwIE1QYSAoYXQgYW1iaWVudCB0ZW1wZXJhdHVyZSkvNjUwIGRlZ3JlZXMgQywgMSAxMDAgTVBhIChhdCBhbWJpZW50IHRlbXBlcmF0dXJlKS8yMzUgZGVncmVlcyBDLCAxIDEwMCBNUGEgKGF0IGFtYmllbnQgdGVtcGVyYXR1cmUpLzczMCBkZWdyZWVzIEMgYW5kIDEgMjUwIE1QYSAoYXQgYW1iaWVudCB0ZW1wZXJhdHVyZSkvNjAwIGRlZ3JlZXMgQyDigJQgRGltZW5zaW9ucyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjEsIm9yZGVyIjoxMSwidGV4dCI6IklTTyA5NjE4OjIwMTYgc3BlY2lmaWVzIHRoZSBkaW1lbnNpb25zIG9mIGhleGFnb24gc2xvdHRlZCAoY2FzdGVsbGF0ZWQpIG51dHMsIHJlZHVjZWQgaGVpZ2h0LCBub3JtYWwgYWNyb3NzIGZsYXRzLCB3aXRoIE1KIHRocmVhZHMsIG9mIGNsYXNzaWZpY2F0aW9uczogNDUwIE1QYS8xMjAgwrBDLCA0NTAgTVBhLzIzNSDCsEMsIDYwMCBNUGEvNDI1IMKwQywgOTAwIE1QYS8yMzUgwrBDLCA5MDAgTVBhLzMxNSDCsEMsIDkwMCBNUGEvNjUwIMKwQywgMSAxMDAgTVBhLzIzNSDCsEMsIDEgMTAwIE1QYS83MzAgwrBDLCBhbmQgMSAyNTAgTVBhLzYwMCDCsEMuIFRoZXNlIG51dHMgYXJlIGludGVuZGVkIHRvIGJlIHVzZWQgd2l0aCBzcGxpdCBwaW5zIGluIGNvbmZvcm1pdHkgd2l0aCBJU08gMTIzNC4gSVNPIDk2MTg6MjAxNiBpcyBhcHBsaWNhYmxlIGZvciB0aGUgY29tcGlsYXRpb24gb2YgYWVyb3NwYWNlIHByb2R1Y3Qgc3RhbmRhcmRzLiAiLCJvYmplY3RJRCI6IjY2MzE5XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDk2MTg6MjAxNiBBZXJvc3BhY2Ug4oCUIE51dHMsIGhleGFnb25hbCwgc2xvdHRlZCAoY2FzdGVsbGF0ZWQpLCByZWR1Y2VkIGhlaWdodCwgbm9ybWFsIGFjcm9zcyBmbGF0cywgd2l0aCBNSiB0aHJlYWRzLCBjbGFzc2lmaWNhdGlvbnM6IDQ1MCBNUGEgKGF0IGFtYmllbnQgdGVtcGVyYXR1cmUpLzEyMCBkZWdyZWVzIEMsIDQ1MCBNUGEgKGF0IGFtYmllbnQgdGVtcGVyYXR1cmUpLzIzNSBkZWdyZWVzIEMsIDYwMCBNUGEgKGF0IGFtYmllbnQgdGVtcGVyYXR1cmUpLzQyNSBkZWdyZWVzIEMsIDkwMCBNUGEgKGF0IGFtYmllbnQgdGVtcGVyYXR1cmUpLzIzNSBkZWdyZWVzIEMsIDkwMCBNUGEgKGF0IGFtYmllbnQgdGVtcGVyYXR1cmUpLzMxNSBkZWdyZWVzIEMsIDkwMCBNUGEgKGF0IGFtYmllbnQgdGVtcGVyYXR1cmUpLzY1MCBkZWdyZWVzIEMsIDEgMTAwIE1QYSAoYXQgYW1iaWVudCB0ZW1wZXJhdHVyZSkvMjM1IGRlZ3JlZXMgQywgMSAxMDAgTVBhIChhdCBhbWJpZW50IHRlbXBlcmF0dXJlKS83MzAgZGVncmVlcyBDIGFuZCAxIDI1MCBNUGEgKGF0IGFtYmllbnQgdGVtcGVyYXR1cmUpLzYwMCBkZWdyZWVzIEMg4oCUIERpbWVuc2lvbnMiLCJtYXRjaExldmVsIjoicGFydGlhbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIl19LCJ0ZXh0Ijp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDk2MTg6MjAxNiBzcGVjaWZpZXMgdGhlIGRpbWVuc2lvbnMgb2YgaGV4YWdvbiBzbG90dGVkIChjYXN0ZWxsYXRlZCkgbnV0cywgcmVkdWNlZCBoZWlnaHQsIG5vcm1hbCBhY3Jvc3MgZmxhdHMsIHdpdGggTUogdGhyZWFkcywgb2YgY2xhc3NpZmljYXRpb25zOiA0NTAgTVBhLzEyMCDCsEMsIDQ1MCBNUGEvMjM1IMKwQywgNjAwIE1QYS80MjUgwrBDLCA5MDAgTVBhLzIzNSDCsEMsIDkwMCBNUGEvMzE1IMKwQywgOTAwIE1QYS82NTAgwrBDLCAxIDEwMCBNUGEvMjM1IMKwQywgMSAxMDAgTVBhLzczMCDCsEMsIGFuZCAxIDI1MCBNUGEvNjAwIMKwQy4gVGhlc2UgbnV0cyBhcmUgaW50ZW5kZWQgdG8gYmUgdXNlZCB3aXRoIHNwbGl0IHBpbnMgaW4gY29uZm9ybWl0eSB3aXRoIDxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT40LiA8ZW0+SVNPPC9lbT4gOTYxODoyMDE2IGlzIGFwcGxpY2FibGUgZm9yIHRoZSBjb21waWxhdGlvbiBvZiBhZXJvc3BhY2UgcHJvZHVjdCBzdGFuZGFyZHMuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA3LzQyLzc0MjY3IiwidXVpZCI6IjE2ZTNhZmRhLTQwNzMtNGExMC05ZjA3LTU5YjdmZGY3OWVlMSIsInRpdGxlIjoiSVNPIDE5NzM0OjIwMjEgRXllIGFuZCBmYWNlIHByb3RlY3Rpb24g4oCUIEd1aWRhbmNlIG9uIHNlbGVjdGlvbiwgdXNlIGFuZCBtYWludGVuYW5jZSIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjEsIm9yZGVyIjoxMSwidGV4dCI6IlRoaXMgZG9jdW1lbnQgZ2l2ZXMgZ3VpZGFuY2UgdG8gc3BlY2lmaWVycyBhbmQgdXNlcnMgb24gdGhlIGNvbnRyb2wgb2YgZXllIGFuZCBmYWNlIGhhemFyZHMgaW5jbHVkaW5nIHBoeXNpY2FsLCBtZWNoYW5pY2FsLCBjaGVtaWNhbCwgb3B0aWNhbCByYWRpYXRpb24gYW5kIGJpb2xvZ2ljYWwgYW5kIG9uIHRoZSBzZWxlY3Rpb24sIHVzZSBhbmQgbWFpbnRlbmFuY2Ugb2YgZXllIGFuZCBmYWNlIHByb3RlY3RvcnMuIFRoaXMgZG9jdW1lbnQgYXBwbGllcyB0byDigJQgICAgIG9jY3VwYXRpb25hbCB1c2UsIOKAlCAgICAgIHRhc2tzIHRoYXQgYXJlIHBlcmZvcm1lZCBzaW1pbGFybHkgdG8gdGhvc2UgaW4gYW4gb2NjdXBhdGlvbiBidXQgbm90IGluIHRoZSB3b3JrcGxhY2UsIGUuZy4gXCJkby1pdC15b3Vyc2VsZlwiLCBhbmQg4oCUICAgICBzY2hvb2xzLCBlZHVjYXRpb25hbCBhbmQgcmVzZWFyY2ggZXN0YWJsaXNobWVudHMuIFRoaXMgZG9jdW1lbnQgZG9lcyBub3QgYXBwbHkgdG8gZXllIGFuZCBmYWNlIHByb3RlY3Rpb24gZm9yIOKAlCAgICAgaW9uaXppbmcgcmFkaWF0aW9uLCDigJQgICAgIGxvdyBmcmVxdWVuY3kgcmFkaW8gd2F2ZXMsIOKAlCAgICAgbWljcm93YXZlcywg4oCUICAgICBzcG9ydHMgb3IgdmVoaWN1bGFyIHVzYWdlLCBhbmQg4oCUICAgICBzdW5nbGFzc2VzIGZvciBnZW5lcmFsIChub3Qgb2NjdXBhdGlvbmFsKSB1c2UgPyBzZWUgSVNPIDEyMzEyLTEuIE5PVEUgICAgIFRoZSBJU08gMTg1MjcgKGFsbCBwYXJ0cykgc2V0cyByZXF1aXJlbWVudHMgZm9yIGV5ZSBwcm90ZWN0b3JzIGZvciBzb21lIHNwb3J0cy4gQnJpZWYgYWR2aWNlIG9uIHByb3RlY3Rpb24gd2hlbiB1c2luZyBsYXNlcnMgaXMgaW5jbHVkZWQgYnV0IGZvciBkZXRhaWxlZCBhZHZpY2UsIHNlZSBJRUMvVFIgNjA4MjUtMTQuIFRoaXMgZG9jdW1lbnQgaXMgbmVpdGhlciBhIHdob2xlIG5vciBwYXJ0aWFsIHN1YnN0aXR1dGUgZm9yIHJpc2sgYXNzZXNzbWVudCwgd2hpY2ggaXMgYW4gZXNzZW50aWFsIHBhcnQgb2YgYW55IGV5ZSBhbmQgZmFjZSBwcm90ZWN0aW9uIHByb2dyYW1tZS4gQWx0aG91Z2ggdGhpcyBkb2N1bWVudCBoYXMgYmVlbiB3cml0dGVuIHRvIGhlbHAgc3BlY2lmaWVycyBhbmQgdXNlcnMsIGFueSByZWNvbW1lbmRhdGlvbnMgaW4gdGhpcyBkb2N1bWVudCBhcmUgdG8gYmUgaW50ZXJwcmV0ZWQgYXMgZ3VpZGFuY2Ugb25seSBhbmQgbm90IGludGVuZGVkIHRvIHJlcGxhY2UgYW55IG5hdGlvbmFsIHJlZ3VsYXRvcnkgcmVxdWlyZW1lbnRzLiBSaXNrIGFzc2Vzc21lbnQgaXMgdGhlIHNvbGUgcmVzcG9uc2liaWxpdHkgb2YgdGhlIGVtcGxveWVyIGFuZCBub3QgdGhlIFBQRSBtYW51ZmFjdHVyZXIgb3IgaXRzIGF1dGhvcmlzZWQgcmVwcmVzZW50YXRpdmUuICIsIm9iamVjdElEIjoiNzQyNjdfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gMTk3MzQ6MjAyMSBFeWUgYW5kIGZhY2UgcHJvdGVjdGlvbiDigJQgR3VpZGFuY2Ugb24gc2VsZWN0aW9uLCB1c2UgYW5kIG1haW50ZW5hbmNlIiwibWF0Y2hMZXZlbCI6InBhcnRpYWwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyJdfSwidGV4dCI6eyJ2YWx1ZSI6IlRoaXMgZG9jdW1lbnQgZ2l2ZXMgZ3VpZGFuY2UgdG8gc3BlY2lmaWVycyBhbmQgdXNlcnMgb24gdGhlIGNvbnRyb2wgb2YgZXllIGFuZCBmYWNlIGhhemFyZHMgaW5jbHVkaW5nIHBoeXNpY2FsLCBtZWNoYW5pY2FsLCBjaGVtaWNhbCwgb3B0aWNhbCByYWRpYXRpb24gYW5kIGJpb2xvZ2ljYWwgYW5kIG9uIHRoZSBzZWxlY3Rpb24sIHVzZSBhbmQgbWFpbnRlbmFuY2Ugb2YgZXllIGFuZCBmYWNlIHByb3RlY3RvcnMuIFRoaXMgZG9jdW1lbnQgYXBwbGllcyB0byDigJQgICAgIG9jY3VwYXRpb25hbCB1c2UsIOKAlCAgICAgIHRhc2tzIHRoYXQgYXJlIHBlcmZvcm1lZCBzaW1pbGFybHkgdG8gdGhvc2UgaW4gYW4gb2NjdXBhdGlvbiBidXQgbm90IGluIHRoZSB3b3JrcGxhY2UsIGUuZy4gXCJkby1pdC15b3Vyc2VsZlwiLCBhbmQg4oCUICAgICBzY2hvb2xzLCBlZHVjYXRpb25hbCBhbmQgcmVzZWFyY2ggZXN0YWJsaXNobWVudHMuIFRoaXMgZG9jdW1lbnQgZG9lcyBub3QgYXBwbHkgdG8gZXllIGFuZCBmYWNlIHByb3RlY3Rpb24gZm9yIOKAlCAgICAgaW9uaXppbmcgcmFkaWF0aW9uLCDigJQgICAgIGxvdyBmcmVxdWVuY3kgcmFkaW8gd2F2ZXMsIOKAlCAgICAgbWljcm93YXZlcywg4oCUICAgICBzcG9ydHMgb3IgdmVoaWN1bGFyIHVzYWdlLCBhbmQg4oCUICAgICBzdW5nbGFzc2VzIGZvciBnZW5lcmFsIChub3Qgb2NjdXBhdGlvbmFsKSB1c2UgPyBzZWUgPGVtPklTTzwvZW0+IDxlbT4xMjM8L2VtPjEyLTEuIE5PVEUgICAgIFRoZSA8ZW0+SVNPPC9lbT4gMTg1MjcgKGFsbCBwYXJ0cykgc2V0cyByZXF1aXJlbWVudHMgZm9yIGV5ZSBwcm90ZWN0b3JzIGZvciBzb21lIHNwb3J0cy4gQnJpZWYgYWR2aWNlIG9uIHByb3RlY3Rpb24gd2hlbiB1c2luZyBsYXNlcnMgaXMgaW5jbHVkZWQgYnV0IGZvciBkZXRhaWxlZCBhZHZpY2UsIHNlZSBJRUMvVFIgNjA4MjUtMTQuIFRoaXMgZG9jdW1lbnQgaXMgbmVpdGhlciBhIHdob2xlIG5vciBwYXJ0aWFsIHN1YnN0aXR1dGUgZm9yIHJpc2sgYXNzZXNzbWVudCwgd2hpY2ggaXMgYW4gZXNzZW50aWFsIHBhcnQgb2YgYW55IGV5ZSBhbmQgZmFjZSBwcm90ZWN0aW9uIHByb2dyYW1tZS4gQWx0aG91Z2ggdGhpcyBkb2N1bWVudCBoYXMgYmVlbiB3cml0dGVuIHRvIGhlbHAgc3BlY2lmaWVycyBhbmQgdXNlcnMsIGFueSByZWNvbW1lbmRhdGlvbnMgaW4gdGhpcyBkb2N1bWVudCBhcmUgdG8gYmUgaW50ZXJwcmV0ZWQgYXMgZ3VpZGFuY2Ugb25seSBhbmQgbm90IGludGVuZGVkIHRvIHJlcGxhY2UgYW55IG5hdGlvbmFsIHJlZ3VsYXRvcnkgcmVxdWlyZW1lbnRzLiBSaXNrIGFzc2Vzc21lbnQgaXMgdGhlIHNvbGUgcmVzcG9uc2liaWxpdHkgb2YgdGhlIGVtcGxveWVyIGFuZCBub3QgdGhlIFBQRSBtYW51ZmFjdHVyZXIgb3IgaXRzIGF1dGhvcmlzZWQgcmVwcmVzZW50YXRpdmUuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA2LzcyLzY3MjI5IiwidXVpZCI6IjFjY2ZmNjY4LTM1Y2ItNGM4Ni1iZmQ5LTIzYWM0NmIzOGZhMyIsInRpdGxlIjoiSVNPIDEwODQ4LTQ6MjAxNyBBY291c3RpY3Mg4oCUIExhYm9yYXRvcnkgYW5kIGZpZWxkIG1lYXN1cmVtZW50IG9mIGZsYW5raW5nIHRyYW5zbWlzc2lvbiBmb3IgYWlyYm9ybmUsIGltcGFjdCBhbmQgYnVpbGRpbmcgc2VydmljZSBlcXVpcG1lbnQgc291bmQgYmV0d2VlbiBhZGpvaW5pbmcgcm9vbXMg4oCUIFBhcnQgNDogQXBwbGljYXRpb24gdG8ganVuY3Rpb25zIHdpdGggYXQgbGVhc3Qgb25lIFR5cGUgQSBlbGVtZW50Iiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMiwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDEwODQ4IChhbGwgcGFydHMpIHNwZWNpZmllcyBtZWFzdXJlbWVudCBtZXRob2RzIHRvIGNoYXJhY3Rlcml6ZSB0aGUgZmxhbmtpbmcgdHJhbnNtaXNzaW9uIG9mIG9uZSBvciBzZXZlcmFsIGJ1aWxkaW5nIGNvbXBvbmVudHMuIElTTyAxMDg0OC00OjIwMTcgc3BlY2lmaWVzIGxhYm9yYXRvcnkgYW5kIGZpZWxkIG1lYXN1cmVtZW50cyBvZiBidWlsZGluZ3Mgd2hlcmUgYXQgbGVhc3Qgb25lIG9mIHRoZSBlbGVtZW50cyB0aGF0IGZvcm0gdGhlIGNvbnN0cnVjdGlvbiB1bmRlciB0ZXN0IGlzIGEgVHlwZSBBIGVsZW1lbnQgKGRlZmluZWQgaW4gSVNPIDEwODQ44oCRMSkuIExhYm9yYXRvcnkgbWVhc3VyZW1lbnRzIGFyZSB1c2VkIHRvIHF1YW50aWZ5IHRoZSBwZXJmb3JtYW5jZSBvZiB0aGUganVuY3Rpb24gd2l0aCBzdXBwcmVzc2VkIGZsYW5raW5nIHRyYW5zbWlzc2lvbiBmcm9tIHRoZSBsYWJvcmF0b3J5IHN0cnVjdHVyZS4gRmllbGQgbWVhc3VyZW1lbnRzIGFyZSB1c2VkIHRvIGNoYXJhY3Rlcml6ZSB0aGUgaW4gc2l0dSBwZXJmb3JtYW5jZSBhbmQgaXQgaXMgbm90IHVzdWFsbHkgcG9zc2libGUgdG8gc3VwcHJlc3MgdW53YW50ZWQgZmxhbmtpbmcgdHJhbnNtaXNzaW9uIHN1ZmZpY2llbnRseTsgaGVuY2UsIHRoZSByZXN1bHRzIGFyZSBwcmltYXJpbHkgcmVwcmVzZW50YXRpdmUgb2YgdGhlIHBlcmZvcm1hbmNlIG9mIHRoYXQganVuY3Rpb24gd2hlbiBpbnN0YWxsZWQgaW4gdGhhdCBwYXJ0aWN1bGFyIGJ1aWxkaW5nIHN0cnVjdHVyZS4gVGhlIG1lYXN1cmVkIHF1YW50aXRpZXMgY2FuIGJlIHVzZWQgdG8gY29tcGFyZSBkaWZmZXJlbnQgcHJvZHVjdHMsIG9yIHRvIGV4cHJlc3MgYSByZXF1aXJlbWVudCwgb3IgYXMgaW5wdXQgZGF0YSBmb3IgcHJlZGljdGlvbiBtZXRob2RzLCBzdWNoIGFzIElTTyAxMjM1NOKAkTEgYW5kIElTTyAxMjM1NOKAkTIuICIsIm9iamVjdElEIjoiNjcyMjlfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gMTA4NDgtNDoyMDE3IEFjb3VzdGljcyDigJQgTGFib3JhdG9yeSBhbmQgZmllbGQgbWVhc3VyZW1lbnQgb2YgZmxhbmtpbmcgdHJhbnNtaXNzaW9uIGZvciBhaXJib3JuZSwgaW1wYWN0IGFuZCBidWlsZGluZyBzZXJ2aWNlIGVxdWlwbWVudCBzb3VuZCBiZXR3ZWVuIGFkam9pbmluZyByb29tcyDigJQgUGFydCA0OiBBcHBsaWNhdGlvbiB0byBqdW5jdGlvbnMgd2l0aCBhdCBsZWFzdCBvbmUgVHlwZSBBIGVsZW1lbnQiLCJtYXRjaExldmVsIjoicGFydGlhbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIl19LCJ0ZXh0Ijp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDEwODQ4IChhbGwgcGFydHMpIHNwZWNpZmllcyBtZWFzdXJlbWVudCBtZXRob2RzIHRvIGNoYXJhY3Rlcml6ZSB0aGUgZmxhbmtpbmcgdHJhbnNtaXNzaW9uIG9mIG9uZSBvciBzZXZlcmFsIGJ1aWxkaW5nIGNvbXBvbmVudHMuIDxlbT5JU088L2VtPiAxMDg0OC00OjIwMTcgc3BlY2lmaWVzIGxhYm9yYXRvcnkgYW5kIGZpZWxkIG1lYXN1cmVtZW50cyBvZiBidWlsZGluZ3Mgd2hlcmUgYXQgbGVhc3Qgb25lIG9mIHRoZSBlbGVtZW50cyB0aGF0IGZvcm0gdGhlIGNvbnN0cnVjdGlvbiB1bmRlciB0ZXN0IGlzIGEgVHlwZSBBIGVsZW1lbnQgKGRlZmluZWQgaW4gPGVtPklTTzwvZW0+IDEwODQ44oCRMSkuIExhYm9yYXRvcnkgbWVhc3VyZW1lbnRzIGFyZSB1c2VkIHRvIHF1YW50aWZ5IHRoZSBwZXJmb3JtYW5jZSBvZiB0aGUganVuY3Rpb24gd2l0aCBzdXBwcmVzc2VkIGZsYW5raW5nIHRyYW5zbWlzc2lvbiBmcm9tIHRoZSBsYWJvcmF0b3J5IHN0cnVjdHVyZS4gRmllbGQgbWVhc3VyZW1lbnRzIGFyZSB1c2VkIHRvIGNoYXJhY3Rlcml6ZSB0aGUgaW4gc2l0dSBwZXJmb3JtYW5jZSBhbmQgaXQgaXMgbm90IHVzdWFsbHkgcG9zc2libGUgdG8gc3VwcHJlc3MgdW53YW50ZWQgZmxhbmtpbmcgdHJhbnNtaXNzaW9uIHN1ZmZpY2llbnRseTsgaGVuY2UsIHRoZSByZXN1bHRzIGFyZSBwcmltYXJpbHkgcmVwcmVzZW50YXRpdmUgb2YgdGhlIHBlcmZvcm1hbmNlIG9mIHRoYXQganVuY3Rpb24gd2hlbiBpbnN0YWxsZWQgaW4gdGhhdCBwYXJ0aWN1bGFyIGJ1aWxkaW5nIHN0cnVjdHVyZS4gVGhlIG1lYXN1cmVkIHF1YW50aXRpZXMgY2FuIGJlIHVzZWQgdG8gY29tcGFyZSBkaWZmZXJlbnQgcHJvZHVjdHMsIG9yIHRvIGV4cHJlc3MgYSByZXF1aXJlbWVudCwgb3IgYXMgaW5wdXQgZGF0YSBmb3IgcHJlZGljdGlvbiBtZXRob2RzLCBzdWNoIGFzIDxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT41NOKAkTEgYW5kIDxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT41NOKAkTIuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA3LzI2LzcyNjI5IiwidXVpZCI6IjJhM2EyMzc5LTA1YmItNDgxNC1iMmUzLTdlNmQ1NjM3ODZkYyIsInRpdGxlIjoiSVNPIDEyNjA5LTE6MjAyMSBFeWUgYW5kIGZhY2UgcHJvdGVjdGlvbiBhZ2FpbnN0IGludGVuc2UgbGlnaHQgc291cmNlcyB1c2VkIG9uIGh1bWFucyBhbmQgYW5pbWFscyBmb3IgY29zbWV0aWMgYW5kIG1lZGljYWwgYXBwbGljYXRpb25zIOKAlCBQYXJ0IDE6IFNwZWNpZmljYXRpb24gZm9yIHByb2R1Y3RzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMSwib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgZ2VuZXJhbCByZXF1aXJlbWVudHMgZm9yIG9wZXJhdG9ycycgZXllIHByb3RlY3RvcnMgZm9yIGludGVuc2UgbGlnaHQgc291cmNlIChJTFMpIGVxdWlwbWVudCB1c2VkIG9uIGh1bWFucyBhbmQgYW5pbWFscyBmb3IgY29zbWV0aWMgYW5kIG1lZGljYWwgYXBwbGljYXRpb25zIGFnYWluc3QgZXhjZXNzaXZlIGV4cG9zdXJlIHRvIG9wdGljYWwgcmFkaWF0aW9uIGluIHRoZSBzcGVjdHJhbCByYW5nZSAyNTDCoG5tIHRvIDPCoDAwMMKgbm0sIHdpdGggdGhlIGV4Y2VwdGlvbiBvZiBsYXNlciByYWRpYXRpb24uIFRoaXMgZG9jdW1lbnQgaXMgYXBwbGljYWJsZSB0byBkZXZpY2VzIGludGVuZGVkIGZvciBwYXRpZW50IHByb3RlY3Rpb24gZHVyaW5nIElMUyBwcm9jZWR1cmVzLCBleGNlcHQgZm9yIHRyZWF0bWVudCBpbiB0aGUgcGVyaW9yYml0YWwgYXJlYS4gRm9yIGd1aWRhbmNlIG9uIHBhdGllbnQgZXllIHByb3RlY3Rpb24gZHVyaW5nIElMUyBwcm9jZWR1cmVzLCBzZWUgSVNPL1RSwqAyMjQ2My4gRm9yIGd1aWRhbmNlIG9uIHRoZSB1c2UgYW5kIHNlbGVjdGlvbiBvZiBJTFMgZXllIHByb3RlY3RvcnMsIHNlZSBJU0/CoDEyNjA5LTIuIFRoaXMgZG9jdW1lbnQgZG9lcyBub3QgYXBwbHkgdG86IOKAlMKgwqDCoCBsYXNlciBwcm90ZWN0b3JzLCBmb3Igd2hpY2ggSVNPwqAxOTgxOC0xIGFwcGxpZXM7IOKAlMKgwqDCoCBwcm90ZWN0b3JzIGZvciBtZWRpY2FsbHkgcHJlc2NyaWJlZCBhcHBsaWNhdGlvbnMgKG5vdCBvY2N1cGF0aW9uYWwpLCBlLmcuIGV5ZSBwcm90ZWN0aW9uIGZvciBzZXZlcmUgZHJ5IGV5ZSwgdGludHMgcHJlc2NyaWJlZCBmb3IgbWVkaWNhbCBjb25kaXRpb25zOyDigJTCoMKgwqAgcHJvdGVjdG9ycyBzcGVjaWZpY2FsbHkgaW50ZW5kZWQgZm9yIHByb3RlY3Rpb24gYWdhaW5zdCBvbmx5IHNvbGFyIHJhZGlhdGlvbiBhbmQgdXNlZCBpbiBub24tb2NjdXBhdGlvbmFsIGVudmlyb25tZW50cyBmb3Igd2hpY2ggdGhlIElTTyAxMjMxMiAoYWxsIHBhcnRzKSBhcHBsaWVzOyDigJTCoMKgwqAgcHJvdGVjdG9ycyB1c2VkIHdpdGggdGFubmluZyBlcXVpcG1lbnQ7IOKAlMKgwqDCoCBwcm90ZWN0b3JzIGludGVuZGVkIHRvIHByb3RlY3QgYWdhaW5zdCBpb25pemluZyByYWRpYXRpb24sIGUuZy4gWC1yYXlzLCBmb3Igd2hpY2ggSUVDwqA2MTMzMS0zIGFwcGxpZXMuICIsIm9iamVjdElEIjoiNzI2MjlfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gMTI2MDktMToyMDIxIEV5ZSBhbmQgZmFjZSBwcm90ZWN0aW9uIGFnYWluc3QgaW50ZW5zZSBsaWdodCBzb3VyY2VzIHVzZWQgb24gaHVtYW5zIGFuZCBhbmltYWxzIGZvciBjb3NtZXRpYyBhbmQgbWVkaWNhbCBhcHBsaWNhdGlvbnMg4oCUIFBhcnQgMTogU3BlY2lmaWNhdGlvbiBmb3IgcHJvZHVjdHMiLCJtYXRjaExldmVsIjoicGFydGlhbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIl19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgZ2VuZXJhbCByZXF1aXJlbWVudHMgZm9yIG9wZXJhdG9ycycgZXllIHByb3RlY3RvcnMgZm9yIGludGVuc2UgbGlnaHQgc291cmNlIChJTFMpIGVxdWlwbWVudCB1c2VkIG9uIGh1bWFucyBhbmQgYW5pbWFscyBmb3IgY29zbWV0aWMgYW5kIG1lZGljYWwgYXBwbGljYXRpb25zIGFnYWluc3QgZXhjZXNzaXZlIGV4cG9zdXJlIHRvIG9wdGljYWwgcmFkaWF0aW9uIGluIHRoZSBzcGVjdHJhbCByYW5nZSAyNTDCoG5tIHRvIDPCoDAwMMKgbm0sIHdpdGggdGhlIGV4Y2VwdGlvbiBvZiBsYXNlciByYWRpYXRpb24uIFRoaXMgZG9jdW1lbnQgaXMgYXBwbGljYWJsZSB0byBkZXZpY2VzIGludGVuZGVkIGZvciBwYXRpZW50IHByb3RlY3Rpb24gZHVyaW5nIElMUyBwcm9jZWR1cmVzLCBleGNlcHQgZm9yIHRyZWF0bWVudCBpbiB0aGUgcGVyaW9yYml0YWwgYXJlYS4gRm9yIGd1aWRhbmNlIG9uIHBhdGllbnQgZXllIHByb3RlY3Rpb24gZHVyaW5nIElMUyBwcm9jZWR1cmVzLCBzZWUgPGVtPklTTzwvZW0+L1RSwqAyMjQ2My4gRm9yIGd1aWRhbmNlIG9uIHRoZSB1c2UgYW5kIHNlbGVjdGlvbiBvZiBJTFMgZXllIHByb3RlY3RvcnMsIHNlZSA8ZW0+SVNPPC9lbT7CoDEyNjA5LTIuIFRoaXMgZG9jdW1lbnQgZG9lcyBub3QgYXBwbHkgdG86IOKAlMKgwqDCoCBsYXNlciBwcm90ZWN0b3JzLCBmb3Igd2hpY2ggPGVtPklTTzwvZW0+wqAxOTgxOC0xIGFwcGxpZXM7IOKAlMKgwqDCoCBwcm90ZWN0b3JzIGZvciBtZWRpY2FsbHkgcHJlc2NyaWJlZCBhcHBsaWNhdGlvbnMgKG5vdCBvY2N1cGF0aW9uYWwpLCBlLmcuIGV5ZSBwcm90ZWN0aW9uIGZvciBzZXZlcmUgZHJ5IGV5ZSwgdGludHMgcHJlc2NyaWJlZCBmb3IgbWVkaWNhbCBjb25kaXRpb25zOyDigJTCoMKgwqAgcHJvdGVjdG9ycyBzcGVjaWZpY2FsbHkgaW50ZW5kZWQgZm9yIHByb3RlY3Rpb24gYWdhaW5zdCBvbmx5IHNvbGFyIHJhZGlhdGlvbiBhbmQgdXNlZCBpbiBub24tb2NjdXBhdGlvbmFsIGVudmlyb25tZW50cyBmb3Igd2hpY2ggdGhlIDxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT4xMiAoYWxsIHBhcnRzKSBhcHBsaWVzOyDigJTCoMKgwqAgcHJvdGVjdG9ycyB1c2VkIHdpdGggdGFubmluZyBlcXVpcG1lbnQ7IOKAlMKgwqDCoCBwcm90ZWN0b3JzIGludGVuZGVkIHRvIHByb3RlY3QgYWdhaW5zdCBpb25pemluZyByYWRpYXRpb24sIGUuZy4gWC1yYXlzLCBmb3Igd2hpY2ggSUVDwqA2MTMzMS0zIGFwcGxpZXMuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA2LzI1LzYyNTI3IiwidXVpZCI6IjQ4Mjg1MjVlLTM1MzItNDZjNS05ODUxLTAwMDljZWZlODlkNCIsInRpdGxlIjoiSVNPIDE2MzIxLTE6MjAyMSBFeWUgYW5kIGZhY2UgcHJvdGVjdGlvbiBmb3Igb2NjdXBhdGlvbmFsIHVzZSDigJQgUGFydCAxOiBHZW5lcmFsIHJlcXVpcmVtZW50cyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjEsIm9yZGVyIjoxMSwidGV4dCI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIGdlbmVyYWwgcmVxdWlyZW1lbnRzIGZvciBleWUgYW5kIGZhY2UgcHJvdGVjdG9ycy4gVGhlc2UgcHJvdGVjdG9ycyBhcmUgaW50ZW5kZWQgdG8gcHJvdmlkZSBwcm90ZWN0aW9uIGZvciB0aGUgZXllcyBhbmQgZmFjZXMgb2YgcGVyc29ucyBhZ2FpbnN0IG9uZSBvciBtb3JlIGNvbW1vbiBvY2N1cGF0aW9uYWwgaGF6YXJkcyBzdWNoIGFzIGltcGFjdHMgZnJvbSBmbHlpbmcgcGFydGljbGVzIGFuZCBmcmFnbWVudHMsIG9wdGljYWwgcmFkaWF0aW9uLCBkdXN0cywgc3BsYXNoaW5nIGxpcXVpZHMsIG1vbHRlbiBtZXRhbHMsIGhlYXQsIGZsYW1lLCBob3Qgc29saWRzLCBoYXJtZnVsIGdhc2VzLCB2YXBvdXJzIGFuZCBhZXJvc29scy4gQWRkaXRpb25hbCByZXF1aXJlbWVudHMgZm9yIGV5ZSBhbmQgZmFjZSBwcm90ZWN0b3JzIHVzZWQgZHVyaW5nIHdlbGRpbmcgYW5kIHJlbGF0ZWQgdGVjaG5pcXVlcyBhbmQgZm9yIG1lc2ggcHJvdGVjdG9ycyBhcmUgZ2l2ZW4gaW4gSVNPIDE2MzIxLTIgYW5kIElTTyAxNjMyMS0zLCByZXNwZWN0aXZlbHkuIFRoaXMgZG9jdW1lbnQgYXBwbGllcyB0bzog4oCUICAgICBhbGwgcGxhbm8gYXMgd2VsbCBhcyBjb3JyZWN0aXZlIGFuZCBwcmVzY3JpcHRpb24gbGVuc2VkIHByb3RlY3RvcnMgYW5kIGNvbXBvbmVudHM7IOKAlCAgICAgdGhvc2UgZXllIGFuZCBmYWNlIHByb3RlY3RvcnMgdXNlZCBmb3Igb2NjdXBhdGlvbmFsLXR5cGUgdGFza3MgdGhhdCBhcmUgcGVyZm9ybWVkIHNpbWlsYXJseSB0byBhbiBvY2N1cGF0aW9uLCBlLmcuIFwiZG8taXQteW91cnNlbGZcIjsg4oCUICAgICB0aG9zZSBleWUgYW5kIGZhY2UgcHJvdGVjdG9ycyB1c2VkIGluIGVkdWNhdGlvbmFsIGVzdGFibGlzaG1lbnRzLiBUaGlzIGRvY3VtZW50IGRvZXMgbm90IGFwcGx5IHRvOiDigJQgICAgIHByb3RlY3RvcnMgc3BlY2lmaWNhbGx5IGludGVuZGVkIGZvciBwcm90ZWN0aW9uIGFnYWluc3Qgb25seSBzb2xhciByYWRpYXRpb24gYW5kIHVzZWQgaW4gbm9uLSBvY2N1cGF0aW9uYWwgZW52aXJvbm1lbnRzIGZvciB3aGljaCB0aGUgSVNPIDEyMzEyIHNlcmllcyBhcHBsaWVzOyDigJQgICAgIHByb3RlY3RvcnMgZm9yIG1lZGljYWxseSBwcmVzY3JpYmVkIGFwcGxpY2F0aW9ucyAobm90IG9jY3VwYXRpb25hbCksIGUuZy4gZXllIHByb3RlY3Rpb24gZm9yIHNldmVyZSBkcnkgZXllLCB0aW50cyBwcmVzY3JpYmVkIGZvciBtZWRpY2FsIGNvbmRpdGlvbnM7IOKAlCAgICAgcGF0aWVudCBleWUgcHJvdGVjdG9ycyBkdXJpbmcgZGlhZ25vc2lzIG9yIHRyZWF0bWVudCAoZS5nLiBJU08vVFIgMjI0NjMpOyDigJQgICAgIHByb3RlY3RvcnMgZm9yIHVzZSBkdXJpbmcgbWVkaWNhbCBvciBlLmcuIGFlc3RoZXRpYyBhcHBsaWNhdGlvbnMsIGUuZy4gaW50ZW5zZSBsaWdodCBzb3VyY2VzIChJTFMpIGZvciB3aGljaCB0aGUgSVNPIDEyNjA5IHNlcmllcyBhcHBsaWVzOyDigJQgICAgIHByb3RlY3RvcnMgc3BlY2lmaWNhbGx5IGludGVuZGVkIGZvciBzcG9ydHMgZm9yIHdoaWNoIHRoZSBJU08gMTg1Mjcgc2VyaWVzIGFwcGxpZXM7IOKAlCAgICAgbGFzZXIgcHJvdGVjdG9yczsg4oCUICAgICBmYWNlIHByb3RlY3RvcnMgaW50ZW5kZWQgZm9yIGxpdmUtd29ya2luZyB0byBwcm90ZWN0IGFnYWluc3Qgc2hvcnQtY2lyY3VpdCBlbGVjdHJpYyBhcmNzIGZvciB3aGljaCBJRUMgNjI4MTkgYXBwbGllczsg4oCUICAgICBwcm90ZWN0b3JzIGludGVuZGVkIHRvIHByb3RlY3QgYWdhaW5zdCBpb25pemluZyByYWRpYXRpb24sIGUuZy4gWC1yYXlzLCBmb3Igd2hpY2ggSUVDIDYxMzMxLTMgYXBwbGllcy4gIiwib2JqZWN0SUQiOiI2MjUyN18wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiAxNjMyMS0xOjIwMjEgRXllIGFuZCBmYWNlIHByb3RlY3Rpb24gZm9yIG9jY3VwYXRpb25hbCB1c2Ug4oCUIFBhcnQgMTogR2VuZXJhbCByZXF1aXJlbWVudHMiLCJtYXRjaExldmVsIjoicGFydGlhbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIl19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgZ2VuZXJhbCByZXF1aXJlbWVudHMgZm9yIGV5ZSBhbmQgZmFjZSBwcm90ZWN0b3JzLiBUaGVzZSBwcm90ZWN0b3JzIGFyZSBpbnRlbmRlZCB0byBwcm92aWRlIHByb3RlY3Rpb24gZm9yIHRoZSBleWVzIGFuZCBmYWNlcyBvZiBwZXJzb25zIGFnYWluc3Qgb25lIG9yIG1vcmUgY29tbW9uIG9jY3VwYXRpb25hbCBoYXphcmRzIHN1Y2ggYXMgaW1wYWN0cyBmcm9tIGZseWluZyBwYXJ0aWNsZXMgYW5kIGZyYWdtZW50cywgb3B0aWNhbCByYWRpYXRpb24sIGR1c3RzLCBzcGxhc2hpbmcgbGlxdWlkcywgbW9sdGVuIG1ldGFscywgaGVhdCwgZmxhbWUsIGhvdCBzb2xpZHMsIGhhcm1mdWwgZ2FzZXMsIHZhcG91cnMgYW5kIGFlcm9zb2xzLiBBZGRpdGlvbmFsIHJlcXVpcmVtZW50cyBmb3IgZXllIGFuZCBmYWNlIHByb3RlY3RvcnMgdXNlZCBkdXJpbmcgd2VsZGluZyBhbmQgcmVsYXRlZCB0ZWNobmlxdWVzIGFuZCBmb3IgbWVzaCBwcm90ZWN0b3JzIGFyZSBnaXZlbiBpbiA8ZW0+SVNPPC9lbT4gMTYzMjEtMiBhbmQgPGVtPklTTzwvZW0+IDE2MzIxLTMsIHJlc3BlY3RpdmVseS4gVGhpcyBkb2N1bWVudCBhcHBsaWVzIHRvOiDigJQgICAgIGFsbCBwbGFubyBhcyB3ZWxsIGFzIGNvcnJlY3RpdmUgYW5kIHByZXNjcmlwdGlvbiBsZW5zZWQgcHJvdGVjdG9ycyBhbmQgY29tcG9uZW50czsg4oCUICAgICB0aG9zZSBleWUgYW5kIGZhY2UgcHJvdGVjdG9ycyB1c2VkIGZvciBvY2N1cGF0aW9uYWwtdHlwZSB0YXNrcyB0aGF0IGFyZSBwZXJmb3JtZWQgc2ltaWxhcmx5IHRvIGFuIG9jY3VwYXRpb24sIGUuZy4gXCJkby1pdC15b3Vyc2VsZlwiOyDigJQgICAgIHRob3NlIGV5ZSBhbmQgZmFjZSBwcm90ZWN0b3JzIHVzZWQgaW4gZWR1Y2F0aW9uYWwgZXN0YWJsaXNobWVudHMuIFRoaXMgZG9jdW1lbnQgZG9lcyBub3QgYXBwbHkgdG86IOKAlCAgICAgcHJvdGVjdG9ycyBzcGVjaWZpY2FsbHkgaW50ZW5kZWQgZm9yIHByb3RlY3Rpb24gYWdhaW5zdCBvbmx5IHNvbGFyIHJhZGlhdGlvbiBhbmQgdXNlZCBpbiBub24tIG9jY3VwYXRpb25hbCBlbnZpcm9ubWVudHMgZm9yIHdoaWNoIHRoZSA8ZW0+SVNPPC9lbT4gPGVtPjEyMzwvZW0+MTIgc2VyaWVzIGFwcGxpZXM7IOKAlCAgICAgcHJvdGVjdG9ycyBmb3IgbWVkaWNhbGx5IHByZXNjcmliZWQgYXBwbGljYXRpb25zIChub3Qgb2NjdXBhdGlvbmFsKSwgZS5nLiBleWUgcHJvdGVjdGlvbiBmb3Igc2V2ZXJlIGRyeSBleWUsIHRpbnRzIHByZXNjcmliZWQgZm9yIG1lZGljYWwgY29uZGl0aW9uczsg4oCUICAgICBwYXRpZW50IGV5ZSBwcm90ZWN0b3JzIGR1cmluZyBkaWFnbm9zaXMgb3IgdHJlYXRtZW50IChlLmcuIDxlbT5JU088L2VtPi9UUiAyMjQ2Myk7IOKAlCAgICAgcHJvdGVjdG9ycyBmb3IgdXNlIGR1cmluZyBtZWRpY2FsIG9yIGUuZy4gYWVzdGhldGljIGFwcGxpY2F0aW9ucywgZS5nLiBpbnRlbnNlIGxpZ2h0IHNvdXJjZXMgKElMUykgZm9yIHdoaWNoIHRoZSA8ZW0+SVNPPC9lbT4gMTI2MDkgc2VyaWVzIGFwcGxpZXM7IOKAlCAgICAgcHJvdGVjdG9ycyBzcGVjaWZpY2FsbHkgaW50ZW5kZWQgZm9yIHNwb3J0cyBmb3Igd2hpY2ggdGhlIDxlbT5JU088L2VtPiAxODUyNyBzZXJpZXMgYXBwbGllczsg4oCUICAgICBsYXNlciBwcm90ZWN0b3JzOyDigJQgICAgIGZhY2UgcHJvdGVjdG9ycyBpbnRlbmRlZCBmb3IgbGl2ZS13b3JraW5nIHRvIHByb3RlY3QgYWdhaW5zdCBzaG9ydC1jaXJjdWl0IGVsZWN0cmljIGFyY3MgZm9yIHdoaWNoIElFQyA2MjgxOSBhcHBsaWVzOyDigJQgICAgIHByb3RlY3RvcnMgaW50ZW5kZWQgdG8gcHJvdGVjdCBhZ2FpbnN0IGlvbml6aW5nIHJhZGlhdGlvbiwgZS5nLiBYLXJheXMsIGZvciB3aGljaCBJRUMgNjEzMzEtMyBhcHBsaWVzLiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNi83Mi82NzIyOCIsInV1aWQiOiJlYzYwNzY1ZS1hZDllLTQ2NjAtOWZhZS0wMzM5NTJkYjc2NzEiLCJ0aXRsZSI6IklTTyAxMDg0OC0zOjIwMTcgQWNvdXN0aWNzIOKAlCBMYWJvcmF0b3J5IGFuZCBmaWVsZCBtZWFzdXJlbWVudCBvZiBmbGFua2luZyB0cmFuc21pc3Npb24gZm9yIGFpcmJvcm5lLCBpbXBhY3QgYW5kIGJ1aWxkaW5nIHNlcnZpY2UgZXF1aXBtZW50IHNvdW5kIGJldHdlZW4gYWRqb2luaW5nIHJvb21zIOKAlCBQYXJ0IDM6IEFwcGxpY2F0aW9uIHRvIFR5cGUgQiBlbGVtZW50cyB3aGVuIHRoZSBqdW5jdGlvbiBoYXMgYSBzdWJzdGFudGlhbCBpbmZsdWVuY2UiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIyLCJvcmRlciI6MTEsInRleHQiOiJJU08gMTA4NDggKGFsbCBwYXJ0cykgc3BlY2lmaWVzIG1lYXN1cmVtZW50IG1ldGhvZHMgdG8gY2hhcmFjdGVyaXplIHRoZSBmbGFua2luZyB0cmFuc21pc3Npb24gb2Ygb25lIG9yIHNldmVyYWwgYnVpbGRpbmcgY29tcG9uZW50cy4gSVNPIDEwODQ4LTM6MjAxNyBzcGVjaWZpZXMgbGFib3JhdG9yeSBhbmQgZmllbGQgbWVhc3VyZW1lbnRzIG9mIGJ1aWxkaW5ncyBmb3IgVHlwZSBCIGVsZW1lbnRzIChkZWZpbmVkIGluIElTTyAxMDg0OOKAkTEpIHdoZW4gdGhlIGp1bmN0aW9uIGhhcyBhIHN1YnN0YW50aWFsIGluZmx1ZW5jZS4gTGFib3JhdG9yeSBtZWFzdXJlbWVudHMgYXJlIHVzZWQgdG8gcXVhbnRpZnkgdGhlIHBlcmZvcm1hbmNlIG9mIHRoZSBqdW5jdGlvbiB3aXRoIHN1cHByZXNzZWQgZmxhbmtpbmcgdHJhbnNtaXNzaW9uIGZyb20gdGhlIGxhYm9yYXRvcnkgc3RydWN0dXJlLiBGaWVsZCBtZWFzdXJlbWVudHMgYXJlIHVzZWQgdG8gY2hhcmFjdGVyaXplIHRoZSBpbiBzaXR1IHBlcmZvcm1hbmNlIGFuZCBpdCBpcyBub3QgdXN1YWxseSBwb3NzaWJsZSB0byBzdXBwcmVzcyB1bndhbnRlZCBmbGFua2luZyB0cmFuc21pc3Npb24gc3VmZmljaWVudGx5OyBoZW5jZSwgdGhlIHJlc3VsdHMgY2FuIG9ubHkgYmUgY29uc2lkZXJlZCByZXByZXNlbnRhdGl2ZSBvZiB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhhdCBqdW5jdGlvbiB3aGVuIGluc3RhbGxlZCBpbiB0aGF0IHBhcnRpY3VsYXIgYnVpbGRpbmcgc3RydWN0dXJlLiBJU08gMTA4NDgtMzoyMDE3IGlzIHJlZmVycmVkIHRvIGluIElTTyAxMDg0OOKAkTE6MjAxNywgNC41IGFzIGJlaW5nIGEgc3VwcG9ydGluZyBwYXJ0IHRvIHRoZSBmcmFtZSBkb2N1bWVudCBhbmQgYXBwbGllcyB0byBUeXBlIEIgZWxlbWVudHMgdGhhdCBhcmUgc3RydWN0dXJhbGx5IGNvbm5lY3RlZCBhcyBkZWZpbmVkIGluIElTTyAxMDg0OOKAkTEuIFRoZSBtZWFzdXJlZCBxdWFudGl0aWVzIGNhbiBiZSB1c2VkIHRvIGNvbXBhcmUgZGlmZmVyZW50IHByb2R1Y3RzLCBvciB0byBleHByZXNzIGEgcmVxdWlyZW1lbnQsIG9yIGFzIGlucHV0IGRhdGEgZm9yIHByZWRpY3Rpb24gbWV0aG9kcywgc3VjaCBhcyBJU08gMTIzNTTigJExIGFuZCBJU08gMTIzNTTigJEyLiBUaGUgcmVsZXZhbnQgcXVhbnRpdHkgdG8gYmUgbWVhc3VyZWQgaXMgc2VsZWN0ZWQgYWNjb3JkaW5nIHRvIElTTyAxMDg0OOKAkTE6MjAxNywgNC41LiBUaGUgcGVyZm9ybWFuY2Ugb2YgdGhlIGJ1aWxkaW5nIGNvbXBvbmVudHMgaXMgZXhwcmVzc2VkIGVpdGhlciBhcyBhbiBvdmVyYWxsIHF1YW50aXR5IGZvciB0aGUgY29tYmluYXRpb24gb2YgZWxlbWVudHMgYW5kIGp1bmN0aW9uIChzdWNoIGFzIERuLGYsaWogYW5kL29yIExuLGYsaWogYW5kL29yIExuZTAsZixpaikgb3IgYXMgdGhlIG5vcm1hbGl6ZWQgZGlyZWN0aW9uLWF2ZXJhZ2UgdmVsb2NpdHkgbGV2ZWwgZGlmZmVyZW5jZSAgb2YgYSBqdW5jdGlvbi4gRG4sZixpaiwgTG4sZixpaiwgTG5lMCxmLGlqIGFuZCAgZGVwZW5kIG9uIHRoZSBhY3R1YWwgZGltZW5zaW9ucyBvZiB0aGUgZWxlbWVudHMuICIsIm9iamVjdElEIjoiNjcyMjhfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gMTA4NDgtMzoyMDE3IEFjb3VzdGljcyDigJQgTGFib3JhdG9yeSBhbmQgZmllbGQgbWVhc3VyZW1lbnQgb2YgZmxhbmtpbmcgdHJhbnNtaXNzaW9uIGZvciBhaXJib3JuZSwgaW1wYWN0IGFuZCBidWlsZGluZyBzZXJ2aWNlIGVxdWlwbWVudCBzb3VuZCBiZXR3ZWVuIGFkam9pbmluZyByb29tcyDigJQgUGFydCAzOiBBcHBsaWNhdGlvbiB0byBUeXBlIEIgZWxlbWVudHMgd2hlbiB0aGUganVuY3Rpb24gaGFzIGEgc3Vic3RhbnRpYWwgaW5mbHVlbmNlIiwibWF0Y2hMZXZlbCI6InBhcnRpYWwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiAxMDg0OCAoYWxsIHBhcnRzKSBzcGVjaWZpZXMgbWVhc3VyZW1lbnQgbWV0aG9kcyB0byBjaGFyYWN0ZXJpemUgdGhlIGZsYW5raW5nIHRyYW5zbWlzc2lvbiBvZiBvbmUgb3Igc2V2ZXJhbCBidWlsZGluZyBjb21wb25lbnRzLiA8ZW0+SVNPPC9lbT4gMTA4NDgtMzoyMDE3IHNwZWNpZmllcyBsYWJvcmF0b3J5IGFuZCBmaWVsZCBtZWFzdXJlbWVudHMgb2YgYnVpbGRpbmdzIGZvciBUeXBlIEIgZWxlbWVudHMgKGRlZmluZWQgaW4gPGVtPklTTzwvZW0+IDEwODQ44oCRMSkgd2hlbiB0aGUganVuY3Rpb24gaGFzIGEgc3Vic3RhbnRpYWwgaW5mbHVlbmNlLiBMYWJvcmF0b3J5IG1lYXN1cmVtZW50cyBhcmUgdXNlZCB0byBxdWFudGlmeSB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhlIGp1bmN0aW9uIHdpdGggc3VwcHJlc3NlZCBmbGFua2luZyB0cmFuc21pc3Npb24gZnJvbSB0aGUgbGFib3JhdG9yeSBzdHJ1Y3R1cmUuIEZpZWxkIG1lYXN1cmVtZW50cyBhcmUgdXNlZCB0byBjaGFyYWN0ZXJpemUgdGhlIGluIHNpdHUgcGVyZm9ybWFuY2UgYW5kIGl0IGlzIG5vdCB1c3VhbGx5IHBvc3NpYmxlIHRvIHN1cHByZXNzIHVud2FudGVkIGZsYW5raW5nIHRyYW5zbWlzc2lvbiBzdWZmaWNpZW50bHk7IGhlbmNlLCB0aGUgcmVzdWx0cyBjYW4gb25seSBiZSBjb25zaWRlcmVkIHJlcHJlc2VudGF0aXZlIG9mIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGF0IGp1bmN0aW9uIHdoZW4gaW5zdGFsbGVkIGluIHRoYXQgcGFydGljdWxhciBidWlsZGluZyBzdHJ1Y3R1cmUuIDxlbT5JU088L2VtPiAxMDg0OC0zOjIwMTcgaXMgcmVmZXJyZWQgdG8gaW4gPGVtPklTTzwvZW0+IDEwODQ44oCRMToyMDE3LCA0LjUgYXMgYmVpbmcgYSBzdXBwb3J0aW5nIHBhcnQgdG8gdGhlIGZyYW1lIGRvY3VtZW50IGFuZCBhcHBsaWVzIHRvIFR5cGUgQiBlbGVtZW50cyB0aGF0IGFyZSBzdHJ1Y3R1cmFsbHkgY29ubmVjdGVkIGFzIGRlZmluZWQgaW4gPGVtPklTTzwvZW0+IDEwODQ44oCRMS4gVGhlIG1lYXN1cmVkIHF1YW50aXRpZXMgY2FuIGJlIHVzZWQgdG8gY29tcGFyZSBkaWZmZXJlbnQgcHJvZHVjdHMsIG9yIHRvIGV4cHJlc3MgYSByZXF1aXJlbWVudCwgb3IgYXMgaW5wdXQgZGF0YSBmb3IgcHJlZGljdGlvbiBtZXRob2RzLCBzdWNoIGFzIDxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT41NOKAkTEgYW5kIDxlbT5JU088L2VtPiA8ZW0+MTIzPC9lbT41NOKAkTIuIFRoZSByZWxldmFudCBxdWFudGl0eSB0byBiZSBtZWFzdXJlZCBpcyBzZWxlY3RlZCBhY2NvcmRpbmcgdG8gPGVtPklTTzwvZW0+IDEwODQ44oCRMToyMDE3LCA0LjUuIFRoZSBwZXJmb3JtYW5jZSBvZiB0aGUgYnVpbGRpbmcgY29tcG9uZW50cyBpcyBleHByZXNzZWQgZWl0aGVyIGFzIGFuIG92ZXJhbGwgcXVhbnRpdHkgZm9yIHRoZSBjb21iaW5hdGlvbiBvZiBlbGVtZW50cyBhbmQganVuY3Rpb24gKHN1Y2ggYXMgRG4sZixpaiBhbmQvb3IgTG4sZixpaiBhbmQvb3IgTG5lMCxmLGlqKSBvciBhcyB0aGUgbm9ybWFsaXplZCBkaXJlY3Rpb24tYXZlcmFnZSB2ZWxvY2l0eSBsZXZlbCBkaWZmZXJlbmNlICBvZiBhIGp1bmN0aW9uLiBEbixmLGlqLCBMbixmLGlqLCBMbmUwLGYsaWogYW5kICBkZXBlbmQgb24gdGhlIGFjdHVhbCBkaW1lbnNpb25zIG9mIHRoZSBlbGVtZW50cy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDYvNzIvNjcyMjYiLCJ1dWlkIjoiZmUzZjdkMWQtYzJhNS00M2UyLWFhNmQtMDZjZjA0OTZiYjhlIiwidGl0bGUiOiJJU08gMTA4NDgtMToyMDE3IEFjb3VzdGljcyDigJQgTGFib3JhdG9yeSBhbmQgZmllbGQgbWVhc3VyZW1lbnQgb2YgZmxhbmtpbmcgdHJhbnNtaXNzaW9uIGZvciBhaXJib3JuZSwgaW1wYWN0IGFuZCBidWlsZGluZyBzZXJ2aWNlIGVxdWlwbWVudCBzb3VuZCBiZXR3ZWVuIGFkam9pbmluZyByb29tcyDigJQgUGFydCAxOiBGcmFtZSBkb2N1bWVudCIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjIsIm9yZGVyIjoxMSwidGV4dCI6IklTTyAxMDg0OCAoYWxsIHBhcnRzKSBzcGVjaWZpZXMgbWVhc3VyZW1lbnQgbWV0aG9kcyB0byBjaGFyYWN0ZXJpemUgdGhlIGZsYW5raW5nIHRyYW5zbWlzc2lvbiBvZiBvbmUgb3Igc2V2ZXJhbCBidWlsZGluZyBjb21wb25lbnRzLiBUaGVzZSBtZWFzdXJlbWVudHMgYXJlIHBlcmZvcm1lZCBpbiBhIGxhYm9yYXRvcnkgdGVzdCBmYWNpbGl0eSBvciBpbiB0aGUgZmllbGQuIFRoZSBwZXJmb3JtYW5jZSBvZiB0aGUgYnVpbGRpbmcgY29tcG9uZW50cyBpcyBleHByZXNzZWQgZWl0aGVyIGFzIGFuIG92ZXJhbGwgcXVhbnRpdHkgZm9yIHRoZSBjb21iaW5hdGlvbiBvZiBlbGVtZW50cyBhbmQganVuY3Rpb24gKHN1Y2ggYXMgdGhlIG5vcm1hbGl6ZWQgZmxhbmtpbmcgbGV2ZWwgZGlmZmVyZW5jZSBhbmQvb3Igbm9ybWFsaXplZCBmbGFua2luZyBpbXBhY3Qgc291bmQgcHJlc3N1cmUgbGV2ZWwpIG9yIGFzIHRoZSB2aWJyYXRpb24gcmVkdWN0aW9uIGluZGV4IG9mIGEganVuY3Rpb24gb3IgdGhlIG5vcm1hbGl6ZWQgZGlyZWN0aW9uLWF2ZXJhZ2UgdmlicmF0aW9uIGxldmVsIGRpZmZlcmVuY2Ugb2YgYSBqdW5jdGlvbi4gVHdvIGFwcHJvYWNoZXMgYXJlIHVzZWQgZm9yIHN0cnVjdHVyZS1ib3JuZSBzb3VuZCBzb3VyY2VzIGluIGJ1aWxkaW5ncywgYSBub3JtYWxpemVkIGZsYW5raW5nIGVxdWlwbWVudCBzb3VuZCBwcmVzc3VyZSBsZXZlbCBhbmQgYSB0cmFuc21pc3Npb24gZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byBlc3RpbWF0ZSBzb3VuZCBwcmVzc3VyZSBsZXZlbHMgaW4gYSByZWNlaXZpbmcgcm9vbSBkdWUgdG8gc3RydWN0dXJlLWJvcm5lIGV4Y2l0YXRpb24gYnkgc2VydmljZSBlcXVpcG1lbnQgaW4gYSBzb3VyY2Ugcm9vbS4gVGhlIGZvcm1lciBhcHByb2FjaCBhc3N1bWVzIHRoYXQgZmxhbmtpbmcgdHJhbnNtaXNzaW9uIGlzIGxpbWl0ZWQgdG8gb25lIGp1bmN0aW9uIChvciBubyBqdW5jdGlvbiBpZiB0aGUgZWxlbWVudCBzdXBwb3J0aW5nIHRoZSBlcXVpcG1lbnQgaXMgdGhlIHNlcGFyYXRpbmcgZWxlbWVudCksIGFuZCB0aGUgbGF0dGVyIGNvbnNpZGVycyB0aGUgY29tYmluYXRpb24gb2YgZGlyZWN0IChpZiBhbnkpIGFuZCBhbGwgZmxhbmtpbmcgdHJhbnNtaXNzaW9uIHBhdGhzLiBJU08gMTA4NDgtMToyMDE3IGNvbnRhaW5zIGRlZmluaXRpb25zLCBnZW5lcmFsIHJlcXVpcmVtZW50cyBmb3IgdGVzdCBlbGVtZW50cyBhbmQgdGVzdCByb29tcywgYW5kIG1lYXN1cmVtZW50IG1ldGhvZHMuIEd1aWRlbGluZXMgYXJlIGdpdmVuIGZvciB0aGUgc2VsZWN0aW9uIG9mIHRoZSBxdWFudGl0eSB0byBiZSBtZWFzdXJlZCwgZGVwZW5kaW5nIG9uIHRoZSBqdW5jdGlvbiBhbmQgdGhlIHR5cGVzIG9mIGJ1aWxkaW5nIGVsZW1lbnRzIGludm9sdmVkLiBPdGhlciBwYXJ0cyBvZiBJU08gMTA4NDggc3BlY2lmeSB0aGUgYXBwbGljYXRpb24gZm9yIGRpZmZlcmVudCB0eXBlcyBvZiBqdW5jdGlvbiBhbmQgYnVpbGRpbmcgZWxlbWVudHMuIFRoZSBxdWFudGl0aWVzIGNoYXJhY3Rlcml6aW5nIHRoZSBmbGFua2luZyB0cmFuc21pc3Npb24gY2FuIGJlIHVzZWQgdG8gY29tcGFyZSBkaWZmZXJlbnQgcHJvZHVjdHMsIG9yIHRvIGV4cHJlc3MgYSByZXF1aXJlbWVudCwgb3IgYXMgaW5wdXQgZGF0YSBmb3IgcHJlZGljdGlvbiBtZXRob2RzLCBzdWNoIGFzIElTTyAxMjM1NOKAkTEgYW5kIElTTyAxMjM1NOKAkTIuICIsIm9iamVjdElEIjoiNjcyMjZfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gMTA4NDgtMToyMDE3IEFjb3VzdGljcyDigJQgTGFib3JhdG9yeSBhbmQgZmllbGQgbWVhc3VyZW1lbnQgb2YgZmxhbmtpbmcgdHJhbnNtaXNzaW9uIGZvciBhaXJib3JuZSwgaW1wYWN0IGFuZCBidWlsZGluZyBzZXJ2aWNlIGVxdWlwbWVudCBzb3VuZCBiZXR3ZWVuIGFkam9pbmluZyByb29tcyDigJQgUGFydCAxOiBGcmFtZSBkb2N1bWVudCIsIm1hdGNoTGV2ZWwiOiJwYXJ0aWFsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gMTA4NDggKGFsbCBwYXJ0cykgc3BlY2lmaWVzIG1lYXN1cmVtZW50IG1ldGhvZHMgdG8gY2hhcmFjdGVyaXplIHRoZSBmbGFua2luZyB0cmFuc21pc3Npb24gb2Ygb25lIG9yIHNldmVyYWwgYnVpbGRpbmcgY29tcG9uZW50cy4gVGhlc2UgIiwibWF0Y2hMZXZlbCI6InBhcnRpYWwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDAvMDQvNDQzIiwidXVpZCI6IjYxODk0MDc0LTBiZmEtNDg4Zi1hODQ4LWMzOTU3ZTU1MjE4NyIsInRpdGxlIjoiSVNPL1IgMTIzOjE5NjggVGl0bGUgbWlzc2luZyAtIExlZ2FjeSBwYXBlciBkb2N1bWVudCIsInN0YXR1cyI6IldpdGhkcmF3biIsInllYXIiOjE5NzMsIm9yZGVyIjoxMDAsIm9iamVjdElEIjoiNDQzXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+L1IgPGVtPjEyMzwvZW0+OjE5NjggVGl0bGUgbWlzc2luZyAtIExlZ2FjeSBwYXBlciBkb2N1bWVudCIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA1LzE0LzUxNDAyIiwidXVpZCI6ImVmZmEzN2U1LWMwNGQtNDkzNy1hOWY4LTI3NjE2YmFlMGMwNyIsInRpdGxlIjoiSVNPL1RSIDEyMzg5OjIwMDkgTWV0aG9kcyBvZiB0ZXN0aW5nIGNlbWVudCDigJQgUmVwb3J0IG9mIGEgdGVzdCBwcm9ncmFtbWUg4oCUIENoZW1pY2FsIGFuYWx5c2lzIGJ5IHgtcmF5IGZsdW9yZXNjZW5jZSIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjEsIm9yZGVyIjoxMSwidGV4dCI6IklTTy9UUyAxMjM4OToyMDA5IGRlc2NyaWJlcyB0aGUgcmVzdWx0cyBvZiB0aGUgaW50ZXItbGFib3JhdG9yeSB0ZXN0aW5nIG9mIHRoZSBjaGVtaWNhbCBhbmFseXNpcyBvZiBjZW1lbnQgYnkgeC1yYXkgZmx1b3Jlc2NlbmNlLiBJbiB0aGUgZmlyc3QgaW5zdGFuY2UsIHRoZSBpbnRlci1sYWJvcmF0b3J5IHRlc3Rpbmcgd2FzIGNhcnJpZWQgb3V0IGluIEphcGFuIGFuZCBBc2lhbiBjb3VudHJpZXMgaW4gYWNjb3JkYW5jZSB3aXRoIEpJUyBSIDUyMDQ6MjAwMi4gQSB0b3RhbCBvZiAzMCBsYWJvcmF0b3JpZXMsIDE2IGluIEphcGFuIGFuZCAxNCBvdXRzaWRlIEphcGFuLCBwYXJ0aWNpcGF0ZWQgaW4gdGhlIG9yaWdpbmFsIHRlc3RpbmcgcHJvZ3JhbW1lLiBBIGZ1cnRoZXIgMTIgRXVyb3BlYW4gbGFib3JhdG9yaWVzIHBhcnRpY2lwYXRlZCBpbiB0ZXN0cyB3aXRoIHRoZSBzYW1lIG1hdGVyaWFscyBpbiAyMDA1IGluIGFjY29yZGFuY2Ugd2l0aCBFTiAxOTYtMiwgYSBkZXZlbG9wbWVudCBieSBDRU4vVEMgNTEvV0cgMTUvVEcgMSBvZiBKSVMgUiA1MjA0LiBUaGUgbGF0ZXN0IHZlcnNpb24sIGRldmVsb3BlZCBhcyBJU08gMjk1ODEtMiwgaXMsIGFzIG9mIHRoZSBkYXRlIG9mIHB1YmxpY2F0aW9uIG9mIHRoaXMgVGVjaG5pY2FsIFJlcG9ydCwgaW4gdGhlIHByb2Nlc3Mgb2YgYmVpbmcgY2lyY3VsYXRlZCBmb3IgdGVjaG5pY2FsIGVucXVpcnkuIFRoZSB0ZXN0IHNhbXBsZXMgdXNlZCB3ZXJlIFBvcnRsYW5kIGNlbWVudCBjb25mb3JtaW5nIHRvIENFTSBJIG9mIEVOIDE5Ny0xIGFuZCBhIG1peHR1cmUgb2YgUG9ydGxhbmQgY2VtZW50IGFuZCBibGFzdCBmdXJuYWNlIHNsYWcuIFRoZSBtaXh0dXJlIGNvcnJlc3BvbmRlZCB0byB0aGUgY29tcG9zaXRpb24gb2YgUG9ydGxhbmQgYmxhc3QgZnVybmFjZSBzbGFnIGNlbWVudCwgY2xhc3MgQiwgc3BlY2lmaWVkIGluIEpJUyBSIDUyMTEgYW5kIENFTSBJSUkvQSBvZiBFTiAxOTctMS4gQ2VtZW50IHJlZmVyZW5jZSBtYXRlcmlhbHMgZm9yIHgtcmF5IGZsdW9yZXNjZW5jZSBhbmFseXNpcyAoTm8uIDYwMUEpIGFyZSB1c2VkIGZvciB0aGUgY2FsaWJyYXRpb24gc3RhbmRhcmRzLCBhbmQgY2VydGlmaWVkIHJlZmVyZW5jZSBtYXRlcmlhbHMgSkNBLUNSTS0xIGFuZCBKQ0EtQ1JNLTIgYXJlIHVzZWQgYXMgdGhlIHZhbGlkYXRpb24gbWF0ZXJpYWxzLiBDb25zdGl0dWVudHMgYW5hbHlzZWQgaW5jbHVkZSBTaU8gMiAsIEFsIDIgTyAzICwgRmUgMiBPIDMgLCBDYU8sIE1nTywgU08gMyAsIE5hIDIgTywgSyAyIE8sIFRpTyAyICwgUCAyIE8gNSAsIE1uTyBhbmQgU3JPLiBUaGUgbG9zcyBvbiBpZ25pdGlvbiBpcyBhbHNvIGRldGVybWluZWQuIFRoZSBJU08gcm91bmQgcm9iaW4gaXMgYSBtZXRob2QtcGVyZm9ybWFuY2Ugc3R1ZHkgY29uZHVjdGVkIHVuZGVyIGNsb3NlIHRvIG9wdGltdW0gY29uZGl0aW9ucyB3aXRoIGNsZWFyIGNhbGlicmF0aW9uIGFuZCBtZWFzdXJlbWVudCBndWlkZWxpbmVzLiBUaGlzIGlzIGNvbmR1Y2l2ZSB0byBwcm9kdWNpbmcg4oCcYmVzdCBwcmFjdGljZeKAnSB2YWx1ZXMgcmVwcmVzZW50YXRpdmUgb2YgdGhlIGlkZWFsIHNpdHVhdGlvbi4gSG93ZXZlciwgSVNPIDI5NTgxLTIgaXMgaW50ZW5kZWQgZm9yIHVzZSB1bmRlciBldmVyeWRheSBjb25kaXRpb25zIGluIGxhYm9yYXRvcmllcyB0aGF0IG9wZXJhdGUgdG8g4oCcZ29vZCBwcmFjdGljZeKAnS4gVGhlIHJlc3VsdHMgYXJlIHByZXNlbnRlZCBmb3Igc29tZSBpbnRlcm5hdGlvbmFsIHJvdW5kIHJvYmlucyBjYXJyaWVkIG91dCBieSBhIGxhcmdlIG51bWJlciBvZiBsYWJvcmF0b3JpZXMgZGVtb25zdHJhdGluZyB0aGUgc3VpdGFiaWxpdHkgb2YgSVNPIDI5NTgxLTIgYXMgYSBtZWFucyBmb3IgY29tcGFyaW5nIHRoZSBldmVyeWRheSBwZXJmb3JtYW5jZSBvZiBsYWJvcmF0b3JpZXMuICIsIm9iamVjdElEIjoiNTE0MDJfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4vVFIgPGVtPjEyMzwvZW0+ODk6MjAwOSBNZXRob2RzIG9mIHRlc3RpbmcgY2VtZW50IOKAlCBSZXBvcnQgb2YgYSB0ZXN0IHByb2dyYW1tZSDigJQgQ2hlbWljYWwgYW5hbHlzaXMgYnkgeC1yYXkgZmx1b3Jlc2NlbmNlIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPi9UUyA8ZW0+MTIzPC9lbT44OToyMDA5IGRlc2NyaWJlcyB0aGUgcmVzdWx0cyBvZiB0aGUgaW50ZXItbGFib3JhdG9yeSB0ZXN0aW5nIG9mIHRoZSBjaGVtaWNhbCBhbmFseXNpcyBvZiBjZW1lbnQgYnkgeC1yYXkgZmx1b3Jlc2NlbmNlLiBJbiB0aGUgZmlyc3QgaW5zdGFuY2UsIHRoZSBpbnRlci1sYWJvcmF0b3J5IHRlc3Rpbmcgd2FzIGNhcnJpZWQgb3V0IGluIEphcGFuIGFuZCBBc2lhbiBjb3VudHJpZXMgaW4gYWNjb3JkYW5jZSB3aXRoIEpJUyBSIDUyMDQ6MjAwMi4gQSB0b3RhbCBvZiAzMCBsYWJvcmF0b3JpZXMsIDE2IGluIEphcGFuIGFuZCAxNCBvdXRzaWRlIEphcGFuLCBwYXJ0aWNpcGF0ZWQgaW4gdGhlIG9yaWdpbmFsIHRlc3RpbmcgcHJvZ3JhbW1lLiBBIGZ1cnRoZXIgMTIgRXVyb3BlYW4gbGFib3JhdG9yaWVzIHBhcnRpY2lwYXRlZCBpbiB0ZXN0cyB3aXRoIHRoZSBzYW1lIG1hdGVyaWFscyBpbiAyMDA1IGluIGFjY29yZGFuY2Ugd2l0aCBFTiAxOTYtMiwgYSBkZXZlbG9wbWVudCBieSBDRU4vVEMgNTEvV0cgMTUvVEcgMSBvZiBKSVMgUiA1MjA0LiBUaGUgbGF0ZXN0IHZlcnNpb24sIGRldmVsb3BlZCBhcyA8ZW0+SVNPPC9lbT4gMjk1ODEtMiwgaXMsIGFzIG9mIHRoZSBkYXRlIG9mIHB1YmxpY2F0aW9uIG9mIHRoaXMgVGVjaG5pY2FsIFJlcG9ydCwgaW4gdGhlIHByb2Nlc3Mgb2YgYmVpbmcgY2lyY3VsYXRlZCBmb3IgdGVjaG5pY2FsIGVucXVpcnkuIFRoZSB0ZXN0IHNhbXBsZXMgdXNlZCB3ZXJlIFBvcnRsYW5kIGNlbWVudCBjb25mb3JtaW5nIHRvIENFTSBJIG9mIEVOIDE5Ny0xIGFuZCBhIG1peHR1cmUgb2YgUG9ydGxhbmQgY2VtZW50IGFuZCBibGFzdCBmdXJuYWNlIHNsYWcuIFRoZSBtaXh0dXJlIGNvcnJlc3BvbmRlZCB0byB0aGUgY29tcG9zaXRpb24gb2YgUG9ydGxhbmQgYmxhc3QgZnVybmFjZSBzbGFnIGNlbWVudCwgY2xhc3MgQiwgc3BlY2lmaWVkIGluIEpJUyBSIDUyMTEgYW5kIENFTSBJSUkvQSBvZiBFTiAxOTctMS4gQ2VtZW50IHJlZmVyZW5jZSBtYXRlcmlhbHMgZm9yIHgtcmF5IGZsdW9yZXNjZW5jZSBhbmFseXNpcyAoTm8uIDYwMUEpIGFyZSB1c2VkIGZvciB0aGUgY2FsaWJyYXRpb24gc3RhbmRhcmRzLCBhbmQgY2VydGlmaWVkIHJlZmVyZW5jZSBtYXRlcmlhbHMgSkNBLUNSTS0xIGFuZCBKQ0EtQ1JNLTIgYXJlIHVzZWQgYXMgdGhlIHZhbGlkYXRpb24gbWF0ZXJpYWxzLiBDb25zdGl0dWVudHMgYW5hbHlzZWQgaW5jbHVkZSBTaU8gMiAsIEFsIDIgTyAzICwgRmUgMiBPIDMgLCBDYU8sIE1nTywgU08gMyAsIE5hIDIgTywgSyAyIE8sIFRpTyAyICwgUCAyIE8gNSAsIE1uTyBhbmQgU3JPLiBUaGUgbG9zcyBvbiBpZ25pdGlvbiBpcyBhbHNvIGRldGVybWluZWQuIFRoZSA8ZW0+SVNPPC9lbT4gcm91bmQgcm9iaW4gaXMgYSBtZXRob2QtcGVyZm9ybWFuY2Ugc3R1ZHkgY29uZHVjdGVkIHVuZGVyIGNsb3NlIHRvIG9wdGltdW0gY29uZGl0aW9ucyB3aXRoIGNsZWFyIGNhbGlicmF0aW9uIGFuZCBtZWFzdXJlbWVudCBndWlkZWxpbmVzLiBUaGlzIGlzIGNvbmR1Y2l2ZSB0byBwcm9kdWNpbmcg4oCcYmVzdCBwcmFjdGljZeKAnSB2YWx1ZXMgcmVwcmVzZW50YXRpdmUgb2YgdGhlIGlkZWFsIHNpdHVhdGlvbi4gSG93ZXZlciwgPGVtPklTTzwvZW0+IDI5NTgxLTIgaXMgaW50ZW5kZWQgZm9yIHVzZSB1bmRlciBldmVyeWRheSBjb25kaXRpb25zIGluIGxhYm9yYXRvcmllcyB0aGF0IG9wZXJhdGUgdG8g4oCcZ29vZCBwcmFjdGljZeKAnS4gVGhlIHJlc3VsdHMgYXJlIHByZXNlbnRlZCBmb3Igc29tZSBpbnRlcm5hdGlvbmFsIHJvdW5kIHJvYmlucyBjYXJyaWVkIG91dCBieSBhIGxhcmdlIG51bWJlciBvZiBsYWJvcmF0b3JpZXMgZGVtb25zdHJhdGluZyB0aGUgc3VpdGFiaWxpdHkgb2YgPGVtPklTTzwvZW0+IDI5NTgxLTIgYXMgYSBtZWFucyBmb3IgY29tcGFyaW5nIHRoZSBldmVyeWRheSBwZXJmb3JtYW5jZSBvZiBsYWJvcmF0b3JpZXMuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzAzLzc1LzM3NTM3IiwidXVpZCI6Ijc3MDkxMTkwLTFiNzYtNDc3Mi04M2IwLTJmMTUxN2U5YjlhNiIsInRpdGxlIjoiSVNPL1RSIDEyMzkxLTQ6MjAwMiBHYXMgY3lsaW5kZXJzIOKAlCBSZWZpbGxhYmxlIHNlYW1sZXNzIHN0ZWVsIOKAlCBQZXJmb3JtYW5jZSB0ZXN0cyDigJQgUGFydCA0OiBGbGF3ZWQtY3lsaW5kZXIgY3ljbGUgdGVzdCIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMTcsIm9yZGVyIjoxMSwidGV4dCI6IlRoaXMgcGFydCBvZiBJU08vVFIgMTIzOTEgYXBwbGllcyB0byBzZWFtbGVzcyBzdGVlbCByZWZpbGxhYmxlIGN5bGluZGVycyBvZiBhbGwgc2l6ZXMgZnJvbSAwLDUgbCB1cCB0byBhbmQgaW5jbHVkaW5nIDE1MCBsIHdhdGVyIGNhcGFjaXR5IHByb2R1Y2VkIG9mIHN0ZWVsIHdpdGggdGVuc2lsZSBzdHJlbmd0aCwgUiBtLCBncmVhdGVyIHRoYW4gMSAxMDAgTVBhLiBJdCBjYW4gYWxzbyBiZSBhcHBsaWVkIHRvIGN5bGluZGVycyBwcm9kdWNlZCBmcm9tIHN0ZWVscyB1c2VkIGF0IGxvd2VyIHRlbnNpbGUgc3RyZW5ndGhzLiBJbiBwYXJ0aWN1bGFyLCBpdCBwcm92aWRlcyB0aGUgdGVjaG5pY2FsIHJhdGlvbmFsZSBhbmQgYmFja2dyb3VuZCB0byBndWlkZSBmdXR1cmUgYWx0ZXJhdGlvbnMgb2YgZXhpc3RpbmcgSVNPIHN0YW5kYXJkcyBvciBmb3IgZGV2ZWxvcGluZyBhZHZhbmNlZCBkZXNpZ24gc3RhbmRhcmRzLiBUaGlzIHBhcnQgb2YgSVNPL1RSIDEyMzkxIGlzIGEgc3VtbWFyeSBhbmQgY29tcGlsYXRpb24gb2YgdGhlIHRlc3QgcmVzdWx0cyBvYnRhaW5lZCBkdXJpbmcgdGhlIGRldmVsb3BtZW50IG9mIHRoZSBcImZsYXdlZC1jeWxpbmRlciBjeWNsZSB0ZXN0XCIuIFRoZSBcImZsYXdlZC1jeWxpbmRlciBjeWNsZSB0ZXN0XCIgd2FzIGRldmVsb3BlZCBhcyBwYXJ0IG9mIGEgY28tb3BlcmF0aXZlIHByb2plY3QgdW5kZXIgdGhlIGRpcmVjdGlvbiBvZiBJU08vVEMgNTgvU0MgMy9XRyAxNC4gVGhlIFwiZmxhd2VkLWN5bGluZGVyIGN5Y2xlIHRlc3RcIiBpcyBhIHRlc3QgbWV0aG9kIHRvIGV2YWx1YXRlIHRoZSBmYXRpZ3VlIHBlcmZvcm1hbmNlIG9mIHN0ZWVsIGN5bGluZGVycyB0aGF0IGFyZSB1c2VkIHRvIHRyYW5zcG9ydCBoaWdoIHByZXNzdXJlLCBjb21wcmVzc2VkIGdhc2VzLiBUaGUgY29uY2VwdCBhbmQgZGV2ZWxvcG1lbnQgb2YgdGhlIGZsYXdlZC1jeWxpbmRlciBjeWNsZSB0ZXN0IGlzIGRlc2NyaWJlZCBpbiBJU08vVFIgMTIzOTEtMS4gVGhlIGRldGFpbHMgb2YgdGhlIHRlc3QgbWV0aG9kIGFuZCB0aGUgY3JpdGVyaWEgZm9yIGFjY2VwdGFibGUgZmF0aWd1ZSBwZXJmb3JtYW5jZSBvZiBzdGVlbCBjeWxpbmRlcnMgYXJlIGdpdmVuIGluIDkuMi42IG9mIElTTyA5ODA5LTI6MjAwMCwgXCJmbGF3ZWQtY3lsaW5kZXIgY3ljbGUgdGVzdFwiLiBJbiB0aGlzIHBhcnQgb2YgSVNPL1RSIDEyMzkxLCB0ZXN0IHJlc3VsdHMgYXJlIHJlcG9ydGVkIGZvciBtb3JlIHRoYW4gYSBodW5kcmVkIGZsYXdlZC1jeWxpbmRlciBjeWNsZSB0ZXN0cyB0aGF0IHdlcmUgY29uZHVjdGVkIG9uIHNlYW1sZXNzIHN0ZWVsIGN5bGluZGVycyByYW5naW5nIGluIG1lYXN1cmVkIHRlbnNpbGUgc3RyZW5ndGggZnJvbSBsZXNzIHRoYW4gODAwIE1QYSB0byBncmVhdGVyIHRoYW4gMSAzNTAgTVBhLiBUaGUgdGVzdCBtZXRob2QgaXMgaW50ZW5kZWQgdG8gYmUgdXNlZCBmb3IgdGhlIHNlbGVjdGlvbiBvZiBtYXRlcmlhbHMgYW5kIGRlc2lnbiBwYXJhbWV0ZXJzIGluIHRoZSBkZXZlbG9wbWVudCBvZiBuZXcgY3lsaW5kZXIgZGVzaWducy4gIiwib2JqZWN0SUQiOiIzNzUzN18wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPi9UUiA8ZW0+MTIzPC9lbT45MS00OjIwMDIgR2FzIGN5bGluZGVycyDigJQgUmVmaWxsYWJsZSBzZWFtbGVzcyBzdGVlbCDigJQgUGVyZm9ybWFuY2UgdGVzdHMg4oCUIFBhcnQgNDogRmxhd2VkLWN5bGluZGVyIGN5Y2xlIHRlc3QiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBwYXJ0IG9mIDxlbT5JU088L2VtPi9UUiA8ZW0+MTIzPC9lbT45MSBhcHBsaWVzIHRvIHNlYW1sZXNzIHN0ZWVsIHJlZmlsbGFibGUgY3lsaW5kZXJzIG9mIGFsbCBzaXplcyBmcm9tIDAsNSBsIHVwIHRvIGFuZCBpbmNsdWRpbmcgMTUwIGwgd2F0ZXIgY2FwYWNpdHkgcHJvZHVjZWQgb2Ygc3RlZWwgd2l0aCB0ZW5zaWxlIHN0cmVuZ3RoLCBSIG0sIGdyZWF0ZXIgdGhhbiAxIDEwMCBNUGEuIEl0IGNhbiBhbHNvIGJlIGFwcGxpZWQgdG8gY3lsaW5kZXJzIHByb2R1Y2VkIGZyb20gc3RlZWxzIHVzZWQgYXQgbG93ZXIgdGVuc2lsZSBzdHJlbmd0aHMuIEluIHBhcnRpY3VsYXIsIGl0IHByb3ZpZGVzIHRoZSB0ZWNobmljYWwgcmF0aW9uYWxlIGFuZCBiYWNrZ3JvdW5kIHRvIGd1aWRlIGZ1dHVyZSBhbHRlcmF0aW9ucyBvZiBleGlzdGluZyA8ZW0+SVNPPC9lbT4gc3RhbmRhcmRzIG9yIGZvciBkZXZlbG9waW5nIGFkdmFuY2VkIGRlc2lnbiBzdGFuZGFyZHMuIFRoaXMgcGFydCBvZiA8ZW0+SVNPPC9lbT4vVFIgPGVtPjEyMzwvZW0+OTEgaXMgYSBzdW1tYXJ5IGFuZCBjb21waWxhdGlvbiBvZiB0aGUgdGVzdCByZXN1bHRzIG9idGFpbmVkIGR1cmluZyB0aGUgZGV2ZWxvcG1lbnQgb2YgdGhlIFwiZmxhd2VkLWN5bGluZGVyIGN5Y2xlIHRlc3RcIi4gVGhlIFwiZmxhd2VkLWN5bGluZGVyIGN5Y2xlIHRlc3RcIiB3YXMgZGV2ZWxvcGVkIGFzIHBhcnQgb2YgYSBjby1vcGVyYXRpdmUgcHJvamVjdCB1bmRlciB0aGUgZGlyZWN0aW9uIG9mIDxlbT5JU088L2VtPi9UQyA1OC9TQyAzL1dHIDE0LiBUaGUgXCJmbGF3ZWQtY3lsaW5kZXIgY3ljbGUgdGVzdFwiIGlzIGEgdGVzdCBtZXRob2QgdG8gZXZhbHVhdGUgdGhlIGZhdGlndWUgcGVyZm9ybWFuY2Ugb2Ygc3RlZWwgY3lsaW5kZXJzIHRoYXQgYXJlIHVzZWQgdG8gdHJhbnNwb3J0IGhpZ2ggcHJlc3N1cmUsIGNvbXByZXNzZWQgZ2FzZXMuIFRoZSBjb25jZXB0IGFuZCBkZXZlbG9wbWVudCBvZiB0aGUgZmxhd2VkLWN5bGluZGVyIGN5Y2xlIHRlc3QgaXMgZGVzY3JpYmVkIGluIDxlbT5JU088L2VtPi9UUiA8ZW0+MTIzPC9lbT45MS0xLiBUaGUgZGV0YWlscyBvZiB0aGUgdGVzdCBtZXRob2QgYW5kIHRoZSBjcml0ZXJpYSBmb3IgYWNjZXB0YWJsZSBmYXRpZ3VlIHBlcmZvcm1hbmNlIG9mIHN0ZWVsIGN5bGluZGVycyBhcmUgZ2l2ZW4gaW4gOS4yLjYgb2YgPGVtPklTTzwvZW0+IDk4MDktMjoyMDAwLCBcImZsYXdlZC1jeWxpbmRlciBjeWNsZSB0ZXN0XCIuIEluIHRoaXMgcGFydCBvZiA8ZW0+SVNPPC9lbT4vVFIgPGVtPjEyMzwvZW0+OTEsIHRlc3QgcmVzdWx0cyBhcmUgcmVwb3J0ZWQgZm9yIG1vcmUgdGhhbiBhIGh1bmRyZWQgZmxhd2VkLWN5bGluZGVyIGN5Y2xlIHRlc3RzIHRoYXQgd2VyZSBjb25kdWN0ZWQgb24gc2VhbWxlc3Mgc3RlZWwgY3lsaW5kZXJzIHJhbmdpbmcgaW4gbWVhc3VyZWQgdGVuc2lsZSBzdHJlbmd0aCBmcm9tIGxlc3MgdGhhbiA4MDAgTVBhIHRvIGdyZWF0ZXIgdGhhbiAxIDM1MCBNUGEuIFRoZSB0ZXN0IG1ldGhvZCBpcyBpbnRlbmRlZCB0byBiZSB1c2VkIGZvciB0aGUgc2VsZWN0aW9uIG9mIG1hdGVyaWFscyBhbmQgZGVzaWduIHBhcmFtZXRlcnMgaW4gdGhlIGRldmVsb3BtZW50IG9mIG5ldyBjeWxpbmRlciBkZXNpZ25zLiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMy83NC8zNzQzNyIsInV1aWQiOiI5Y2MyODUzNC03NjZkLTQ2ZjYtODQ2NS03YWI3YmEwYjE5YzYiLCJ0aXRsZSI6IklTTy9UUiAxMjM5MS0zOjIwMDIgR2FzIGN5bGluZGVycyDigJQgUmVmaWxsYWJsZSBzZWFtbGVzcyBzdGVlbCDigJQgUGVyZm9ybWFuY2UgdGVzdHMg4oCUIFBhcnQgMzogRnJhY3R1cmUgcGVyZm9ybWFuY2UgdGVzdHMg4oCUIEN5Y2xpY2FsIGJ1cnN0IHRlc3RzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAxNywib3JkZXIiOjExLCJ0ZXh0IjoiSVNPL1RSIDEyMzkxLTMgYXBwbGllcyB0byBzZWFtbGVzcyByZWZpbGxhYmxlIGN5bGluZGVycyBvZiBhbGwgc2l6ZXMgZnJvbSAwLDUgbCB1cCB0byBhbmQgaW5jbHVkaW5nIDE1MCBsIHdhdGVyIGNhcGFjaXR5IHByb2R1Y2VkIG9mIHN0ZWVsIHdpdGggdGVuc2lsZSBzdHJlbmd0aCBncmVhdGVyIHRoYW4gMSAxMDAgTVBhLiBJdCBjYW4gYWxzbyBiZSBhcHBsaWVkIHRvIGN5bGluZGVycyBwcm9kdWNlZCBmcm9tIHN0ZWVscyB1c2VkIGF0IGxvd2VyIHRlbnNpbGUgc3RyZW5ndGhzLiBJbiBwYXJ0aWN1bGFyLCBpdCBwcm92aWRlcyB0aGUgdGVjaG5pY2FsIHJhdGlvbmFsZSBhbmQgYmFja2dyb3VuZCB0byBndWlkZSBmdXR1cmUgYWx0ZXJhdGlvbnMgb2YgZXhpc3RpbmcgSVNPIHN0YW5kYXJkcyBvciBmb3IgZGV2ZWxvcGluZyBhZHZhbmNlZCBkZXNpZ24gc3RhbmRhcmRzLiBJU08vVFIgMTIzOTEtMyBpcyBhIHN1bW1hcnkgYW5kIGNvbXBpbGF0aW9uIG9mIHRoZSB0ZXN0IHJlc3VsdHMgb2J0YWluZWQgZHVyaW5nIHRoZSBkZXZlbG9wbWVudCBvZiB0aGUgRmxhd2VkLWN5bGluZGVyIEN5Y2xpY2FsLWJ1cnN0IFRlc3QuIFRoZSB0ZXN0IGlzIGFuIGFsdGVybmF0ZSB0ZXN0IG1ldGhvZCB0byB0aGUgZmxhd2VkLWN5bGluZGVyIGJ1cnN0IHRlc3Qgd2l0aCBtb25vdG9uaWMgcHJlc3N1cml6YXRpb24gYW5kIGlzIHVzZWQgdG8gZXZhbHVhdGUgdGhlIGZyYWN0dXJlIHBlcmZvcm1hbmNlIG9mIHN0ZWVsIGN5bGluZGVycyB3aGljaCBhcmUgdXNlZCB0byB0cmFuc3BvcnQgaGlnaC1wcmVzc3VyZSBjb21wcmVzc2VkIGdhc2VzLiBJbiBJU08vVFIgMTIzOTEtMyB0ZXN0IHJlc3VsdHMgYXJlIHJlcG9ydGVkIGZvciBtb3JlIHRoYW4gb25lIGh1bmRyZWQgZmxhd2VkLWN5bGluZGVyIGN5Y2xpY2FsIGJ1cnN0IHRlc3RzIHRoYXQgd2VyZSBjb25kdWN0ZWQgb24gc2VhbWxlc3Mgc3RlZWwgY3lsaW5kZXJzIHRoYXQgcmFuZ2VkIGluIHRlbnNpbGUgc3RyZW5ndGggZnJvbSA3NTAgTVBhIHRvIDEgMjEwIE1QYS4gVGhlIHRlc3QgbWV0aG9kIGlzIGludGVuZGVkIHRvIGJlIHVzZWQgYm90aCBmb3IgdGhlIHNlbGVjdGlvbiBvZiBtYXRlcmlhbHMgYW5kIHRvIGVzdGFibGlzaCBkZXNpZ24gcGFyYW1ldGVycyBpbiB0aGUgZGV2ZWxvcG1lbnQgb2YgbmV3IGN5bGluZGVycyBhcyB3ZWxsIGFzIGZvciBhbiBlZmZpY2llbnQgcXVhbGl0eSBjb250cm9sIHRlc3QgdG8gYmUgdXNlZCBkdXJpbmcgdGhlIHByb2R1Y3Rpb24gb2YgY3lsaW5kZXJzLiAiLCJvYmplY3RJRCI6IjM3NDM3XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+L1RSIDxlbT4xMjM8L2VtPjkxLTM6MjAwMiBHYXMgY3lsaW5kZXJzIOKAlCBSZWZpbGxhYmxlIHNlYW1sZXNzIHN0ZWVsIOKAlCBQZXJmb3JtYW5jZSB0ZXN0cyDigJQgUGFydCAzOiBGcmFjdHVyZSBwZXJmb3JtYW5jZSB0ZXN0cyDigJQgQ3ljbGljYWwgYnVyc3QgdGVzdHMiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiPGVtPklTTzwvZW0+L1RSIDxlbT4xMjM8L2VtPjkxLTMgYXBwbGllcyB0byBzZWFtbGVzcyByZWZpbGxhYmxlIGN5bGluZGVycyBvZiBhbGwgc2l6ZXMgZnJvbSAwLDUgbCB1cCB0byBhbmQgaW5jbHVkaW5nIDE1MCBsIHdhdGVyIGNhcGFjaXR5IHByb2R1Y2VkIG9mIHN0ZWVsIHdpdGggdGVuc2lsZSBzdHJlbmd0aCBncmVhdGVyIHRoYW4gMSAxMDAgTVBhLiBJdCBjYW4gYWxzbyBiZSBhcHBsaWVkIHRvIGN5bGluZGVycyBwcm9kdWNlZCBmcm9tIHN0ZWVscyB1c2VkIGF0IGxvd2VyIHRlbnNpbGUgc3RyZW5ndGhzLiBJbiBwYXJ0aWN1bGFyLCBpdCBwcm92aWRlcyB0aGUgdGVjaG5pY2FsIHJhdGlvbmFsZSBhbmQgYmFja2dyb3VuZCB0byBndWlkZSBmdXR1cmUgYWx0ZXJhdGlvbnMgb2YgZXhpc3RpbmcgPGVtPklTTzwvZW0+IHN0YW5kYXJkcyBvciBmb3IgZGV2ZWxvcGluZyBhZHZhbmNlZCBkZXNpZ24gc3RhbmRhcmRzLiA8ZW0+SVNPPC9lbT4vVFIgPGVtPjEyMzwvZW0+OTEtMyBpcyBhIHN1bW1hcnkgYW5kIGNvbXBpbGF0aW9uIG9mIHRoZSB0ZXN0IHJlc3VsdHMgb2J0YWluZWQgZHVyaW5nIHRoZSBkZXZlbG9wbWVudCBvZiB0aGUgRmxhd2VkLWN5bGluZGVyIEN5Y2xpY2FsLWJ1cnN0IFRlc3QuIFRoZSB0ZXN0IGlzIGFuIGFsdGVybmF0ZSB0ZXN0IG1ldGhvZCB0byB0aGUgZmxhd2VkLWN5bGluZGVyIGJ1cnN0IHRlc3Qgd2l0aCBtb25vdG9uaWMgcHJlc3N1cml6YXRpb24gYW5kIGlzIHVzZWQgdG8gZXZhbHVhdGUgdGhlIGZyYWN0dXJlIHBlcmZvcm1hbmNlIG9mIHN0ZWVsIGN5bGluZGVycyB3aGljaCBhcmUgdXNlZCB0byB0cmFuc3BvcnQgaGlnaC1wcmVzc3VyZSBjb21wcmVzc2VkIGdhc2VzLiBJbiA8ZW0+SVNPPC9lbT4vVFIgPGVtPjEyMzwvZW0+OTEtMyB0ZXN0IHJlc3VsdHMgYXJlIHJlcG9ydGVkIGZvciBtb3JlIHRoYW4gb25lIGh1bmRyZWQgZmxhd2VkLWN5bGluZGVyIGN5Y2xpY2FsIGJ1cnN0IHRlc3RzIHRoYXQgd2VyZSBjb25kdWN0ZWQgb24gc2VhbWxlc3Mgc3RlZWwgY3lsaW5kZXJzIHRoYXQgcmFuZ2VkIGluIHRlbnNpbGUgc3RyZW5ndGggZnJvbSA3NTAgTVBhIHRvIDEgMjEwIE1QYS4gVGhlIHRlc3QgbWV0aG9kIGlzIGludGVuZGVkIHRvIGJlIHVzZWQgYm90aCBmb3IgdGhlIHNlbGVjdGlvbiBvZiBtYXRlcmlhbHMgYW5kIHRvIGVzdGFibGlzaCBkZXNpZ24gcGFyYW1ldGVycyBpbiB0aGUgZGV2ZWxvcG1lbnQgb2YgbmV3IGN5bGluZGVycyBhcyB3ZWxsIGFzIGZvciBhbiBlZmZpY2llbnQgcXVhbGl0eSBjb250cm9sIHRlc3QgdG8gYmUgdXNlZCBkdXJpbmcgdGhlIHByb2R1Y3Rpb24gb2YgY3lsaW5kZXJzLiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMy83NC8zNzQzNiIsInV1aWQiOiI3NTRkMmQ0OC1mMDU2LTQyZTEtOTg1Yy1mM2ZkODg5MGU2M2MiLCJ0aXRsZSI6IklTTy9UUiAxMjM5MS0yOjIwMDIgR2FzIGN5bGluZGVycyDigJQgUmVmaWxsYWJsZSBzZWFtbGVzcyBzdGVlbCDigJQgUGVyZm9ybWFuY2UgdGVzdHMg4oCUIFBhcnQgMjogRnJhY3R1cmUgcGVyZm9ybWFuY2UgdGVzdHMg4oCUIE1vbm90b25pYyBidXJzdCB0ZXN0cyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMTcsIm9yZGVyIjoxMSwidGV4dCI6IlRoaXMgcGFydCBvZiBJU08vVFIgMTIzOTEgaXMgYSBzdW1tYXJ5IGFuZCBjb21waWxhdGlvbiBvZiB0aGUgdGVzdCByZXN1bHRzIG9idGFpbmVkIGR1cmluZyB0aGUgZGV2ZWxvcG1lbnQgb2YgdGhlIFwiRmxhd2VkLUN5bGluZGVyIEJ1cnN0IFRlc3RcIi4gVGhlIGNvbmNlcHQgYW5kIGRldmVsb3BtZW50IG9mIHRoZSBmbGF3ZWQgY3lsaW5kZXIgYnVyc3QgdGVzdCBpcyBkZXNjcmliZWQgaW4gSVNPL1RSIDEyMzkxLTEuIFRoZSB0ZXN0IGlzIGEgbWV0aG9kIGZvciBldmFsdWF0aW5nIHRoZSBmcmFjdHVyZSBwZXJmb3JtYW5jZSBvZiBzdGVlbCBjeWxpbmRlcnMgdGhhdCBhcmUgdXNlZCB0byB0cmFuc3BvcnQgaGlnaCBwcmVzc3VyZSwgY29tcHJlc3NlZCBnYXNlcy4gSW4gdGhpcyBwYXJ0IG9mIElTTy9UUiAxMjM5MSwgdGVzdCByZXN1bHRzIGFyZSByZXBvcnRlZCBmb3Igc2V2ZXJhbCBodW5kcmVkIGZsYXdlZCBjeWxpbmRlciBidXJzdCB0ZXN0cyB0aGF0IHdlcmUgY29uZHVjdGVkIG9uIHNlYW1sZXNzIHN0ZWVsIGN5bGluZGVycyByYW5naW5nIGluIHRlbnNpbGUgc3RyZW5ndGggZnJvbSBsZXNzIHRoYW4gNzUwIE1QYSB1cCB0byBhYm91dCAxIDQwMCBNUGEuIFRoaXMgdGVzdCBtZXRob2QgaGFzIGJlZW4gc2hvd24gdG8gcmVsaWFibHkgcHJlZGljdCB0aGUgZnJhY3R1cmUgcGVyZm9ybWFuY2Ugb2Ygc2VhbWxlc3Mgc3RlZWwgY3lsaW5kZXJzLiBUaGUgdGVzdCBtZXRob2QgaXMgaW50ZW5kZWQgdG8gYmUgdXNlZCBib3RoIGZvciB0aGUgc2VsZWN0aW9uIG9mIG1hdGVyaWFscyBhbmQgZGVzaWduIHBhcmFtZXRlcnMgaW4gdGhlIGRldmVsb3BtZW50IG9mIG5ldyBjeWxpbmRlciBkZXNpZ25zIGFzIHdlbGwgYXMgZm9yIGFuIGVmZmljaWVudCBxdWFsaXR5IGNvbnRyb2wgdGVzdCB0byBiZSB1c2VkIGR1cmluZyB0aGUgcHJvZHVjdGlvbiBvZiBjeWxpbmRlcnMuICIsIm9iamVjdElEIjoiMzc0MzZfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4vVFIgPGVtPjEyMzwvZW0+OTEtMjoyMDAyIEdhcyBjeWxpbmRlcnMg4oCUIFJlZmlsbGFibGUgc2VhbWxlc3Mgc3RlZWwg4oCUIFBlcmZvcm1hbmNlIHRlc3RzIOKAlCBQYXJ0IDI6IEZyYWN0dXJlIHBlcmZvcm1hbmNlIHRlc3RzIOKAlCBNb25vdG9uaWMgYnVyc3QgdGVzdHMiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBwYXJ0IG9mIDxlbT5JU088L2VtPi9UUiA8ZW0+MTIzPC9lbT45MSBpcyBhIHN1bW1hcnkgYW5kIGNvbXBpbGF0aW9uIG9mIHRoZSB0ZXN0IHJlc3VsdHMgb2J0YWluZWQgZHVyaW5nIHRoZSBkZXZlbG9wbWVudCBvZiB0aGUgXCJGbGF3ZWQtQ3lsaW5kZXIgQnVyc3QgVGVzdFwiLiBUaGUgY29uY2VwdCBhbmQgZGV2ZWxvcG1lbnQgb2YgdGhlIGZsYXdlZCBjeWxpbmRlciBidXJzdCB0ZXN0IGlzIGRlc2NyaWJlZCBpbiA8ZW0+SVNPPC9lbT4vVFIgPGVtPjEyMzwvZW0+OTEtMS4gVGhlIHRlc3QgaXMgYSBtZXRob2QgZm9yIGV2YWx1YXRpbmcgdGhlIGZyYWN0dXJlIHBlcmZvcm1hbmNlIG9mIHN0ZWVsIGN5bGluZGVycyB0aGF0IGFyZSB1c2VkIHRvIHRyYW5zcG9ydCBoaWdoIHByZXNzdXJlLCBjb21wcmVzc2VkIGdhc2VzLiBJbiB0aGlzIHBhcnQgb2YgPGVtPklTTzwvZW0+L1RSIDxlbT4xMjM8L2VtPjkxLCB0ZXN0IHJlc3VsdHMgYXJlIHJlcG9ydGVkIGZvciBzZXZlcmFsIGh1bmRyZWQgZmxhd2VkIGN5bGluZGVyIGJ1cnN0IHRlc3RzIHRoYXQgd2VyZSBjb25kdWN0ZWQgb24gc2VhbWxlc3Mgc3RlZWwgY3lsaW5kZXJzIHJhbmdpbmcgaW4gdGVuc2lsZSBzdHJlbmd0aCBmcm9tIGxlc3MgdGhhbiA3NTAgTVBhIHVwIHRvIGFib3V0IDEgNDAwIE1QYS4gVGhpcyB0ZXN0IG1ldGhvZCBoYXMgYmVlbiBzaG93biB0byByZWxpYWJseSBwcmVkaWN0IHRoZSBmcmFjdHVyZSBwZXJmb3JtYW5jZSBvZiBzZWFtbGVzcyBzdGVlbCBjeWxpbmRlcnMuIFRoZSB0ZXN0IG1ldGhvZCBpcyBpbnRlbmRlZCB0byBiZSB1c2VkIGJvdGggZm9yIHRoZSBzZWxlY3Rpb24gb2YgbWF0ZXJpYWxzIGFuZCBkZXNpZ24gcGFyYW1ldGVycyBpbiB0aGUgZGV2ZWxvcG1lbnQgb2YgbmV3IGN5bGluZGVyIGRlc2lnbnMgYXMgd2VsbCBhcyBmb3IgYW4gZWZmaWNpZW50IHF1YWxpdHkgY29udHJvbCB0ZXN0IHRvIGJlIHVzZWQgZHVyaW5nIHRoZSBwcm9kdWN0aW9uIG9mIGN5bGluZGVycy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDMvMzUvMzM1MTgiLCJ1dWlkIjoiM2MzNDdkNTAtNjBiMi00MDM5LThjYzYtMmJjODk4MmFkZjQzIiwidGl0bGUiOiJJU08vVFIgMTIzOTEtMToyMDAxIEdhcyBjeWxpbmRlcnMg4oCUIFJlZmlsbGFibGUgc2VhbWxlc3Mgc3RlZWwg4oCUIFBlcmZvcm1hbmNlIHRlc3RzIOKAlCBQYXJ0IDE6IFBoaWxvc29waHksIGJhY2tncm91bmQgYW5kIGNvbmNsdXNpb25zIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAxNywib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBwYXJ0IG9mIElTTy9UUiAxMjkzMSBhcHBsaWVzIHRvIHNlYW1sZXNzIHN0ZWVsIHJlZmlsbGFibGUgY3lsaW5kZXJzIG9mIGFsbCBzaXplcyBmcm9tIDAsNSBsIHVwIHRvIGFuZCBpbmNsdWRpbmcgMTUwIGwgd2F0ZXIgY2FwYWNpdHkgcHJvZHVjZWQgb2Ygc3RlZWwgd2l0aCB0ZW5zaWxlIHN0cmVuZ3RoICggUiBtKSBncmVhdGVyIHRoYW4gMSAxMDAgTVBhLiBJdCBjYW4gYWxzbyBiZSBhcHBsaWVkIHRvIGN5bGluZGVycyBwcm9kdWNlZCBvZiBzdGVlbHMgdXNlZCBhdCBsb3dlciB0ZW5zaWxlIHN0cmVuZ3Rocy4gSW4gcGFydGljdWxhciwgaXQgcHJvdmlkZXMgdGhlIHRlY2huaWNhbCByYXRpb25hbGUgYW5kIGJhY2tncm91bmQgdG8gZ3VpZGUgZnV0dXJlIGFsdGVyYXRpb25zIG9mIGV4aXN0aW5nIElTTyBzdGFuZGFyZHMgb3IgZm9yIGRldmVsb3BpbmcgYWR2YW5jZWQgZGVzaWduIHN0YW5kYXJkcy4gIiwib2JqZWN0SUQiOiIzMzUxOF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPi9UUiA8ZW0+MTIzPC9lbT45MS0xOjIwMDEgR2FzIGN5bGluZGVycyDigJQgUmVmaWxsYWJsZSBzZWFtbGVzcyBzdGVlbCDigJQgUGVyZm9ybWFuY2UgdGVzdHMg4oCUIFBhcnQgMTogUGhpbG9zb3BoeSwgYmFja2dyb3VuZCBhbmQgY29uY2x1c2lvbnMiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBwYXJ0IG9mIDxlbT5JU088L2VtPi9UUiAxMjkzMSBhcHBsaWVzIHRvIHNlYW1sZXNzIHN0ZWVsIHJlZmlsbGFibGUgY3lsaW5kZXJzIG9mIGFsbCBzaXplcyBmcm9tIDAsNSBsIHVwIHRvIGFuZCBpbmNsdWRpbmcgMTUwIGwgd2F0ZXIgY2FwYWNpdHkgcHJvZHVjZWQgb2Ygc3RlZWwgd2l0aCB0ZW5zaWxlIHN0cmVuZ3RoICggUiBtKSBncmVhdGVyIHRoYW4gMSAxMDAgTVBhLiBJdCBjYW4gYWxzbyBiZSBhcHBsaWVkIHRvIGN5bGluZGVycyBwcm9kdWNlZCBvZiBzdGVlbHMgdXNlZCBhdCBsb3dlciB0ZW5zaWxlIHN0cmVuZ3Rocy4gSW4gcGFydGljdWxhciwgaXQgcHJvdmlkZXMgdGhlIHRlY2huaWNhbCByYXRpb25hbGUgYW5kIGJhY2tncm91bmQgdG8gZ3VpZGUgZnV0dXJlIGFsdGVyYXRpb25zIG9mIGV4aXN0aW5nIDxlbT5JU088L2VtPiBzdGFuZGFyZHMgb3IgZm9yIGRldmVsb3BpbmcgYWR2YW5jZWQgZGVzaWduIHN0YW5kYXJkcy4gIiwibWF0Y2hMZXZlbCI6InBhcnRpYWwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDYvNTAvNjUwODMiLCJ1dWlkIjoiODRiZGYzYmUtNmNmYy00MzNiLTgzZjgtZGJlYTk1OTI4ZmYwIiwidGl0bGUiOiJJU08vVFIgMTIzNDktMjoyMDE1IFJvYWQgdmVoaWNsZXMg4oCUIER1bW1pZXMgZm9yIHJlc3RyYWludCBzeXN0ZW0gdGVzdGluZyDigJQgUGFydCAyOiBDaGlsZCBkdW1taWVzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAxNSwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPL1RSIDEyMzQ5LTI6MjAxNSBzcGVjaWZpZXMgdGhlIGluZmFudCBhbmQgY2hpbGQgY3Jhc2ggdGVzdCBkdW1taWVzIHRoYXQgYXJlIHJlY29tbWVuZGVkIGJ5IElTTyBmb3IgdXNlIGluIGV2YWx1YXRpbmcgY2hpbGQgcmVzdHJhaW50cyBpbiBmcm9udGFsIGltcGFjdHMgYW5kIG91dC1vZi1wb3NpdGlvbiBpbnRlcmFjdGlvbnMgd2l0aCBmcm9udGFsIG9yIHNpZGUgYWlyYmFncy4gIiwib2JqZWN0SUQiOiI2NTA4M18wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPi9UUiA8ZW0+MTIzPC9lbT40OS0yOjIwMTUgUm9hZCB2ZWhpY2xlcyDigJQgRHVtbWllcyBmb3IgcmVzdHJhaW50IHN5c3RlbSB0ZXN0aW5nIOKAlCBQYXJ0IDI6IENoaWxkIGR1bW1pZXMiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiPGVtPklTTzwvZW0+L1RSIDxlbT4xMjM8L2VtPjQ5LTI6MjAxNSBzcGVjaWZpZXMgdGhlIGluZmFudCBhbmQgY2hpbGQgY3Jhc2ggdGVzdCBkdW1taWVzIHRoYXQgYXJlIHJlY29tbWVuZGVkIGJ5IDxlbT5JU088L2VtPiBmb3IgdXNlIGluIGV2YWx1YXRpbmcgY2hpbGQgcmVzdHJhaW50cyBpbiBmcm9udGFsIGltcGFjdHMgYW5kIG91dC1vZi1wb3NpdGlvbiBpbnRlcmFjdGlvbnMgd2l0aCBmcm9udGFsIG9yIHNpZGUgYWlyYmFncy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDYvNTAvNjUwODIiLCJ1dWlkIjoiMmUyZGY3MWEtZTZiNy00N2ExLTk0NjYtMTM1ODRkZmY5ZmU1IiwidGl0bGUiOiJJU08vVFIgMTIzNDktMToyMDE1IFJvYWQgdmVoaWNsZXMg4oCUIER1bW1pZXMgZm9yIHJlc3RyYWludCBzeXN0ZW0gdGVzdGluZyDigJQgUGFydCAxOiBBZHVsdCBkdW1taWVzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAxNSwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPL1RSIDEyMzQ5LTE6MjAxNSBzcGVjaWZpZXMgdGhlIGFkdWx0IGNyYXNoIHRlc3QgZHVtbWllcyB0aGF0IGFyZSByZWNvbW1lbmRlZCBieSBJU08gZm9yIHVzZSBpbiBldmFsdWF0aW5nIHRoZSBvY2N1cGFudCBwcm90ZWN0aW9uIHBvdGVudGlhbCBvZiByZXN0cmFpbnQgc3lzdGVtcyBpbiBmcm9udGFsLCBzaWRlLCBhbmQgcmVhciBpbXBhY3QgdGVzdCBwcm9jZWR1cmVzIGFuZCBvdXQtb2YtcG9zaXRpb24gYWlyYmFnIHRlc3QgcHJvY2VkdXJlcy4gIiwib2JqZWN0SUQiOiI2NTA4Ml8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPi9UUiA8ZW0+MTIzPC9lbT40OS0xOjIwMTUgUm9hZCB2ZWhpY2xlcyDigJQgRHVtbWllcyBmb3IgcmVzdHJhaW50IHN5c3RlbSB0ZXN0aW5nIOKAlCBQYXJ0IDE6IEFkdWx0IGR1bW1pZXMiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiPGVtPklTTzwvZW0+L1RSIDxlbT4xMjM8L2VtPjQ5LTE6MjAxNSBzcGVjaWZpZXMgdGhlIGFkdWx0IGNyYXNoIHRlc3QgZHVtbWllcyB0aGF0IGFyZSByZWNvbW1lbmRlZCBieSA8ZW0+SVNPPC9lbT4gZm9yIHVzZSBpbiBldmFsdWF0aW5nIHRoZSBvY2N1cGFudCBwcm90ZWN0aW9uIHBvdGVudGlhbCBvZiByZXN0cmFpbnQgc3lzdGVtcyBpbiBmcm9udGFsLCBzaWRlLCBhbmQgcmVhciBpbXBhY3QgdGVzdCBwcm9jZWR1cmVzIGFuZCBvdXQtb2YtcG9zaXRpb24gYWlyYmFnIHRlc3QgcHJvY2VkdXJlcy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDUvMTMvNTEzNDYiLCJ1dWlkIjoiNjI4MjY5ODQtOTI3Ni00NGYwLTlhN2EtN2Y3MzRiYzE0YjkyIiwidGl0bGUiOiJJU08vVFIgMTIzMTA6MjAxNSBIZWFsdGggaW5mb3JtYXRpY3Mg4oCUIFByaW5jaXBsZXMgYW5kIGd1aWRlbGluZXMgZm9yIHRoZSBtZWFzdXJlbWVudCBvZiBjb25mb3JtYW5jZSBpbiB0aGUgaW1wbGVtZW50YXRpb24gb2YgdGVybWlub2xvZ2ljYWwgc3lzdGVtcyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMTUsIm9yZGVyIjoxMSwidGV4dCI6IklTTy9UUiAxMjMxMDoyMDE1IGlzIHRvIGRlZmluZSBhIGZyYW1ld29yayBvZiBnb29kIHByYWN0aWNlcyBmb3IgdGVybWlub2xvZ3kgc3lzdGVtIG1haW50ZW5hbmNlIGFuZCB0aGUgcHJpbmNpcGxlcyBmb3Igd2hpY2ggY29uZm9ybWFuY2UgY2FuIGJlIGRlbW9uc3RyYXRlZC4gVGhlIHByaW1hcnkgZm9jdXMgaXMgdGhlIGFwcGxpY2F0aW9uIG9mIHRlcm1pbm9sb2d5IHN5c3RlbSB0byBFbGVjdHJvbmljIEhlYWx0aCBSZWNvcmQgKEVIUikgc3lzdGVtcywgYWx0aG91Z2ggdGhlIHByaW5jaXBsZXMgYW5kIGd1aWRlbGluZXMgY2FuIGJlIGFwcGxpZWQgYnJvYWRseSBpbiBoZWFsdGggaW5mb3JtYXRpY3MgVGhlIHNjb3BlIG9mIElTTy9UUiAxMjMxMDoyMDE1IHdpbGwgaW5jbHVkZSwgYXQgYSBtaW5pbXVtLCB0aGUgZm9sbG93aW5nIGNvbnNpZGVyYXRpb25zIGZvciBrZWVwaW5nIHRlcm1pbm9sb2d5IHN5c3RlbXMgYW5kIGFzc29jaWF0ZWQgcmVmZXJlbmNlIG1hdGVyaWFsIGNsaW5pY2FsbHkgYW5kL29yIHRlY2huaWNhbGx5IHJlbGV2YW50IGFuZCB2YWxpZDogPyAgIGdvdmVybmFuY2UgbW9kZWxzIGFuZCBwcmFjdGljZXM7ID8gICBoaWdoIGxldmVsIHByb2Nlc3NlczsgPyAgIHJlcXVpcmVtZW50cyBmb3IgbWFuYWdpbmcgdGhlIGNoYW5nZS4gIiwib2JqZWN0SUQiOiI1MTM0Nl8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPi9UUiA8ZW0+MTIzPC9lbT4xMDoyMDE1IEhlYWx0aCBpbmZvcm1hdGljcyDigJQgUHJpbmNpcGxlcyBhbmQgZ3VpZGVsaW5lcyBmb3IgdGhlIG1lYXN1cmVtZW50IG9mIGNvbmZvcm1hbmNlIGluIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiB0ZXJtaW5vbG9naWNhbCBzeXN0ZW1zIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPi9UUiA8ZW0+MTIzPC9lbT4xMDoyMDE1IGlzIHRvIGRlZmluZSBhIGZyYW1ld29yayBvZiBnb29kIHByYWN0aWNlcyBmb3IgdGVybWlub2xvZ3kgc3lzdGVtIG1haW50ZW5hbmNlIGFuZCB0aGUgcHJpbmNpcGxlcyBmb3Igd2hpY2ggY29uZm9ybWFuY2UgY2FuIGJlIGRlbW9uc3RyYXRlZC4gVGhlIHByaW1hcnkgZm9jdXMgaXMgdGhlIGFwcGxpY2F0aW9uIG9mIHRlcm1pbm9sb2d5IHN5c3RlbSB0byBFbGVjdHJvbmljIEhlYWx0aCBSZWNvcmQgKEVIUikgc3lzdGVtcywgYWx0aG91Z2ggdGhlIHByaW5jaXBsZXMgYW5kIGd1aWRlbGluZXMgY2FuIGJlIGFwcGxpZWQgYnJvYWRseSBpbiBoZWFsdGggaW5mb3JtYXRpY3MgVGhlIHNjb3BlIG9mIDxlbT5JU088L2VtPi9UUiA8ZW0+MTIzPC9lbT4xMDoyMDE1IHdpbGwgaW5jbHVkZSwgYXQgYSBtaW5pbXVtLCB0aGUgZm9sbG93aW5nIGNvbnNpZGVyYXRpb25zIGZvciBrZWVwaW5nIHRlcm1pbm9sb2d5IHN5c3RlbXMgYW5kIGFzc29jaWF0ZWQgcmVmZXJlbmNlIG1hdGVyaWFsIGNsaW5pY2FsbHkgYW5kL29yIHRlY2huaWNhbGx5IHJlbGV2YW50IGFuZCB2YWxpZDogPyAgIGdvdmVybmFuY2UgbW9kZWxzIGFuZCBwcmFjdGljZXM7ID8gICBoaWdoIGxldmVsIHByb2Nlc3NlczsgPyAgIHJlcXVpcmVtZW50cyBmb3IgbWFuYWdpbmcgdGhlIGNoYW5nZS4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDUvMTMvNTEzNDQiLCJ1dWlkIjoiMjZiNjZmYjEtMWMwYi00NjBkLTk3MTgtYjk0MzkzZjYyMWJmIiwidGl0bGUiOiJJU08vVFIgMTIzMDA6MjAxNCBIZWFsdGggaW5mb3JtYXRpY3Mg4oCUIFByaW5jaXBsZXMgb2YgbWFwcGluZyBiZXR3ZWVuIHRlcm1pbm9sb2dpY2FsIHN5c3RlbXMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDE0LCJvcmRlciI6MTEsInRleHQiOiJJU08vVFIgMTIzMDA6MjAxNCBwcm92aWRlcyBndWlkYW5jZSBmb3Igb3JnYW5pemF0aW9ucyBjaGFyZ2VkIHdpdGggY3JlYXRpbmcgb3IgYXBwbHlpbmcgbWFwcyB0byBtZWV0IHRoZWlyIGJ1c2luZXNzIG5lZWRzLiBJdCBleHBsYWlucyB0aGUgcmlza3MgaW5oZXJlbnQgaW4gdGhlIG1hcHBpbmcgcHJvY2VzcyBhbmQgZGlzY3Vzc2VzIHRoZSBpc3N1ZXMgdGhhdCBuZWVkIHRvIGJlIGNvbnNpZGVyZWQgaW4gdGhlIGRldmVsb3BtZW50LCBtYWludGVuYW5jZSwgYW5kIHVzZSBvZiBtYXBzIGluIGhlYWx0aCBjYXJlLiBUaGlzIFRlY2huaWNhbCBSZXBvcnQgYWxzbyBpZGVudGlmaWVzIHZhcmlhdGlvbnMgaW4gcHJvY2VzcywgcHJlY2lzaW9uLCBhbmQgYWRtaW5pc3RyYXRpb24gd2hlbiBtYXBwaW5nIGZvciBkaWZmZXJlbnQgcHVycG9zZXMgYW5kIGluIGRpZmZlcmVudCBlbnZpcm9ubWVudHMuIEltcG9ydGFudGx5LCB0aGlzIFRlY2huaWNhbCBSZXBvcnQgZXN0YWJsaXNoZXMgYW5kIGhhcm1vbml6ZXMgdGhlIGJhc2ljIHByaW5jaXBsZXMgZm9yIGRldmVsb3BpbmcsIG1haW50YWluaW5nLCBhbmQgdXNpbmcgbWFwcyBhbmQgZ2l2ZXMgZ3VpZGVsaW5lcyBmb3IgZ29vZCBwcmFjdGljZSB0aGF0IHVuZGVycGluIHRoZSBtYXBwaW5nIHByb2Nlc3MuIFRlcm1pbm9sb2dpY2FsIHJlc291cmNlcyBpbmNsdWRlcyB0ZXJtaW5vbG9naWVzLCBjbGFzc2lmaWNhdGlvbnMsIGFuZCBjb2RlIHN5c3RlbXMgdXNlZCBpbiB0aGUgcmVndWxhdG9yeSBlbnZpcm9ubWVudCBhcyBpdCByZWxhdGVzIHRvIGhlYWx0aGNhcmUgYW5kIHJlcG9ydGluZyByZXF1aXJlbWVudHMgaW4gaGVhbHRoY2FyZS4gVGhpcyBUZWNobmljYWwgUmVwb3J0IGlzIGdlbmVyYWwgaW4gbmF0dXJlIGFuZCBkb2VzIG5vdCBkZXNjcmliZSB0aGUgc3BlY2lmaWMgbWV0aG9kcyBhcHBsaWVkIGluIHRoZSBtYXBwaW5nIHByb2Nlc3Mgbm9yIGRvZXMgaXQgZGVzY3JpYmUgbWFwcyBiZXR3ZWVuIGRhdGFiYXNlcyBhbmQgZGF0YSBzZXRzLCBldmVuIHRob3VnaCBtYW55IG9mIHRoZSBwcmluY2lwbGVzIHN0YXRlZCBoZXJlIHdpbGwgYXBwbHkgdG8gdGhvc2UgdHlwZXMgb2YgbWFwcy4gVGhpcyBUZWNobmljYWwgUmVwb3J0IGRvZXMgbm90IGluY2x1ZGUgY29uc2lkZXJhdGlvbiBvZiB0aGUgaW50ZWxsZWN0dWFsIHByb3BlcnR5IHJpZ2h0cyBhbmQgZXhwZWN0YXRpb25zIG9mIHRoZSBvd25lcnMgb2YgdGVybWlub2xvZ2llcyBvciBjbGFzc2lmaWNhdGlvbnMuIEl0IGlzIHRoZSByZXNwb25zaWJpbGl0eSBvZiB0aGUgbWFwcGVyIGFuZCBwcm9jZXNzIHRvIGVuc3VyZSB0aGF0IHRoZXNlIGxlZ2FsIHJpZ2h0cyBhcmUgcHJvdGVjdGVkIGFuZCBhY2tub3dsZWRnZWQgYXMgcGFydCBvZiB0aGUgbWFwcGluZyBwcm9jZXNzZXMuICIsIm9iamVjdElEIjoiNTEzNDRfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4vVFIgPGVtPjEyMzwvZW0+MDA6MjAxNCBIZWFsdGggaW5mb3JtYXRpY3Mg4oCUIFByaW5jaXBsZXMgb2YgbWFwcGluZyBiZXR3ZWVuIHRlcm1pbm9sb2dpY2FsIHN5c3RlbXMiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19LCJ0ZXh0Ijp7InZhbHVlIjoiPGVtPklTTzwvZW0+L1RSIDxlbT4xMjM8L2VtPjAwOjIwMTQgcHJvdmlkZXMgZ3VpZGFuY2UgZm9yIG9yZ2FuaXphdGlvbnMgY2hhcmdlZCB3aXRoIGNyZWF0aW5nIG9yIGFwcGx5aW5nIG1hcHMgdG8gbWVldCB0aGVpciBidXNpbmVzcyBuZWVkcy4gSXQgZXhwbGFpbnMgdGhlIHJpc2tzIGluaGVyZW50IGluIHRoZSBtYXBwaW5nIHByb2Nlc3MgYW5kIGRpc2N1c3NlcyB0aGUgaXNzdWVzIHRoYXQgbmVlZCB0byBiZSBjb25zaWRlcmVkIGluIHRoZSBkZXZlbG9wbWVudCwgbWFpbnRlbmFuY2UsIGFuZCB1c2Ugb2YgbWFwcyBpbiBoZWFsdGggY2FyZS4gVGhpcyBUZWNobmljYWwgUmVwb3J0IGFsc28gaWRlbnRpZmllcyB2YXJpYXRpb25zIGluIHByb2Nlc3MsIHByZWNpc2lvbiwgYW5kIGFkbWluaXN0cmF0aW9uIHdoZW4gbWFwcGluZyBmb3IgZGlmZmVyZW50IHB1cnBvc2VzIGFuZCBpbiBkaWZmZXJlbnQgZW52aXJvbm1lbnRzLiBJbXBvcnRhbnRseSwgdGhpcyBUZWNobmljYWwgUmVwb3J0IGVzdGFibGlzaGVzIGFuZCBoYXJtb25pemVzIHRoZSBiYXNpYyBwcmluY2lwbGVzIGZvciBkZXZlbG9waW5nLCBtYWludGFpbmluZywgYW5kIHVzaW5nIG1hcHMgYW5kIGdpdmVzIGd1aWRlbGluZXMgZm9yIGdvb2QgcHJhY3RpY2UgdGhhdCB1bmRlcnBpbiB0aGUgbWFwcGluZyBwcm9jZXNzLiBUZXJtaW5vbG9naWNhbCByZXNvdXJjZXMgaW5jbHVkZXMgdGVybWlub2xvZ2llcywgY2xhc3NpZmljYXRpb25zLCBhbmQgY29kZSBzeXN0ZW1zIHVzZWQgaW4gdGhlIHJlZ3VsYXRvcnkgZW52aXJvbm1lbnQgYXMgaXQgcmVsYXRlcyB0byBoZWFsdGhjYXJlIGFuZCByZXBvcnRpbmcgcmVxdWlyZW1lbnRzIGluIGhlYWx0aGNhcmUuIFRoaXMgVGVjaG5pY2FsIFJlcG9ydCBpcyBnZW5lcmFsIGluIG5hdHVyZSBhbmQgZG9lcyBub3QgZGVzY3JpYmUgdGhlIHNwZWNpZmljIG1ldGhvZHMgYXBwbGllZCBpbiB0aGUgbWFwcGluZyBwcm9jZXNzIG5vciBkb2VzIGl0IGRlc2NyaWJlIG1hcHMgYmV0d2VlbiBkYXRhYmFzZXMgYW5kIGRhdGEgc2V0cywgZXZlbiB0aG91Z2ggbWFueSBvZiB0aGUgcHJpbmNpcGxlcyBzdGF0ZWQgaGVyZSB3aWxsIGFwcGx5IHRvIHRob3NlIHR5cGVzIG9mIG1hcHMuIFRoaXMgVGVjaG5pY2FsIFJlcG9ydCBkb2VzIG5vdCBpbmNsdWRlIGNvbnNpZGVyYXRpb24gb2YgdGhlIGludGVsbGVjdHVhbCBwcm9wZXJ0eSByaWdodHMgYW5kIGV4cGVjdGF0aW9ucyBvZiB0aGUgb3duZXJzIG9mIHRlcm1pbm9sb2dpZXMgb3IgY2xhc3NpZmljYXRpb25zLiBJdCBpcyB0aGUgcmVzcG9uc2liaWxpdHkgb2YgdGhlIG1hcHBlciBhbmQgcHJvY2VzcyB0byBlbnN1cmUgdGhhdCB0aGVzZSBsZWdhbCByaWdodHMgYXJlIHByb3RlY3RlZCBhbmQgYWNrbm93bGVkZ2VkIGFzIHBhcnQgb2YgdGhlIG1hcHBpbmcgcHJvY2Vzc2VzLiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNS81OC81NTg4OCIsInV1aWQiOiI1MmRkNjdkMC03ZjJhLTQ0N2EtOTY2YS1jZDc4MjgzYzkxYmMiLCJ0aXRsZSI6IklTTy9UUiAxMjM1MDoyMDEzIFJvYWQgdmVoaWNsZXMg4oCUIEluanVyeSByaXNrIGN1cnZlcyBmb3IgdGhlIGV2YWx1YXRpb24gb2Ygb2NjdXBhbnQgcHJvdGVjdGlvbiBpbiBzaWRlIGltcGFjdCB0ZXN0cyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMTMsIm9yZGVyIjoxMSwidGV4dCI6IklTTy9UUiAxMjM1MDoyMDEzIHByb3ZpZGVzIGluanVyeSByaXNrIGN1cnZlcyB0byBhc3Nlc3Mgb2NjdXBhbnQgcHJvdGVjdGlvbiBpbiBzaWRlIGltcGFjdCB0ZXN0cy4gVGhlIGN1cnZlcyBhcmUgZ2l2ZW4gZm9yIHRoZSBXb3JsZFNJRCA1MHRoLCBhIG1pZC1zaXplIGFkdWx0IG1hbGUgc2lkZSBpbXBhY3QgZHVtbXkuIFRoZXNlIGR1bW1pZXMgYXJlIHVzZWQgZHVyaW5nIHRlc3RzIGNhcnJpZWQgb3V0IGFjY29yZGluZyB0byBJU08gMTA5OTcgb3Igd2hpY2ggYXJlIHVuZGVyIGludmVzdGlnYXRpb24gYnkgcmVndWxhdG9yeSBib2RpZXMgYW5kIGNvbnN1bWVyIHRlc3Rpbmcgb3JnYW5pemF0aW9ucy4gIiwib2JqZWN0SUQiOiI1NTg4OF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPi9UUiA8ZW0+MTIzPC9lbT41MDoyMDEzIFJvYWQgdmVoaWNsZXMg4oCUIEluanVyeSByaXNrIGN1cnZlcyBmb3IgdGhlIGV2YWx1YXRpb24gb2Ygb2NjdXBhbnQgcHJvdGVjdGlvbiBpbiBzaWRlIGltcGFjdCB0ZXN0cyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4vVFIgPGVtPjEyMzwvZW0+NTA6MjAxMyBwcm92aWRlcyBpbmp1cnkgcmlzayBjdXJ2ZXMgdG8gYXNzZXNzIG9jY3VwYW50IHByb3RlY3Rpb24gaW4gc2lkZSBpbXBhY3QgdGVzdHMuIFRoZSBjdXJ2ZXMgYXJlIGdpdmVuIGZvciB0aGUgV29ybGRTSUQgNTB0aCwgYSBtaWQtc2l6ZSBhZHVsdCBtYWxlIHNpZGUgaW1wYWN0IGR1bW15LiBUaGVzZSBkdW1taWVzIGFyZSB1c2VkIGR1cmluZyB0ZXN0cyBjYXJyaWVkIG91dCBhY2NvcmRpbmcgdG8gPGVtPklTTzwvZW0+IDEwOTk3IG9yIHdoaWNoIGFyZSB1bmRlciBpbnZlc3RpZ2F0aW9uIGJ5IHJlZ3VsYXRvcnkgYm9kaWVzIGFuZCBjb25zdW1lciB0ZXN0aW5nIG9yZ2FuaXphdGlvbnMuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA1LzEzLzUxMzQ1IiwidXVpZCI6IjdkZmZhMDdhLWQ0NTItNGE1OS04NzJiLWEyNzkxYmU1NGJjYyIsInRpdGxlIjoiSVNPL1RSIDEyMzA5OjIwMDkgSGVhbHRoIGluZm9ybWF0aWNzIOKAlCBHdWlkZWxpbmVzIGZvciB0ZXJtaW5vbG9neSBkZXZlbG9wbWVudCBvcmdhbml6YXRpb25zIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAwOSwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPL1RSIDEyMzA5OjIwMDkgc3BlY2lmaWVzIHByaW5jaXBsZXMgYW5kIHByb2Nlc3NlcyB0aGF0IHNob3VsZCBiZSBleGhpYml0ZWQgYnkgZGV2ZWxvcGVycyBvZiBoZWFsdGhjYXJlIHRlcm1pbm9sb2dpZXMgaW4gc3VwcG9ydCBvZiBpbnRlcm5hdGlvbmFsIGhlYWx0aGNhcmUgdGVybWlub2xvZ3kgc3RhbmRhcmRpemF0aW9uLiBUaGUgcHJpbWFyeSB0YXJnZXQgZ3JvdXAgZm9yIElTTy9UUiAxMjMwOToyMDA5IGlzIHRob3NlIGVzdGFibGlzaGluZyBvciByZXZpZXdpbmcgb3JnYW5pemF0aW9ucyAsIGFuZCB0aG9zZSBldmFsdWF0aW5nIHRoZSBzZXJ2aWNlcyBvciBwcm9kdWN0cyBtYWludGFpbmVkIGJ5IHN1Y2ggb3JnYW5pemF0aW9ucyAsIGluIHRoZSBjb250ZXh0IG9mIGludGVybmF0aW9uYWwgaGVhbHRoY2FyZSB0ZXJtaW5vbG9neSBzdGFuZGFyZGl6YXRpb24uIEl0IGNvbXBsZW1lbnRzIHN0YW5kYXJkcyBzdWNoIGFzIElTTyAxNzExNSBhbmQgSVNPIDE3MTE3ICh3aGljaCBhZGRyZXNzIHRoZSBjb250ZW50IG9mIHRlcm1pbm9sb2dpZXMpIGJ5IHNwZWNpZnlpbmcgZ29vZCBnb3Zlcm5hbmNlIHJlcXVpcmVtZW50cyBmb3IgdGhlIGxpZmVjeWNsZSBvZiB0aG9zZSB0ZXJtaW5vbG9naWVzLiAiLCJvYmplY3RJRCI6IjUxMzQ1XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+L1RSIDxlbT4xMjM8L2VtPjA5OjIwMDkgSGVhbHRoIGluZm9ybWF0aWNzIOKAlCBHdWlkZWxpbmVzIGZvciB0ZXJtaW5vbG9neSBkZXZlbG9wbWVudCBvcmdhbml6YXRpb25zIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPi9UUiA8ZW0+MTIzPC9lbT4wOToyMDA5IHNwZWNpZmllcyBwcmluY2lwbGVzIGFuZCBwcm9jZXNzZXMgdGhhdCBzaG91bGQgYmUgZXhoaWJpdGVkIGJ5IGRldmVsb3BlcnMgb2YgaGVhbHRoY2FyZSB0ZXJtaW5vbG9naWVzIGluIHN1cHBvcnQgb2YgaW50ZXJuYXRpb25hbCBoZWFsdGhjYXJlIHRlcm1pbm9sb2d5IHN0YW5kYXJkaXphdGlvbi4gVGhlIHByaW1hcnkgdGFyZ2V0IGdyb3VwIGZvciA8ZW0+SVNPPC9lbT4vVFIgPGVtPjEyMzwvZW0+MDk6MjAwOSBpcyB0aG9zZSBlc3RhYmxpc2hpbmcgb3IgcmV2aWV3aW5nIG9yZ2FuaXphdGlvbnMgLCBhbmQgdGhvc2UgZXZhbHVhdGluZyB0aGUgc2VydmljZXMgb3IgcHJvZHVjdHMgbWFpbnRhaW5lZCBieSBzdWNoIG9yZ2FuaXphdGlvbnMgLCBpbiB0aGUgY29udGV4dCBvZiBpbnRlcm5hdGlvbmFsIGhlYWx0aGNhcmUgdGVybWlub2xvZ3kgc3RhbmRhcmRpemF0aW9uLiBJdCBjb21wbGVtZW50cyBzdGFuZGFyZHMgc3VjaCBhcyA8ZW0+SVNPPC9lbT4gMTcxMTUgYW5kIDxlbT5JU088L2VtPiAxNzExNyAod2hpY2ggYWRkcmVzcyB0aGUgY29udGVudCBvZiB0ZXJtaW5vbG9naWVzKSBieSBzcGVjaWZ5aW5nIGdvb2QgZ292ZXJuYW5jZSByZXF1aXJlbWVudHMgZm9yIHRoZSBsaWZlY3ljbGUgb2YgdGhvc2UgdGVybWlub2xvZ2llcy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDIvNzgvMjc4ODAiLCJ1dWlkIjoiYzgxNTcwMzMtMDJjOC00MTcwLWJlOWUtYWU3ZmQxMWY0NWFhIiwidGl0bGUiOiJJU08vVFIgMTIzNTE6MTk5OSBSb2FkIHZlaGljbGVzIOKAlCBEZXRlcm1pbmF0aW9uIG9mIGhlYWQgY29udGFjdCBhbmQgZHVyYXRpb24gaW4gaW1wYWN0IHRlc3RzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MTk5OSwib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBUZWNobmljYWwgUmVwb3J0IGdpdmVzIG1ldGhvZHMgdG8gZGV0ZXJtaW5lIHRoZSBpbnN0YW50IG9mIGhlYWQgY29udGFjdCBhbmQgdGhlIGR1cmF0aW9uIG9mIHRoaXMgY29udGFjdCBkdXJpbmcgaW1wYWN0IHRlc3RzLiBUaGUgZGV0ZXJtaW5hdGlvbiBvZiBoZWFkIGVuZ2FnZW1lbnQgYW5kIGRpc2VuZ2FnZW1lbnQgdGltZXMgYXJlIHVzZWQgaW4gdGhlIGNhbGN1bGF0aW9uIG9mIHRoZSBjb250YWN0IGhlYWQgaW5qdXJ5IGNyaXRlcmlhIChISUMpLiAiLCJvYmplY3RJRCI6IjI3ODgwXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+L1RSIDxlbT4xMjM8L2VtPjUxOjE5OTkgUm9hZCB2ZWhpY2xlcyDigJQgRGV0ZXJtaW5hdGlvbiBvZiBoZWFkIGNvbnRhY3QgYW5kIGR1cmF0aW9uIGluIGltcGFjdCB0ZXN0cyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX0sInRleHQiOnsidmFsdWUiOiJUaGlzIFRlY2huaWNhbCBSZXBvcnQgZ2l2ZXMgbWV0aG9kcyB0byBkZXRlcm1pbmUgdGhlIGluc3RhbnQgb2YgaGVhZCBjb250YWN0IGFuZCB0aGUgZHVyYXRpb24gb2YgdGhpcyBjb250YWN0IGR1cmluZyBpbXBhY3QgdGVzdHMuIFRoZSBkZXRlcm1pbmF0aW9uIG9mIGhlYWQgZW5nYWdlbWVudCBhbmQgZGlzZW5nYWdlbWVudCB0aW1lcyBhcmUgdXNlZCBpbiB0aGUgY2FsY3VsYXRpb24gb2YgdGhlIGNvbnRhY3QgaGVhZCBpbmp1cnkgY3JpdGVyaWEgKEhJQykuICIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA4LzQwLzg0MDIyIiwidXVpZCI6IjZhOTFkNTYwLTUyMTktNDk1Ny04MGMwLWYxMTFmMTE3YmZkMCIsInRpdGxlIjoiSVNPL0NEIDEyMzcwIEd1aWRlbGluZXMgZm9yIHRyZWF0bWVudCBhbmQgcmV1c2Ugb2YgZmVybWVudGF0aW9uLWJhc2VkIHBoYXJtYWNldXRpY2FsIHdhc3Rld2F0ZXIiLCJzdGF0dXMiOiJVbmRlciBkZXZlbG9wbWVudCIsInllYXIiOjIwMjMsIm9yZGVyIjoxMiwib2JqZWN0SUQiOiI4NDAyMl8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPi9DRCA8ZW0+MTIzPC9lbT43MCBHdWlkZWxpbmVzIGZvciB0cmVhdG1lbnQgYW5kIHJldXNlIG9mIGZlcm1lbnRhdGlvbi1iYXNlZCBwaGFybWFjZXV0aWNhbCB3YXN0ZXdhdGVyIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDgvNDAvODQwMjciLCJ1dWlkIjoiNGQxYTJjZTItMDBmMi00MTY1LWIxNDYtNmM5MDcyYzI3NDIxIiwidGl0bGUiOiJJU08vV0QgMTIzODYgTGl0aGl1bSBjYXJib25hdGUgLSBEZXRlcm1pbmF0aW9uIG9mIG1ldGFsbGljIG1hZ25ldGljIGltcHVyaXRpZXMgYnkgSUNQLU9FUyIsInN0YXR1cyI6IlVuZGVyIGRldmVsb3BtZW50IiwieWVhciI6MjAyMiwib3JkZXIiOjEyLCJvYmplY3RJRCI6Ijg0MDI3XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+L1dEIDxlbT4xMjM8L2VtPjg2IExpdGhpdW0gY2FyYm9uYXRlIC0gRGV0ZXJtaW5hdGlvbiBvZiBtZXRhbGxpYyBtYWduZXRpYyBpbXB1cml0aWVzIGJ5IElDUC1PRVMiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wOC80MC84NDAyNiIsInV1aWQiOiJjZTYxNDQ1MC0yYjE0LTRjMzQtOWYyZS1lYjcxYTE1ZTk0ZjQiLCJ0aXRsZSI6IklTTy9XRCAxMjM4MCBMaXRoaXVtIGNhcmJvbmF0ZSAtIERldGVybWluYXRpb24gb2YgaW5zb2x1YmxlIHBhcnRpY2xlcyBpbiBhY2lkIGJ5IGdyYXZpbWV0cnkiLCJzdGF0dXMiOiJVbmRlciBkZXZlbG9wbWVudCIsInllYXIiOjIwMjIsIm9yZGVyIjoxMiwib2JqZWN0SUQiOiI4NDAyNl8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPi9XRCA8ZW0+MTIzPC9lbT44MCBMaXRoaXVtIGNhcmJvbmF0ZSAtIERldGVybWluYXRpb24gb2YgaW5zb2x1YmxlIHBhcnRpY2xlcyBpbiBhY2lkIGJ5IGdyYXZpbWV0cnkiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNy83NS83NzUwNiIsInV1aWQiOiI5ODkwZDVlMi0zNzlkLTRhMDUtYjE5NS1hOGZhZGRhNmY4MjUiLCJ0aXRsZSI6IklTTy9ESVMgMTIzMTEgUGVyc29uYWwgcHJvdGVjdGl2ZSBlcXVpcG1lbnQg4oCUIFRlc3QgbWV0aG9kcyBmb3Igc3VuZ2xhc3NlcyBhbmQgcmVsYXRlZCBleWV3ZWFyIiwic3RhdHVzIjoiVW5kZXIgZGV2ZWxvcG1lbnQiLCJ5ZWFyIjoyMDIyLCJvcmRlciI6MTIsIm9iamVjdElEIjoiNzc1MDZfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4vRElTIDxlbT4xMjM8L2VtPjExIFBlcnNvbmFsIHByb3RlY3RpdmUgZXF1aXBtZW50IOKAlCBUZXN0IG1ldGhvZHMgZm9yIHN1bmdsYXNzZXMgYW5kIHJlbGF0ZWQgZXlld2VhciIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA3LzcxLzc3MTE4IiwidXVpZCI6IjdmY2EyNjZlLTZiMzktNGY4NC1hYTljLTFkYzI2YjBjNTEwOSIsInRpdGxlIjoiSVNPL0NEIDEyMzAxIFBsYWluIGJlYXJpbmdzIOKAlCBRdWFsaXR5IGNvbnRyb2wgdGVjaG5pcXVlcyBhbmQgaW5zcGVjdGlvbiBvZiBnZW9tZXRyaWNhbCBhbmQgbWF0ZXJpYWwgcXVhbGl0eSBjaGFyYWN0ZXJpc3RpY3MiLCJzdGF0dXMiOiJEZWxldGVkIiwieWVhciI6MjAyMiwib3JkZXIiOjEwMCwib2JqZWN0SUQiOiI3NzExOF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPi9DRCA8ZW0+MTIzPC9lbT4wMSBQbGFpbiBiZWFyaW5ncyDigJQgUXVhbGl0eSBjb250cm9sIHRlY2huaXF1ZXMgYW5kIGluc3BlY3Rpb24gb2YgZ2VvbWV0cmljYWwgYW5kIG1hdGVyaWFsIHF1YWxpdHkgY2hhcmFjdGVyaXN0aWNzIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDMvMDEvMzAxNDkiLCJ1dWlkIjoiOTBkOTkyNGQtMWI4Ni00ZjEyLTk0NzAtYzk1MGVkNjI5MzFhIiwidGl0bGUiOiJJU08vVFIgMTIzNDktMjoxOTk5IFJvYWQgdmVoaWNsZXMg4oCUIER1bW1pZXMgZm9yIHJlc3RyYWludCBzeXN0ZW0gdGVzdGluZyDigJQgUGFydCAyOiBDaGlsZCBkdW1taWVzIiwic3RhdHVzIjoiV2l0aGRyYXduIiwieWVhciI6MjAxNSwib3JkZXIiOjEwMCwib2JqZWN0SUQiOiIzMDE0OV8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPi9UUiA8ZW0+MTIzPC9lbT40OS0yOjE5OTkgUm9hZCB2ZWhpY2xlcyDigJQgRHVtbWllcyBmb3IgcmVzdHJhaW50IHN5c3RlbSB0ZXN0aW5nIOKAlCBQYXJ0IDI6IENoaWxkIGR1bW1pZXMiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMy8wMS8zMDE0OCIsInV1aWQiOiI1MTQ3ODdhZS0yYzcxLTRhZGQtOWUyNi0xNGFkNjc2YzQ5YzQiLCJ0aXRsZSI6IklTTy9UUiAxMjM0OS0xOjE5OTkgUm9hZCB2ZWhpY2xlcyDigJQgRHVtbWllcyBmb3IgcmVzdHJhaW50IHN5c3RlbSB0ZXN0aW5nIOKAlCBQYXJ0IDE6IEFkdWx0IGR1bW1pZXMiLCJzdGF0dXMiOiJXaXRoZHJhd24iLCJ5ZWFyIjoyMDE1LCJvcmRlciI6MTAwLCJvYmplY3RJRCI6IjMwMTQ4XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+L1RSIDxlbT4xMjM8L2VtPjQ5LTE6MTk5OSBSb2FkIHZlaGljbGVzIOKAlCBEdW1taWVzIGZvciByZXN0cmFpbnQgc3lzdGVtIHRlc3Rpbmcg4oCUIFBhcnQgMTogQWR1bHQgZHVtbWllcyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxMjMiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzAzLzc4LzM3ODM1IiwidXVpZCI6ImU1OTkzNTU5LWJlZTMtNDNiMS04ZGE3LTQxNTVhMTFhZjQ3YiIsInRpdGxlIjoiSVNPL1RSIDEyMzUwOjIwMDQgUm9hZCB2ZWhpY2xlcyAtIEluanVyeSByaXNrIGN1cnZlcyBmb3IgZXZhbHVhdGlvbiBvZiBvY2N1cGFudCBwcm90ZWN0aW9uIGluIHNpZGUgaW1wYWN0Iiwic3RhdHVzIjoiV2l0aGRyYXduIiwieWVhciI6MjAxMywib3JkZXIiOjEwMCwidGV4dCI6IklTTy9UUiAxMjM1MDoyMDA0IHByb3ZpZGVzIGluanVyeSByaXNrIGN1cnZlcyBmb3IgdGhlIGV2YWx1YXRpb24gb2Ygb2NjdXBhbnQgcHJvdGVjdGlvbiBpbiBzaWRlIGltcGFjdHMgb24gcm9hZCB2ZWhpY2xlcy4gVGhlIG1lYXN1cmVtZW50cyBjb25jZXJuZWQgYXJlIHBlcmZvcm1lZCBvbiB0d28gbGF0ZXJhbCBpbXBhY3QgZHVtbWllcywgRXVyb1NJRCAxIGFuZCBCaW9TSUQsIHdoaWNoIHByZXNlbnQgYWNjZXB0YWJsZSBsZXZlbHMgb2YgYmlvZmlkZWxpdHkgcmVzcG9uc2UgaW4gYWNjb3JkYW5jZSB3aXRoIElTTy9UUiA5NzkwIGFuZCBhcmUgdXNlZCBpbiB0ZXN0cyBjYXJyaWVkIG91dCBhY2NvcmRpbmcgdG8gSVNPIDEwOTk3LiAiLCJvYmplY3RJRCI6IjM3ODM1XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+L1RSIDxlbT4xMjM8L2VtPjUwOjIwMDQgUm9hZCB2ZWhpY2xlcyAtIEluanVyeSByaXNrIGN1cnZlcyBmb3IgZXZhbHVhdGlvbiBvZiBvY2N1cGFudCBwcm90ZWN0aW9uIGluIHNpZGUgaW1wYWN0IiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEyMyJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPi9UUiA8ZW0+MTIzPC9lbT41MDoyMDA0IHByb3ZpZGVzIGluanVyeSByaXNrIGN1cnZlcyBmb3IgdGhlIGV2YWx1YXRpb24gb2Ygb2NjdXBhbnQgcHJvdGVjdGlvbiBpbiBzaWRlIGltcGFjdHMgb24gcm9hZCB2ZWhpY2xlcy4gVGhlIG1lYXN1cmVtZW50cyBjb25jZXJuZWQgYXJlIHBlcmZvcm1lZCBvbiB0d28gbGF0ZXJhbCBpbXBhY3QgZHVtbWllcywgRXVyb1NJRCAxIGFuZCBCaW9TSUQsIHdoaWNoIHByZXNlbnQgYWNjZXB0YWJsZSBsZXZlbHMgb2YgYmlvZmlkZWxpdHkgcmVzcG9uc2UgaW4gYWNjb3JkYW5jZSB3aXRoIDxlbT5JU088L2VtPi9UUiA5NzkwIGFuZCBhcmUgdXNlZCBpbiB0ZXN0cyBjYXJyaWVkIG91dCBhY2NvcmRpbmcgdG8gPGVtPklTTzwvZW0+IDEwOTk3LiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiMTIzIl19fX1dLCJuYkhpdHMiOjE1MiwicGFnZSI6MCwibmJQYWdlcyI6MiwiaGl0c1BlclBhZ2UiOjEwMCwiZXhoYXVzdGl2ZU5iSGl0cyI6dHJ1ZSwiZXhoYXVzdGl2ZVR5cG8iOnRydWUsImV4aGF1c3RpdmUiOnsibmJIaXRzIjp0cnVlLCJ0eXBvIjp0cnVlfSwicXVlcnkiOiJJU08gMTIzIiwicGFyYW1zIjoicXVlcnk9SVNPKzEyMyZoaXRzUGVyUGFnZT0xMDAmZmlsdGVycz1jYXRlZ29yeSUzQXN0YW5kYXJkIiwicHJvY2Vzc2luZ1RpbWVNUyI6NCwicHJvY2Vzc2luZ1RpbWluZ3NNUyI6eyJhZnRlckZldGNoIjp7ImZvcm1hdCI6eyJoaWdobGlnaHRpbmciOjIsInRvdGFsIjozfSwidG90YWwiOjN9LCJyZXF1ZXN0Ijp7InJvdW5kVHJpcCI6Mjk0fSwidG90YWwiOjR9LCJzZXJ2ZXJUaW1lTVMiOjR9
  recorded_at: Mon, 27 Mar 2023 09:50:14 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/02/32/23281.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=955A4348CE8CFE8E6E334D2E68DDFFE3; Path=/; Secure; HttpOnly
      Location:
      - "/standard/23281.html"
      Content-Length:
      - '0'
      Date:
      - Mon, 27 Mar 2023 09:50:22 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Mon, 27 Mar 2023 09:50:22 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/23281.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=F8603C308119E8E9986004E05F04AB28; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Mon, 27 Mar 2023 09:50:24 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 Mar 2023 09:50:25 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-iec/main/data/iec_60050-103_2009.yaml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '3360'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"425497c2aaa1d0ffae65f2134595109277904f6e64c7095d1fee7ebfa138a8d0"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 7D84:40E3:4ADEE5:5FB6DC:642166BC
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 Mar 2023 09:50:25 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-mel11243-MEL
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1679910626.696746,VS0,VE1
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 5766551b0324016e00a7f3a1d551d0472cc82f2c
      Expires:
      - Mon, 27 Mar 2023 09:55:25 GMT
      Source-Age:
      - '36'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        LS0tCnNjaGVtYS12ZXJzaW9uOiB2MS4yLjEKaWQ6IElFQzYwMDUwLTEwMy0yMDA5CnRpdGxlOgotIGNvbnRlbnQ6ICdJbnRlcm5hdGlvbmFsIEVsZWN0cm90ZWNobmljYWwgVm9jYWJ1bGFyeSAoSUVWKSAtIFBhcnQgMTAzOiBNYXRoZW1hdGljcwogICAgLSBGdW5jdGlvbnMnCiAgbGFuZ3VhZ2U6CiAgLSBlbgogIHNjcmlwdDoKICAtIExhdG4KICBmb3JtYXQ6IHRleHQvcGxhaW4KICB0eXBlOiBtYWluCi0gY29udGVudDogJ1ZvY2FidWxhaXJlIEVsZWN0cm90ZWNobmlxdWUgSW50ZXJuYXRpb25hbCAoSUVWKSAtIFBhcnRpZSAxMDM6IE1hdGjDqW1hdGlxdWVzCiAgICAtIEZvbmN0aW9ucycKICBsYW5ndWFnZToKICAtIGZyCiAgc2NyaXB0OgogIC0gTGF0bgogIGZvcm1hdDogdGV4dC9wbGFpbgogIHR5cGU6IG1haW4KLSBjb250ZW50OiAnVmVyc2nDs24gT2ZpY2lhbCBFbiBlc3Bhw7FvbCAtIFZvY2FidWxhcmlvIEVsZWN0cm90w6ljbmljbyBJbnRlcm5hY2lvbmFsLgogICAgUGFydGUgMTAzOiBNYXRlbcOhdGljYXMuIEZ1bmNpb25lcy4nCiAgbGFuZ3VhZ2U6CiAgLSBlcwogIHNjcmlwdDoKICAtIExhdG4KICBmb3JtYXQ6IHRleHQvcGxhaW4KICB0eXBlOiBtYWluCmxpbms6Ci0gY29udGVudDogaHR0cHM6Ly93ZWJzdG9yZS5pZWMuY2gvcHVibGljYXRpb24vMTYxCiAgdHlwZTogc3JjCi0gY29udGVudDogaHR0cHM6Ly93ZWJzdG9yZS5pZWMuY2gvcHJldmlldy9pbmZvX2llYzYwMDUwLTEwM3tlZDEuMH1iLnBkZgogIHR5cGU6IG9icAp0eXBlOiBzdGFuZGFyZApkb2NpZDoKLSBpZDogSUVDIDYwMDUwLTEwMzoyMDA5CiAgdHlwZTogSUVDCiAgcHJpbWFyeTogdHJ1ZQotIGlkOiAndXJuOmllYzpzdGQ6aWVjOjYwMDUwLTEwMzoyMDA5LTEyOjo6JwogIHR5cGU6IFVSTgpkYXRlOgotIHR5cGU6IHB1Ymxpc2hlZAogIHZhbHVlOiAnMjAwOS0xMi0xNCcKY29udHJpYnV0b3I6Ci0gb3JnYW5pemF0aW9uOgogICAgbmFtZToKICAgIC0gY29udGVudDogSW50ZXJuYXRpb25hbCBFbGVjdHJvdGVjaG5pY2FsIENvbW1pc3Npb24KICAgIGFiYnJldmlhdGlvbjoKICAgICAgY29udGVudDogSUVDCiAgICB1cmw6IHd3dy5pZWMuY2gKICByb2xlOgogIC0gdHlwZTogcHVibGlzaGVyCmVkaXRpb246CiAgY29udGVudDogJzEnCnJldmRhdGU6ICcyMDA5LTEyLTE0JwpsYW5ndWFnZToKLSBlbgotIGZyCi0gZXMKc2NyaXB0OgotIExhdG4KYWJzdHJhY3Q6Ci0gY29udGVudDogIklFQyA2MDA1MC0xMDM6MjAwOSBnaXZlcyB0aGUgdGVybWlub2xvZ3kgcmVsYXRpdmUgdG8gZnVuY3Rpb25zIG9mIG9uZQogICAgb3IgbW9yZSB2YXJpYWJsZXMuIFRvZ2V0aGVyIHdpdGggSUVDIDYwMDUwLTEwMiwgaXQgY292ZXJzIHRoZSBtYXRoZW1hdGljYWwgdGVybWlub2xvZ3kKICAgIHVzZWQgaW4gdGhlIGZpZWxkcyBvZiBlbGVjdHJpY2l0eSwgZWxlY3Ryb25pY3MgYW5kIHRlbGVjb21tdW5pY2F0aW9ucy4gSXQgbWFpbnRhaW5zCiAgICBhIGNsZWFyIGRpc3RpbmN0aW9uIGJldHdlZW4gbWF0aGVtYXRpY2FsIGNvbmNlcHRzIGFuZCBwaHlzaWNhbCBjb25jZXB0cywgZXZlbgogICAgaWYgc29tZSB0ZXJtcyBhcmUgdXNlZCBpbiBib3RoIGNhc2VzLiBNYXRoZW1hdGljYWwgc3ltYm9scyBhcmUgZ2VuZXJhbGx5IGluIGFjY29yZGFuY2UKICAgIHdpdGggSUVDIDYwMDI3LTEgYW5kIElTTyA4MDAwMC0yLiBUaGlzIHN0YW5kYXJkIGNhbmNlbHMgYW5kIHJlcGxhY2VzIFNlY3Rpb25zCiAgICAxMDEtMTMsIDEwMS0xNCBhbmQgMTAxLTE1IG9mIEludGVybmF0aW9uYWwgU3RhbmRhcmQgSUVDIDYwMDUwLTEwMToxOTk4LjxiciAvPlxyXG5JdAogICAgaGFzIHRoZSBzdGF0dXMgb2YgYSBob3Jpem9udGFsIHN0YW5kYXJkIGluIGFjY29yZGFuY2Ugd2l0aCBJRUMgR3VpZGUgMTA4LiIKICBsYW5ndWFnZToKICAtIGVuCiAgc2NyaXB0OgogIC0gTGF0bgogIGZvcm1hdDogdGV4dC9odG1sCi0gY29udGVudDogIkxhIENFSSA2MDA1MC0xMDM6MjAwOSBkb25uZSBsYSB0ZXJtaW5vbG9naWUgcmVsYXRpdmUgYXV4IGZvbmN0aW9ucyBkJ3VuZQogICAgb3UgcGx1c2lldXJzIHZhcmlhYmxlcy4gQ29uam9pbnRlbWVudCBhdmVjIGxhIENFSSA2MDA1MC0xMDIsIGVsbGUgY291dnJlIGxhIHRlcm1pbm9sb2dpZQogICAgbWF0aMOpbWF0aXF1ZSB1dGlsaXPDqWUgZGFucyBsZXMgZG9tYWluZXMgZGUgbCfDqWxlY3RyaWNpdMOpLCBkZSBsJ8OpbGVjdHJvbmlxdWUgZXQKICAgIGRlcyB0w6lsw6ljb21tdW5pY2F0aW9ucy4gRWxsZSBtYWludGllbnQgdW5lIGRpc3RpbmN0aW9uIG5ldHRlIGVudHJlIGxlcyBjb25jZXB0cwogICAgbWF0aMOpbWF0aXF1ZXMgZXQgbGVzIGNvbmNlcHRzIHBoeXNpcXVlcywgbcOqbWUgc2kgY2VydGFpbnMgdGVybWVzIHNvbnQgZW1wbG95w6lzCiAgICBkYW5zIGxlcyBkZXV4IGNhcy4gTGVzIHN5bWJvbGVzIG1hdGjDqW1hdGlxdWVzIHNvbnQgZ8OpbsOpcmFsZW1lbnQgY29uZm9ybWVzIMOgIGxhCiAgICBDRUkgNjAwMjctMSBldCDDoCBsJ0lTTyA4MDAwMC0yLiBDZXR0ZSBub3JtZSBhbm51bGUgZXQgcmVtcGxhY2UgbGVzIHNlY3Rpb25zIDEwMS0xMywKICAgIDEwMS0xNCBldCAxMDEtMTUgZGUgbGEgbm9ybWUgaW50ZXJuYXRpb25hbGUgQ0VJIDYwMDUwLTEwMToxOTk4LjxiciAvPlxyXG5FbGxlCiAgICBhIGxlIHN0YXR1dCBkZSBub3JtZSBob3Jpem9udGFsZSBjb25mb3Jtw6ltZW50IGF1IEd1aWRlIElFQyAxMDguIgogIGxhbmd1YWdlOgogIC0gZnIKICBzY3JpcHQ6CiAgLSBMYXRuCiAgZm9ybWF0OiB0ZXh0L2h0bWwKZG9jc3RhdHVzOgogIHN0YWdlOgogICAgdmFsdWU6IFBVQkxJU0hFRApjb3B5cmlnaHQ6Ci0gb3duZXI6CiAgLSBuYW1lOgogICAgLSBjb250ZW50OiBJbnRlcm5hdGlvbmFsIEVsZWN0cm90ZWNobmljYWwgQ29tbWlzc2lvbgogICAgYWJicmV2aWF0aW9uOgogICAgICBjb250ZW50OiBJRUMKICAgIHVybDogd3d3LmllYy5jaAogIGZyb206ICcyMDA5JwpwbGFjZToKLSBHZW5ldmEKZG9jdHlwZTogaW50ZXJuYXRpb25hbC1zdGFuZGFyZAplZGl0b3JpYWxncm91cDoKICB0ZWNobmljYWxfY29tbWl0dGVlOgogIC0gbmFtZTogVEMgMQogICAgbnVtYmVyOiAxCiAgICB0eXBlOiB0ZWNobmljYWxDb21taXR0ZWUKaWNzOgotIGNvZGU6IDAxLjA0MC4wNwogIHRleHQ6IE5hdHVyYWwgYW5kIGFwcGxpZWQgc2NpZW5jZXMgKFZvY2FidWxhcmllcykKLSBjb2RlOiAnMDcuMDIwJwogIHRleHQ6IE1hdGhlbWF0aWNzCnN0cnVjdHVyZWRpZGVudGlmaWVyOgogIHByb2plY3RfbnVtYmVyOiAnNjAwNTAnCiAgcGFydDogJzEwMycKICB0eXBlOiBJRUMKZXh0OgogIHNjaGVtYS12ZXJzaW9uOiB2MS4wLjAKcHJpY2VfY29kZTogaWVjOkwK
  recorded_at: Mon, 27 Mar 2023 09:50:25 GMT
- request:
    method: get
    uri: http://www.electropedia.org/iev/iev.nsf/display?ievref=103-01-02&openform
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Server:
      - CloudFront
      Date:
      - Mon, 27 Mar 2023 09:50:28 GMT
      Content-Type:
      - text/html
      Content-Length:
      - '167'
      Connection:
      - keep-alive
      Location:
      - https://www.electropedia.org/iev/iev.nsf/display?openform&ievref=103-01-02
      X-Cache:
      - Redirect from cloudfront
      Via:
      - 1.1 14e06bd3949568687103b6759131a70a.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL50-C2
      X-Amz-Cf-Id:
      - axEaaTjIh7EvbK6zmpqr2UzUE3phfsjWRwlstrkGfHZpXPYiSy75sA==
    body:
      encoding: UTF-8
      string: "<html>\r\n<head><title>301 Moved Permanently</title></head>\r\n<body>\r\n<center><h1>301
        Moved Permanently</h1></center>\r\n<hr><center>CloudFront</center>\r\n</body>\r\n</html>\r\n"
  recorded_at: Mon, 27 Mar 2023 09:50:28 GMT
- request:
    method: get
    uri: https://www.electropedia.org/iev/iev.nsf/display?ievref=103-01-02&openform
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Content-Length:
      - '17381'
      Connection:
      - keep-alive
      Server:
      - Lotus-Domino
      Date:
      - Mon, 27 Mar 2023 10:06:59 GMT
      Last-Modified:
      - Mon, 27 Mar 2023 10:06:57 GMT
      Expires:
      - Tue, 01 Jan 1980 06:00:00 GMT
      Cache-Control:
      - no-cache
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 364a2a8191baca5ad55bfca32a8ad06c.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL50-C2
      X-Amz-Cf-Id:
      - 61I4nX-wMGdXA6G1s2DyaURhRxiDOBBnbjG7WtRdwBNsJpmcueTpJw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 Mar 2023 09:50:29 GMT
recorded_with: VCR 6.1.0
